<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>获取浏览器url 参数</title>
      <link href="/2018/02/06/js/common/parseUrlParams/"/>
      <url>/2018/02/06/js/common/parseUrlParams/</url>
      <content type="html"><![CDATA[<h4 id="1、获取当前url的方法："><a href="#1、获取当前url的方法：" class="headerlink" title="1、获取当前url的方法："></a>1、获取当前url的方法：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前url = <span class="string">'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;page=1&amp;type=note'</span></span><br><span class="line"><span class="keyword">var</span> href = <span class="built_in">window</span>.location.href    <span class="comment">// 获取完整 url路径</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="built_in">window</span>.location.search  <span class="comment">// 获取从？开始的参数部分</span></span><br></pre></td></tr></table></figure><h4 id="2、将url中的参数转换成中文"><a href="#2、将url中的参数转换成中文" class="headerlink" title="2、将url中的参数转换成中文"></a>2、将url中的参数转换成中文</h4><p> 知识点 来自W3C</p><h5 id="编码encodeURI-解码decodeURI"><a href="#编码encodeURI-解码decodeURI" class="headerlink" title="编码encodeURI() 解码decodeURI()"></a>编码<code>encodeURI()</code> 解码<code>decodeURI()</code></h5><ol><li>把字符串作为 URI 进行编码。</li><li>对 / ? : @ &amp; = + $ #  不会转义。</li></ol><h5 id="编码-encodeURIComponent-解码-decodeURICompnent"><a href="#编码-encodeURIComponent-解码-decodeURICompnent" class="headerlink" title="编码 encodeURIComponent()  解码 decodeURICompnent()"></a>编码 <code>encodeURIComponent()</code>  解码 <code>decodeURICompnent()</code></h5><ol><li>把字符串作为 URI 组件进行编码。</li><li>不会对 ASCII 字母和数字进行编码，</li><li>也不会对这些 ASCII 标点符号 - _ . ! ~ * ‘ ( ) 进行编码：</li><li>其他字符（比如 ：;/?:@&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</li></ol><h4 id="3、获取URL参数"><a href="#3、获取URL参数" class="headerlink" title="3、获取URL参数"></a>3、获取URL参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="built_in">decodeURI</span>(search) <span class="comment">// 编码字符 解码</span></span><br><span class="line"><span class="keyword">var</span> splitIndex = url.indexOf(<span class="string">'?'</span>)  <span class="comment">// 返回第一个？号的位置</span></span><br><span class="line"><span class="keyword">var</span> str = url.substring(splitIndex + <span class="number">1</span>) <span class="comment">// 获取到查询参数</span></span><br></pre></td></tr></table></figure><h5 id="3-1-获取url中某一个参数的值的方法"><a href="#3-1-获取url中某一个参数的值的方法" class="headerlink" title="3.1 获取url中某一个参数的值的方法"></a>3.1 获取url中某一个参数的值的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> getStrParam = <span class="function"><span class="keyword">function</span> (<span class="params">str, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">var</span> r = str.match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> r[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-获取url中所有的参数，序列在在一个对象中；"><a href="#3-2-获取url中所有的参数，序列在在一个对象中；" class="headerlink" title="3.2 获取url中所有的参数，序列在在一个对象中；"></a>3.2 获取url中所有的参数，序列在在一个对象中；</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> getAllUrlParam = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> urlArr = str.split(<span class="string">'&amp;'</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg = urlArr[i].split(<span class="string">'='</span>)</span><br><span class="line">        obj[arg[<span class="number">0</span>]] = arg[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>一道练手题送给大家：</strong><br>将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&amp;page=1&amp;type=&amp;key=aa&amp;key=bb&amp;'</span></span><br></pre></td></tr></table></figure></p><p>预期结果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    q: <span class="string">'参数'</span>,  <span class="comment">// 中文</span></span><br><span class="line">    page: <span class="string">"1"</span>,</span><br><span class="line">    type: <span class="literal">true</span>, <span class="comment">// 空值为ture</span></span><br><span class="line">    key: [<span class="string">"aa"</span>, <span class="string">"bb"</span>] <span class="comment">// 相同的key放在数组中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阮一峰：时间管理的七句话</title>
      <link href="/2017/11/24/others/time-manage/"/>
      <url>/2017/11/24/others/time-manage/</url>
      <content type="html"><![CDATA[<p>时间对每一个人来说都是重要的，学会管理时间；</p><a id="more"></a><h3 id="一、-进程切换非常昂贵，避免多任务，保持单进程。"><a href="#一、-进程切换非常昂贵，避免多任务，保持单进程。" class="headerlink" title="一、 进程切换非常昂贵，避免多任务，保持单进程。"></a>一、 进程切换非常昂贵，避免多任务，保持单进程。</h3><p><img src="/public_s/images/timeManage/0.5021243947689109.png" alt="图片"></p><p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p><p>上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。</p><h3 id="二、研究表明，集中注意力、高效工作，每天最多4小时。"><a href="#二、研究表明，集中注意力、高效工作，每天最多4小时。" class="headerlink" title="二、研究表明，集中注意力、高效工作，每天最多4小时。"></a>二、研究表明，集中注意力、高效工作，每天最多4小时。</h3><p><img src="/public_s/images/timeManage/0.9251521097293676.png" alt="图片"></p><p>一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。</p><p>上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。</p><h3 id="三、划分任务的优先级，不要把’急切’当作’重要’。"><a href="#三、划分任务的优先级，不要把’急切’当作’重要’。" class="headerlink" title="三、划分任务的优先级，不要把’急切’当作’重要’。"></a>三、划分任务的优先级，不要把’急切’当作’重要’。</h3><p><img src="/public_s/images/timeManage/0.530341774969219.png" alt="图片"></p><p>你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）</p><p>一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。</p><h3 id="四、起床后，不要查看邮件和微信。"><a href="#四、起床后，不要查看邮件和微信。" class="headerlink" title="四、起床后，不要查看邮件和微信。"></a>四、起床后，不要查看邮件和微信。</h3><p><img src="/public_s/images/timeManage/0.1174553194175334.png" alt="图片"></p><p>早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）</p><h3 id="五、避免开会，因为人类已知的最浪费时间的事情，就是开会。"><a href="#五、避免开会，因为人类已知的最浪费时间的事情，就是开会。" class="headerlink" title="五、避免开会，因为人类已知的最浪费时间的事情，就是开会。"></a>五、避免开会，因为人类已知的最浪费时间的事情，就是开会。</h3><p><img src="/public_s/images/timeManage/0.46321933528434545.png" alt="图片"></p><p>越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。</p><h3 id="六、早晨4点起床，到了中午，你就完成了一天的任务。"><a href="#六、早晨4点起床，到了中午，你就完成了一天的任务。" class="headerlink" title="六、早晨4点起床，到了中午，你就完成了一天的任务。"></a>六、早晨4点起床，到了中午，你就完成了一天的任务。</h3><p><img src="/public_s/images/timeManage/0.7242512129749097.png" alt="图片"></p><p>早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。</p><h3 id="七、你没空时不会做的事情，有空了也不会做。"><a href="#七、你没空时不会做的事情，有空了也不会做。" class="headerlink" title="七、你没空时不会做的事情，有空了也不会做。"></a>七、你没空时不会做的事情，有空了也不会做。</h3><p><img src="/public_s/images/timeManage/0.419097318675272.png" alt="图片"></p><p>世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。</p><p>来源： <a href="http://www.techug.com/post/time-management.html" target="_blank" rel="noopener">http://www.techug.com/post/time-management.html</a></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>经过了这么多年的努力，理想终于成了泡影---猎场经典台词</title>
      <link href="/2017/11/14/others/move-review-liechang/"/>
      <url>/2017/11/14/others/move-review-liechang/</url>
      <content type="html"><![CDATA[<p>经典歌曲 :   一场恋爱</p><hr><p><audio style="width: 500px" autoplay="autoplay" src="/public_s/mp3/a-love.mp3" controls="controls"><br>你的浏览器暂不支持！<br></audio><br><small style="color: #808080; font-size: 12px">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small></p><hr><p>God gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.</p><p>上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。</p><ol><br><br><li> “如果记忆是一个罐头，我希望它永远不会过期”。 ———-引用自电影《重庆森林》</li><br><li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ———引用自卓别林</li><br><li> “山中何所有 ，岭上多白云”。 —————-引用自陶弘景</li><br><br></ol><p><br></p><ol><li><p>岁月如刀，我似芹萝，时间太可怕了。</p></li><li><p>经过了这么多年的努力，理想终于成了泡影。</p></li><li><p>时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 </p></li><li><p>女人不仅是个伴，还能让我活得不那么糙。</p></li><li><p>女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。</p></li><li><p>我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张</p></li><li><p>“退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     </p></li><li><p>只要你还没钻进坟墓里，一切就只是开始。</p></li><li><p>职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。</p></li><li><p>这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电视剧 </tag>
            
            <tag> 经典台词 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue组件的使用</title>
      <link href="/2017/11/09/frame/vue/vue-study-03/"/>
      <url>/2017/11/09/frame/vue/vue-study-03/</url>
      <content type="html"><![CDATA[<p>vue中组价的使用方式？<br><a id="more"></a><br>description: </p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>iview组件使用的踩坑记录</title>
      <link href="/2017/11/08/frame/vue/vue-study-iview/"/>
      <url>/2017/11/08/frame/vue/vue-study-iview/</url>
      <content type="html"><![CDATA[<p>级联选择器的校验， 导航Tabs的使用<br><a id="more"></a></p><h2 id="级联选择起的校验"><a href="#级联选择起的校验" class="headerlink" title="级联选择起的校验"></a>级联选择起的校验</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-08 16:03:39 </div><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Form</span> <span class="attr">:label-width</span>=<span class="string">"100"</span> <span class="attr">ref</span>=<span class="string">"formData"</span> <span class="attr">:rules</span>=<span class="string">"ruleValidate"</span> <span class="attr">:model</span>=<span class="string">"formData"</span> <span class="attr">inline</span> <span class="attr">class</span>=<span class="string">"wms-form-check oneline"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Form-item</span> <span class="attr">label</span>=<span class="string">"收货地址："</span> <span class="attr">style</span>=<span class="string">"width:532px"</span> <span class="attr">prop</span>=<span class="string">"region"</span> `@注意<span class="attr">region</span>`&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cascader</span> <span class="attr">:data</span>=<span class="string">"provinceCity"</span> <span class="attr">v-model</span>=<span class="string">"formData.region"</span> `@注意<span class="attr">region</span>` <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">trigger</span>=<span class="string">"hover"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cascader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wmsValidate <span class="keyword">from</span> <span class="string">'wmsValidate</span></span><br><span class="line"><span class="string">data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        formData: &#123;</span></span><br><span class="line"><span class="string">            region: []</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        ruleValidate: &#123;</span></span><br><span class="line"><span class="string">            ownerName: [&#123;required: true, message: '</span>货主名称不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            type: [&#123;required: true, message: '</span>单据类型不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            contactsName: [&#123;required: true, message: '</span>联系人不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            contacts: [&#123;required: true, message: '</span>联系方式不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            region: [ --@注意--</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    validator: wmsValidate.proviinceValidate,</span></span><br><span class="line"><span class="string">                    required: true,</span></span><br><span class="line"><span class="string">                    trigger: '</span>change<span class="string">',</span></span><br><span class="line"><span class="string">                    fullField: '</span>address<span class="string">'</span></span><br><span class="line"><span class="string">                &#125;],</span></span><br><span class="line"><span class="string">            address: [&#123;required: true, message: '</span>详细地址不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            shippingMethod: [&#123;required: true, message: '</span>送货方式不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;]</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">            &#125;,  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="检验地址控件的方法"><a href="#检验地址控件的方法" class="headerlink" title="检验地址控件的方法"></a>检验地址控件的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 校验地址控件选择 必填, 不能双向绑定 改变数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wmsValidate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> proviinceValidate(rule, value, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.isArray(value) &amp;&amp; value.length === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'地址不能为空'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tisp：</strong> <code>v-model</code>绑定的名字，<code>prop</code>的名字，和<code>validate</code>中的名字必须一致，<code>validate</code>中才能接收到值<br><br></p><h2 id="iview中tabs的使用"><a href="#iview中tabs的使用" class="headerlink" title="iview中tabs的使用"></a>iview中tabs的使用</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-15 09:46:55 </div><p>正确使用姿势：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">v-if</span>=<span class="string">"pageName!=='detail'"</span> <span class="attr">type</span>=<span class="string">"card"</span> <span class="attr">class</span>=<span class="string">"wms-mt10 wms-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tab-pane</span> <span class="attr">label</span>=<span class="string">"出库箱信息"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"pageName!=='detail'"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Tisp：</strong>： 不能将<code>Tabs</code>放在 带有<code>v-if</code>属性的<code>div</code>中</p><p><br></p><h2 id="iview中Model弹窗二次点击依然会关闭问题"><a href="#iview中Model弹窗二次点击依然会关闭问题" class="headerlink" title="iview中Model弹窗二次点击依然会关闭问题"></a>iview中Model弹窗二次点击依然会关闭问题</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-16 18:39:55 </div><p> 确定按钮点击 –会自动关闭<code>Model</code>, 添加属性 <code>:loading</code>后需要在<code>@on-ok</code>事件中手动去设置关闭<br> Tips: <code>:loading</code>初始值为要设置为 <code>true</code><br> <strong>问题：</strong> 首次点击未手动设置model关闭， 再次点击依然会自动关闭？<br> 场景：</p><blockquote><p>html</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Modal</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"syncUploadPop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:mask-closable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">on-ok</span>=<span class="string">"accountUnload"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"uploadLoading"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Model</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>js</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         syncUploadPop: <span class="literal">false</span>,      <span class="comment">// 弹出款默认不显示</span></span><br><span class="line">         uploadLoading: <span class="literal">true</span>        <span class="comment">// 上传中</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> accountUnload() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.uploadLoading = <span class="literal">true</span>   <span class="comment">// 确定点击显示 加载中、、、</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> request.post(InterObj.accountUnloadTo, params)</span><br><span class="line">        <span class="keyword">this</span>.uploadLoading = <span class="literal">false</span>  <span class="comment">// 请求成功取消 加载中、、、</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------解决问题的核心代码------</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.uploadLoading = <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// -------解决问题的核心代码------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res.result === <span class="string">'success'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.success(res.msg)</span><br><span class="line">            <span class="keyword">this</span>.syncUploadPop = <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.error(res.msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>总结：</strong> <code>:loading</code>设置成false取消 加载中状态后，需要在线程最后依然将 他设置为<code>true</code></p>]]></content>
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview组件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue中的计算属性 computed</title>
      <link href="/2017/11/07/frame/vue/vue-study-computed/"/>
      <url>/2017/11/07/frame/vue/vue-study-computed/</url>
      <content type="html"><![CDATA[<h2 id="vue中使用计算属性-computed"><a href="#vue中使用计算属性-computed" class="headerlink" title="vue中使用计算属性 computed"></a>vue中使用计算属性 computed</h2><blockquote><p>html Vue:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_number&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_numObj&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_numObj2&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>javaScript:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        number: <span class="number">1</span>,</span><br><span class="line">        numObj: &#123;&#125;,</span><br><span class="line">        numObj2: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    cpu_number: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number ++</span><br><span class="line">    &#125;,</span><br><span class="line">    cpu_numObj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numObj.type = <span class="string">'直接改变对象属性'</span>    <span class="comment">// 计算属性不会检测到</span></span><br><span class="line">        <span class="keyword">return</span> numObj.type</span><br><span class="line">    &#125;</span><br><span class="line">    cpu_numObj2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numObj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">type</span>: <span class="string">'改变了对象索引'</span>&#125;)    <span class="comment">// 计算属性会检测到</span></span><br><span class="line">        <span class="keyword">return</span> numObj2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>： vue 计算属性computed可以检测到 <code>变量</code>  <code>数组</code>  <code>对象的</code>变化； 但是 对象的属性变化是不会被检测到的</p>]]></content>
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>每个JavaScript程序员都需要知道的5个数组方法</title>
      <link href="/2017/11/07/js/array/array-method-01/"/>
      <url>/2017/11/07/js/array/array-method-01/</url>
      <content type="html"><![CDATA[<h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h3><blockquote><p>.forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。<br> .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = [<span class="string">'9'</span>, <span class="string">'13'</span>, <span class="string">'10'</span>];</span><br><span class="line">score.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index)</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="comment">//  9  0</span></span><br><span class="line">    <span class="comment">// 13  1</span></span><br><span class="line">    <span class="comment">// 10  2</span></span><br></pre></td></tr></table></figure><h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h3><blockquote><p>  .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。<br>如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doubleNums = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'doubleNums: '</span>, doubleNums)</span><br></pre></td></tr></table></figure><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h3><blockquote><p>.filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topScores = scores.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'topScores: '</span>, topScores);</span><br></pre></td></tr></table></figure><h3 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a>Array.indexOf()</h3><blockquote><p>indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> i = a.indexOf(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i: '</span>, i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (a.indexOf(7) === -1) &#123;</span></span><br><span class="line"><span class="comment">  // 数组中没有这个元素</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h3><blockquote><p>.every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。<br>如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">23</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> olderThan18 = ages.every(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">18</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'olderThan18: '</span>, olderThan18);</span><br></pre></td></tr></table></figure><p>Tips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript之call的用法</title>
      <link href="/2017/11/07/js/array/js-call/"/>
      <url>/2017/11/07/js/array/js-call/</url>
      <content type="html"><![CDATA[<h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p><strong>一说到call</strong>，</p><p>————总是<strong><code>call</code></strong>、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；</p><p><strong>通俗点：</strong></p><blockquote><p><strong><code>call</code></strong>的作用就是： <strong>改变函数执行时的上下文</strong> 也就是<code>this</code>的指向;</p></blockquote><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><pre><code>Food.call(thisArg, arg1, arg2, ...)</code></pre><h3 id="来看个例子-—-A"><a href="#来看个例子-—-A" class="headerlink" title="来看个例子 — A"></a>来看个例子 — A</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'fun-name'</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="string">'fun-age'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> wrap = &#123;</span><br><span class="line"> age: <span class="string">'default'</span>,</span><br><span class="line"> name: <span class="string">'default'</span>,</span><br><span class="line"> myfun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> fun()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrap.myfun();</span><br><span class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'default-age'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'fun-age'</span></span><br></pre></td></tr></table></figure><p>直接运行这个函数 <strong><code>wrap.myfun();</code></strong></p><blockquote></blockquote><p>执行这个函数后<br>1、在<code>wrap</code>下面执行<code>myfun()</code>后，其中的<code>this</code>指向<code>window</code>全局的<br>2、在<code>window</code>全局下面创建了一个 <code>age</code>属性，值为 <code>&#39;fun-age&#39;</code><br>3、<code>wrap</code>中的<code>age</code>还是<code>default</code></p><h3 id="来看个例子-—-B"><a href="#来看个例子-—-B" class="headerlink" title="来看个例子 — B"></a>来看个例子 — B</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'fun-name'</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="string">'fun-age'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> wrap = &#123;</span><br><span class="line"> age: <span class="string">'default'</span>,</span><br><span class="line"> name: <span class="string">'default'</span>,</span><br><span class="line"> obj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> fun.call(<span class="keyword">this</span>)      <span class="comment">// **---注意这里打 call 了---**</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrap.myfun();</span><br><span class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'fun-age'        --发生了变化---</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'age is not defined'   --发生了变化---</span></span><br></pre></td></tr></table></figure><p>例子B运行时：</p><blockquote><p><code>wrap.obj()</code>执行后，在执行<code>fun</code>时，把<code>this</code>， call进去了, 这个<code>this</code>是指向<code>wrap</code>，所以<code>fun</code>执行时其中的<code>this</code>指向的是<code>wrap</code>，自然改变的就是<code>wrap</code>中的<code>age</code>，这就是<code>call</code>的作用改变了<code>fun</code>执行时的上下文；</p></blockquote><p>好累，反正我是大概懂了他（this）刚才干了什么；</p><hr><p>那么在我们的coding中，一般什么时候用到call了？</p><h2 id="call的用法"><a href="#call的用法" class="headerlink" title="call的用法"></a>call的用法</h2><h3 id="利用call来-做继承"><a href="#利用call来-做继承" class="headerlink" title="利用call来 做继承"></a>利用call来 做继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'longlee'</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> student = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> st = <span class="keyword">new</span> student ();</span><br><span class="line"></span><br><span class="line">g1.fun()  <span class="comment">// 输出： longlee</span></span><br></pre></td></tr></table></figure><p>如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；</p><h3 id="判断数据的类型"><a href="#判断数据的类型" class="headerlink" title="判断数据的类型"></a>判断数据的类型</h3><blockquote><p>【object、 array、 null】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'longlee'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = [<span class="string">'longlee'</span>]</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj1)    <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj2)    <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj3)    <span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>)      <span class="comment">// "[object Number]"</span></span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="类（伪）数组使用数组方法"><a href="#类（伪）数组使用数组方法" class="headerlink" title="类（伪）数组使用数组方法"></a>类（伪）数组使用数组方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="built_in">arguments</span>是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,</span><br><span class="line"></span><br><span class="line">但是我们能通过 <span class="built_in">Array</span>.prototype.slice.call 转换为真正的数组</span><br><span class="line">这样 <span class="built_in">arguments</span> 就可以应用 <span class="built_in">Array</span> 下的所有方法了。</span><br></pre></td></tr></table></figure><h3 id="获取数组中的最大值和最小值"><a href="#获取数组中的最大值和最小值" class="headerlink" title="获取数组中的最大值和最小值"></a>获取数组中的最大值和最小值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">55</span>, <span class="number">888</span> , <span class="number">521</span> , <span class="number">-36</span>); <span class="comment">// 888</span></span><br><span class="line">number 本身没有 max 方法，但是 <span class="built_in">Math</span> 有，我们就可以借助 call 使用其方法。</span><br></pre></td></tr></table></figure><p>就说到这了，再说下去，我自己也快消化不良了、、、、</p><hr><p>题外话：<br>说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法<br><code>Math.max(...[2,1,3])</code>  // 3<br><code>Math.min(...[2,1,3])</code>  // 1</p><p>个人见解，有误之处，大神请指出，以免改正！<br>弄懂 call 了。可以继续打 call 了</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js知识点总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我忘记了自己，却没忘记你！</title>
      <link href="/2017/11/01/others/live-tulei-01/"/>
      <url>/2017/11/01/others/live-tulei-01/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是<code>“您”</code>，一处是信的结尾，<code>“一切尚好，不要挂念，好好保重身体。”</code>经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得<code>潸然泪下</code>，可是泪水过后，又会有多少<code>实质性的改变</code>？</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，<code>这一切的一切</code>，不为别的，<code>只是因为爱情</code> ！</strong></p><p>本文转载自： <a href="http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg" target="_blank" rel="noopener">涂磊公众号</a></p><!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 命令集合</title>
      <link href="/2017/10/31/others/hexo-command/"/>
      <url>/2017/10/31/others/hexo-command/</url>
      <content type="html"><![CDATA[<p><contents><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</contents></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布-Deploy-to-remote-sites"><a href="#发布-Deploy-to-remote-sites" class="headerlink" title="[发布]Deploy to remote sites"></a>[发布]Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="noopener">http://blog.csdn.net/qq_23435721/article/details/50997275</a></p><h3 id="添加搜索的方法"><a href="#添加搜索的方法" class="headerlink" title="添加搜索的方法"></a>添加搜索的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>More info: <a href="http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html" target="_blank" rel="noopener">站内搜索</a><br>More info: <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">github地址</a></p><h3 id="seo优化"><a href="#seo优化" class="headerlink" title="seo优化"></a>seo优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>More info: <a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="noopener">优化教程</a><br>More info: <a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">优化教程</a><br>More info: <a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="noopener">优化教程</a></p><h3 id="首页显示tag的两种方法"><a href="#首页显示tag的两种方法" class="headerlink" title="首页显示tag的两种方法"></a>首页显示tag的两种方法</h3><ol><li><p>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2000-12-03 00:00:00</span><br><span class="line">---</span><br><span class="line">&lt;Excerpt in index | 首页摘要&gt; </span><br><span class="line">+&lt;!-- more --&gt;</span><br><span class="line">&lt;The rest of contents | 余下全文&gt;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2000-12-03 00:00:00</span><br><span class="line">+description: &quot;Welcome to Hexo! This is your very first post.&quot;</span><br><span class="line">---</span><br><span class="line">&lt;Contents&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>test</title>
      <link href="/2017/10/31/others/hexo/"/>
      <url>/2017/10/31/others/hexo/</url>
      <content type="html"><![CDATA[<contents></contents>]]></content>
      
      
    </entry>
    
    <entry>
      <title>first- on - githubpage</title>
      <link href="/2015/12/03/others/first-on-hexo/"/>
      <url>/2015/12/03/others/first-on-hexo/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><blockquote><p>第一次搭建博客</p></blockquote><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="正文开始、、、"><a href="#正文开始、、、" class="headerlink" title="正文开始、、、"></a>正文开始、、、</h2></the>]]></content>
      
      
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
            <tag> tag3 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
