<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[我和秋天有个约会]]></title>
      <url>/2017/11/10/live-Summer-Remix/</url>
      <content type="html"><![CDATA[<p><img src="/images/autumn_20171110151408.jpg" alt="图片"><br><a id="more"></a></p>
<h2 id="10月20日-传化智联，化工，联谊活动"><a href="#10月20日-传化智联，化工，联谊活动" class="headerlink" title="10月20日 传化智联，化工，联谊活动"></a>10月20日 传化智联，化工，联谊活动</h2><iframe height="498" width="510" src="http://player.youku.com/embed/XMzEwNDQyMzEzMg==" frameborder="0" 'allowfullscreen'=""></iframe>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue组件的使用]]></title>
      <url>/2017/11/09/vue-study-03/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>description: </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iview组件级联选择器的校验]]></title>
      <url>/2017/11/08/vue-study-02/</url>
      <content type="html"><![CDATA[<p>使用iview的级联选择器，添加校验时的坑、、、<br><a id="more"></a></p>
<h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">Form</span> <span class="attr">:label-width</span>=<span class="string">"100"</span> <span class="attr">ref</span>=<span class="string">"formData"</span> <span class="attr">:rules</span>=<span class="string">"ruleValidate"</span> <span class="attr">:model</span>=<span class="string">"formData"</span> <span class="attr">inline</span> <span class="attr">class</span>=<span class="string">"wms-form-check oneline"</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Form-item</span> <span class="attr">label</span>=<span class="string">"收货地址："</span> <span class="attr">style</span>=<span class="string">"width:532px"</span> <span class="attr">prop</span>=<span class="string">"region"</span> `@注意<span class="attr">region</span>`&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Cascader</span> <span class="attr">:data</span>=<span class="string">"provinceCity"</span> <span class="attr">v-model</span>=<span class="string">"formData.region"</span> `@注意<span class="attr">region</span>` <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">trigger</span>=<span class="string">"hover"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cascader</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Form-item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> wmsValidate <span class="keyword">from</span> <span class="string">'wmsValidate</span></div><div class="line"><span class="string">data() &#123;</span></div><div class="line"><span class="string">    return &#123;</span></div><div class="line"><span class="string">        formData: &#123;</span></div><div class="line"><span class="string">            region: []</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">        ruleValidate: &#123;</span></div><div class="line"><span class="string">            ownerName: [&#123;required: true, message: '</span>货主名称不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></div><div class="line"><span class="string">            type: [&#123;required: true, message: '</span>单据类型不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">            contactsName: [&#123;required: true, message: '</span>联系人不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></div><div class="line"><span class="string">            contacts: [&#123;required: true, message: '</span>联系方式不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></div><div class="line"><span class="string">            </span></div><div class="line"><span class="string">            region: [ --@注意--</span></div><div class="line"><span class="string">                &#123;</span></div><div class="line"><span class="string">                    validator: wmsValidate.proviinceValidate,</span></div><div class="line"><span class="string">                    required: true,</span></div><div class="line"><span class="string">                    trigger: '</span>change<span class="string">',</span></div><div class="line"><span class="string">                    fullField: '</span>address<span class="string">'</span></div><div class="line"><span class="string">                &#125;],</span></div><div class="line"><span class="string">            address: [&#123;required: true, message: '</span>详细地址不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></div><div class="line"><span class="string">            shippingMethod: [&#123;required: true, message: '</span>送货方式不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;]</span></div><div class="line"><span class="string">                </span></div><div class="line"><span class="string">            &#125;,  </span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<h4 id="检验地址控件的方法"><a href="#检验地址控件的方法" class="headerlink" title="检验地址控件的方法"></a>检验地址控件的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 校验地址控件选择 必填, 不能双向绑定 改变数据</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wmsValidate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> proviinceValidate(rule, value, callback) &#123;</div><div class="line">        <span class="keyword">if</span> (_.isArray(value) &amp;&amp; value.length === <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">return</span> callback()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'地址不能为空'</span>))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><strong>总结：</strong> <code>v-model</code>绑定的名字，<code>prop</code>的名字，和<code>validate</code>中的名字必须一致，<code>validate</code>中才能接收到值</p>
]]></content>
      
        <categories>
            
            <category> vue框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iview组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[每日单词 perception [pə'sepʃ(ə)n]]]></title>
      <url>/2017/11/08/contribute-word-001/</url>
      <content type="html"><![CDATA[<p>n. 知觉；[生理] 感觉；看法；洞察力；获取</p>
<blockquote>
<p>There is no truth. There is only <code>perception</code>.<br>没有真相，只有看法。——古斯塔夫·福楼拜（作家）<br><a id="more"></a></p>
</blockquote>
<!-- ### perception [pə'sepʃ(ə)n] -->
<h3 id="n-理解；看法"><a href="#n-理解；看法" class="headerlink" title="n. 理解；看法"></a>n. 理解；看法</h3><p>英英释义：Your perception of something is the way that you think about it or the impression you have of it.——Collins</p>
<p>This article will challenge your perception of the royal family. 这篇文章会挑战你对皇室的看法。</p>
<p>She wants to know our perception of death. 她想知道我们对死亡的看法。</p>
<h3 id="n-洞察力"><a href="#n-洞察力" class="headerlink" title="n. 洞察力"></a>n. 洞察力</h3><p>英英释义：Someone who has perception realizes or notices things that are not obvious.——Collins</p>
<p>It did not require a lot of perception to realize that his girlfriend was angry. 不需要很强的洞察力都意识到他的女朋友生气了。</p>
<p>The girl showed unusual perception at an early age. 这个女孩很小的时候就展现了不同寻常的洞察力。</p>
<h3 id="n-尤指通过视觉的-感知"><a href="#n-尤指通过视觉的-感知" class="headerlink" title="n. (尤指通过视觉的) 感知"></a>n. (尤指通过视觉的) 感知</h3><p>英英释义：Perception is the recognition of things using your senses, especially the sense of sight.——Collins</p>
<p>visual perception 视觉感知</p>
<p>sensory perception 感官知觉</p>
]]></content>
      
        <categories>
            
            <category> 每日单词 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单词 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中的计算属性 computed]]></title>
      <url>/2017/11/07/vue-study-01/</url>
      <content type="html"><![CDATA[<h2 id="vue中使用计算属性-computed"><a href="#vue中使用计算属性-computed" class="headerlink" title="vue中使用计算属性 computed"></a>vue中使用计算属性 computed</h2><blockquote>
<p>html Vue:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;p&gt;&#123;&#123;cpu_number&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;p&gt;&#123;&#123;cpu_numObj&#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">        &lt;p&gt;&#123;&#123;cpu_numObj2&#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>javaScript:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        number: <span class="number">1</span>,</div><div class="line">        numObj: &#123;&#125;,</div><div class="line">        numObj2: &#123;&#125;,</div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line">computed: &#123;</div><div class="line">    cpu_number: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number ++</div><div class="line">    &#125;,</div><div class="line">    cpu_numObj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.numObj.type = <span class="string">'直接改变对象属性'</span>    <span class="comment">// 计算属性不会检测到</span></div><div class="line">        <span class="keyword">return</span> numObj.type</div><div class="line">    &#125;</div><div class="line">    cpu_numObj2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.numObj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">type</span>: <span class="string">'改变了对象索引'</span>&#125;)    <span class="comment">// 计算属性会检测到</span></div><div class="line">        <span class="keyword">return</span> numObj2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>总结</strong>： vue 计算属性computed可以检测到 <code>变量</code>  <code>数组</code>  <code>对象的</code>变化； 但是 对象的属性变化是不会被检测到的</p>
]]></content>
      
        <categories>
            
            <category> vue框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue知识点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[每个JavaScript程序员都需要知道的5个数组方法]]></title>
      <url>/2017/11/07/array-method-01/</url>
      <content type="html"><![CDATA[<h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h3><p> .forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。<br> .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animals = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'mouse'</span>];</div><div class="line"></div><div class="line">animals.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h3><p> .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。<br>如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> doubleNums = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'doubleNums: '</span>, doubleNums)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h3><p> .filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scores = [<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> topScores = scores.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (item &gt; <span class="number">10</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'topScores: '</span>, topScores);</div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a>Array.indexOf()</h3><p> indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">18</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = a.indexOf(<span class="number">9</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'i: '</span>, i);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">if (a.indexOf(7) === -1) &#123;</span></div><div class="line"><span class="comment">  // 数组中没有这个元素</span></div><div class="line"><span class="comment">&#125;*/</span></div></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h3><p> .every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。<br>如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">23</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">44</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> olderThan18 = ages.every(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> element &gt; <span class="number">18</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'olderThan18: '</span>, olderThan18);</div></pre></td></tr></table></figure></p>
<p>上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript之call的用法]]></title>
      <url>/2017/11/07/js-call/</url>
      <content type="html"><![CDATA[<h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p><strong>一说到call</strong>，</p>
<p>————总是<strong><code>call</code></strong>、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；</p>
<p><strong>通俗点：</strong></p>
<blockquote>
<p><strong><code>call</code></strong>的作用就是： <strong>改变函数执行时的上下文</strong> 也就是<code>this</code>的指向;</p>
<h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><pre><code>Food.call(thisArg, arg1, arg2, ...)
</code></pre></blockquote>
<h3 id="来看个例子-—-A"><a href="#来看个例子-—-A" class="headerlink" title="来看个例子 — A"></a>来看个例子 — A</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">'fun-name'</span></div><div class="line">	<span class="keyword">this</span>.age = <span class="string">'fun-age'</span></div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> wrap = &#123;</div><div class="line"> 	age: <span class="string">'default'</span>,</div><div class="line"> 	name: <span class="string">'default'</span>,</div><div class="line"> 	myfun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 		fun()</div><div class="line"> 	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">wrap.myfun();</div><div class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'default-age'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'fun-age'</span></div></pre></td></tr></table></figure>
<p>直接运行这个函数 <strong><code>wrap.myfun();</code></strong></p>
<blockquote>
<p>执行这个函数后<br>1、在<code>wrap</code>下面执行<code>myfun()</code>后，其中的<code>this</code>指向<code>window</code>全局的<br>2、在<code>window</code>全局下面创建了一个 <code>age</code>属性，值为 <code>&#39;fun-age&#39;</code><br>3、<code>wrap</code>中的<code>age</code>还是<code>default</code></p>
</blockquote>
<h3 id="来看个例子-—-B"><a href="#来看个例子-—-B" class="headerlink" title="来看个例子 — B"></a>来看个例子 — B</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">'fun-name'</span></div><div class="line">	<span class="keyword">this</span>.age = <span class="string">'fun-age'</span></div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> wrap = &#123;</div><div class="line"> 	age: <span class="string">'default'</span>,</div><div class="line"> 	name: <span class="string">'default'</span>,</div><div class="line"> 	obj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 		fun.call(<span class="keyword">this</span>)      <span class="comment">// **---注意这里打 call 了---**</span></div><div class="line"> 	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">wrap.myfun();</div><div class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'fun-age'        --发生了变化---</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'age is not defined'   --发生了变化---</span></div></pre></td></tr></table></figure>
<p>例子B运行时：</p>
<blockquote>
<p><code>wrap.obj()</code>执行后，在执行<code>fun</code>时，把<code>this</code>， call进去了, 这个<code>this</code>是指向<code>wrap</code>，所以<code>fun</code>执行时其中的<code>this</code>指向的是<code>wrap</code>，自然改变的就是<code>wrap</code>中的<code>age</code>，这就是<code>call</code>的作用改变了<code>fun</code>执行时的上下文；</p>
</blockquote>
<p>好累，反正我是大概懂了他（this）刚才干了什么；</p>
<hr>
<p>那么在我们的coding中，一般什么时候用到call了？</p>
<h2 id="call的用法"><a href="#call的用法" class="headerlink" title="call的用法"></a>call的用法</h2><h3 id="利用call来-做继承"><a href="#利用call来-做继承" class="headerlink" title="利用call来 做继承"></a>利用call来 做继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'longlee'</span>) &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> student = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> st = <span class="keyword">new</span> student ();</div><div class="line"></div><div class="line">g1.fun()  <span class="comment">// 输出： longlee</span></div></pre></td></tr></table></figure>
<p>如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；</p>
<h3 id="判断数据的类型"><a href="#判断数据的类型" class="headerlink" title="判断数据的类型"></a>判断数据的类型</h3><blockquote>
<p>【object、 array、 null】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'longlee'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj2 = [<span class="string">'longlee'</span>]</div><div class="line"><span class="keyword">var</span> obj3 = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(obj1)    <span class="comment">// "[object Object]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(obj2)    <span class="comment">// "[object Array]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(obj3)    <span class="comment">// "[object Null]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>)      <span class="comment">// "[object Number]"</span></div><div class="line">....</div><div class="line">....</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="类（伪）数组使用数组方法"><a href="#类（伪）数组使用数组方法" class="headerlink" title="类（伪）数组使用数组方法"></a>类（伪）数组使用数组方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"><span class="built_in">arguments</span>是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,</div><div class="line"></div><div class="line">但是我们能通过 <span class="built_in">Array</span>.prototype.slice.call 转换为真正的数组</div><div class="line">这样 <span class="built_in">arguments</span> 就可以应用 <span class="built_in">Array</span> 下的所有方法了。</div></pre></td></tr></table></figure>
<h3 id="获取数组中的最大值和最小值"><a href="#获取数组中的最大值和最小值" class="headerlink" title="获取数组中的最大值和最小值"></a>获取数组中的最大值和最小值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">55</span>, <span class="number">888</span> , <span class="number">521</span> , <span class="number">-36</span>); <span class="comment">// 888</span></div><div class="line">number 本身没有 max 方法，但是 <span class="built_in">Math</span> 有，我们就可以借助 call 使用其方法。</div></pre></td></tr></table></figure>
<p>就说到这了，再说下去，我自己也快消化不良了、、、、</p>
<hr>
<p>题外话：<br>说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法<br><code>Math.max(...[2,1,3])</code>  // 3<br><code>Math.min(...[2,1,3])</code>  // 1</p>
<p>个人见解，有误之处，大神请指出，以免改正！<br>弄懂 call 了。可以继续打 call 了</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js知识点总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我忘记了自己，却没忘记你！]]></title>
      <url>/2017/11/01/live-tulei-01/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是<code>“您”</code>，一处是信的结尾，<code>“一切尚好，不要挂念，好好保重身体。”</code>经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得<code>潸然泪下</code>，可是泪水过后，又会有多少<code>实质性的改变</code>？</p>
<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？</p>
<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，<code>这一切的一切</code>，不为别的，<code>只是因为爱情</code> ！</strong></p>
<p>本文转载自： <a href="http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg" target="_blank" rel="external">涂磊公众号</a></p>
<!-- ![图片](/images/mmexport1499932133535.jpeg) -->
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 命令集合]]></title>
      <url>/2017/10/31/hexo-command/</url>
      <content type="html"><![CDATA[<p><contents><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</contents></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="发布-Deploy-to-remote-sites"><a href="#发布-Deploy-to-remote-sites" class="headerlink" title="[发布]Deploy to remote sites"></a>[发布]Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p><a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="external">http://blog.csdn.net/qq_23435721/article/details/50997275</a></p>
<h3 id="添加搜索的方法"><a href="#添加搜索的方法" class="headerlink" title="添加搜索的方法"></a>添加搜索的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<p>More info: <a href="http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html" target="_blank" rel="external">站内搜索</a><br>More info: <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">github地址</a></p>
<h3 id="seo优化"><a href="#seo优化" class="headerlink" title="seo优化"></a>seo优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>More info: <a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="external">优化教程</a><br>More info: <a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="external">优化教程</a><br>More info: <a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="external">优化教程</a></p>
<h3 id="首页显示tag的两种方法"><a href="#首页显示tag的两种方法" class="headerlink" title="首页显示tag的两种方法"></a>首页显示tag的两种方法</h3><ol>
<li><p>方法一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line">date: 2000-12-03 00:00:00</div><div class="line">---</div><div class="line">&lt;Excerpt in index | 首页摘要&gt; </div><div class="line">+&lt;!-- more --&gt;</div><div class="line">&lt;The rest of contents | 余下全文&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>方法二</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line">date: 2000-12-03 00:00:00</div><div class="line">+description: &quot;Welcome to Hexo! This is your very first post.&quot;</div><div class="line">---</div><div class="line">&lt;Contents&gt;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2017/10/31/hexo/</url>
      <content type="html"><![CDATA[<contents>

</contents>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[first- on - githubpage]]></title>
      <url>/2015/12/03/first-on-hexo/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<blockquote>
<p>第一次搭建博客</p>
</blockquote>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="正文开始、、、"><a href="#正文开始、、、" class="headerlink" title="正文开始、、、"></a>正文开始、、、</h2></the>]]></content>
      
        
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
            <tag> tag3 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
