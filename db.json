{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/GitHub.jpg","path":"img/GitHub.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar1.png","path":"img/avatar1.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar2.png","path":"img/avatar2.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"source/public_s/images/autumn_20171110151408.jpg","path":"public_s/images/autumn_20171110151408.jpg","modified":1,"renderable":0},{"_id":"source/public_s/images/menu.saveimg.savepath20180920175019.jpg","path":"public_s/images/menu.saveimg.savepath20180920175019.jpg","modified":1,"renderable":0},{"_id":"source/public_s/images/regexper.png","path":"public_s/images/regexper.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"source/public_s/images/mmexport1499932133535.jpeg","path":"public_s/images/mmexport1499932133535.jpeg","modified":1,"renderable":0},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/old/avatar-1.png","path":"img/old/avatar-1.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/old/avatar.png","path":"img/old/avatar.png","modified":1,"renderable":1},{"_id":"source/public_s/images/timeManage/0.1174553194175334.png","path":"public_s/images/timeManage/0.1174553194175334.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.419097318675272.png","path":"public_s/images/timeManage/0.419097318675272.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.46321933528434545.png","path":"public_s/images/timeManage/0.46321933528434545.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.5021243947689109.png","path":"public_s/images/timeManage/0.5021243947689109.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.7242512129749097.png","path":"public_s/images/timeManage/0.7242512129749097.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.530341774969219.png","path":"public_s/images/timeManage/0.530341774969219.png","modified":1,"renderable":0},{"_id":"source/public_s/images/timeManage/0.9251521097293676.png","path":"public_s/images/timeManage/0.9251521097293676.png","modified":1,"renderable":0},{"_id":"themes/yelee/source/img/old/avatar2.png","path":"img/old/avatar2.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/like.css","path":"static/api/css/like.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share.js","path":"static/api/js/share.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":1,"renderable":1},{"_id":"source/public_s/mp3/a-love.mp3","path":"public_s/mp3/a-love.mp3","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1536068999321},{"_id":"themes/yelee/_config.yml","hash":"a1c2f3c5578857d723f8ab79ff47d79ee08a0894","modified":1537870573354},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1536068999333},{"_id":"source/CNAME","hash":"61e863e968917ce18fc58c0e40bb8217f360f0ed","modified":1536068999251},{"_id":"source/robots.txt","hash":"85d977cb906879af47f146e03ba9cdc8d697fcb9","modified":1536068999320},{"_id":"themes/yelee/languages/default.yml","hash":"b4e576a96e4f2b4f9b39a86d2042fa44c2d21a28","modified":1536068999321},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1536068999322},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1536068999322},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1536068999322},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1536068999323},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1536068999331},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1536068999332},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1536068999332},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1536068999332},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536068999332},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536068999333},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1536068999333},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1536068999334},{"_id":"themes/yelee/source/favicon.ico","hash":"bc6985bf377d2fdc64ada5af4c919288599594b4","modified":1536068999351},{"_id":"source/404/index.md","hash":"46b366c46ea83d98727dec6569443525178e3e99","modified":1536068999250},{"_id":"source/about/index.md","hash":"77a82893d8620caa6d1bc58db3510bded5befa8c","modified":1544706878163},{"_id":"source/tags/index.md","hash":"c3bfab948577781a3c27ad976f6b33e6a84e4b9f","modified":1536068999320},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1536068999324},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1536068999323},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1536068999324},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1536068999325},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1536068999325},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1536068999327},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1536068999327},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"3833ebd6d6fa3bf0cb43917efbd891b089dd0004","modified":1536068999327},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1536068999328},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1536068999328},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1536068999328},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1536068999328},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1536068999328},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1536068999329},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1536068999329},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1536068999331},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1536068999329},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1536068999331},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1536068999331},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1536068999331},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1536068999336},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1536068999337},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1536068999337},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1536068999337},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1536068999340},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1536068999349},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1536068999351},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1536068999362},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1536068999362},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1536068999362},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1536068999363},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1543480186608},{"_id":"themes/yelee/source/js/search.js","hash":"c18355f9e3bd81fd84663b75de6dfb26805a7788","modified":1543481374399},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1536068999364},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1536068999352},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1536068999352},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1536068999352},{"_id":"themes/yelee/source/img/GitHub.jpg","hash":"22f5f53698aaebfb41a3a7a2305ebff2f5c951e8","modified":1536068999352},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1536068999353},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1536068999353},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1536068999355},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1536068999355},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1536068999355},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1536068999355},{"_id":"themes/yelee/source/img/avatar.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1536068999356},{"_id":"themes/yelee/source/img/avatar1.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1536068999356},{"_id":"themes/yelee/source/img/avatar2.png","hash":"54d74ed6b3dc8bc2ac202726c4e731d35fb5826b","modified":1536068999356},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1536068999357},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1536068999357},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1536068999359},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1536068999360},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1536068999360},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1536068999360},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1536068999360},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1536068999361},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1536068999361},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1536068999361},{"_id":"source/_posts/others/bat001.md","hash":"5c9305771de913d67b9347f6c5610dd70c88340f","modified":1536286718438},{"_id":"source/_posts/others/hexo-command.md","hash":"7b7fd92542bf0cd8f463673c8b37a73de9ddcdb3","modified":1536068999257},{"_id":"source/_posts/others/hexo.md","hash":"a4d12b7789bea3a8bd482e5ff8dcef11592e3cc3","modified":1536068999258},{"_id":"source/_posts/others/live-tulei-01.md","hash":"04ea070a79eade5f11737835b9d22bd2223b7b52","modified":1536068999258},{"_id":"source/_posts/others/move-review-liechang.md","hash":"16bf0c0a2ab9be097ae5882c8abcec2060fcf1e8","modified":1536068999259},{"_id":"source/_posts/others/seo.md","hash":"e9a473445e17ec0f039e5e293f01a39c6eb21f3e","modified":1536068999259},{"_id":"source/_posts/others/time-manage.md","hash":"469702b88bad44cd811cd568b688f66b71e7c730","modified":1536068999259},{"_id":"source/_posts/study/fontknownageMap.md","hash":"41124d9c79f57a871fc7d16fa204dbe7c903afb0","modified":1542184522117},{"_id":"source/_posts/study/september.md","hash":"d723b8d5acdeb4826d5d6c1d5e3bbaa988984588","modified":1542183565243},{"_id":"source/_posts/study/study2014-05.md","hash":"3c8259b50fe778d543d38c7ba1fd67a1fc0fc1a6","modified":1542182699347},{"_id":"source/_posts/study/study2014-07.md","hash":"cef669da29bfcf6defc8562b961ad9996cb3fdc4","modified":1536068999260},{"_id":"source/_posts/study/study2018-03.md","hash":"31765a9c0c726d4d573cb0c91cafd08898431376","modified":1536068999261},{"_id":"source/_posts/study/study2018-04.md","hash":"2bb22ad8fb29741abfca97d20966c22a5c77a675","modified":1542183980209},{"_id":"source/_posts/study/study2018-05.md","hash":"0dee5bf826b0bfce76d64ce20e36d607cb14c908","modified":1542186320425},{"_id":"source/public_s/images/autumn_20171110151408.jpg","hash":"d06db971de65cd859292a23748dade80dc068332","modified":1536068999262},{"_id":"source/public_s/images/menu.saveimg.savepath20180920175019.jpg","hash":"faafc9367feefed8f40c024bf7d841942bcad4a7","modified":1537437021623},{"_id":"source/public_s/images/regexper.png","hash":"5dc6f17b0fd3300ed6b38617ae1c8aed2eade380","modified":1536068999263},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1536068999339},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1536068999339},{"_id":"source/public_s/images/mmexport1499932133535.jpeg","hash":"60f62ddc1f0c7ee3fcb29248a15235e9a72878ac","modified":1536068999262},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1536068999326},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1536068999326},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1536068999326},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1536068999327},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1536068999326},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1536068999329},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1536068999330},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1536068999330},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"c39893c25f4f8d7df66eff94668704e8f5817d4d","modified":1536068999330},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1536068999330},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1536068999330},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1536068999334},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1536068999335},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1536068999335},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1536068999336},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1536068999340},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1536068999341},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1536068999344},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1536068999345},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1536068999345},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1536068999345},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"78c4c1d7c3df2d009d4f8b80450c263a0a9d22de","modified":1536068999346},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1536068999346},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1536068999346},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1536068999346},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1536068999346},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1536068999347},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1536068999347},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1536068999347},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1536068999347},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1536068999348},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1536068999348},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1536068999348},{"_id":"themes/yelee/source/img/old/avatar-1.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1536068999358},{"_id":"themes/yelee/source/img/old/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1536068999358},{"_id":"source/_posts/frame/vue/vue-ivu-001.md","hash":"6ac634e08e279dee311a51059c1c1fe1a3dce662","modified":1545203304834},{"_id":"source/_posts/frame/vue/vue-study-03.md","hash":"49547d570cd6362a5125b5f1a7cd9d67d989e293","modified":1536068999251},{"_id":"source/_posts/frame/vue/vue-study-computed.md","hash":"c1ce17a6f4955849afe3a2bd7d6b2afcd99bfe27","modified":1536068999252},{"_id":"source/_posts/frame/vue/vue-study-iview.md","hash":"32ff4b208a3fd9d3510af115b0834c461900a632","modified":1536068999252},{"_id":"source/_posts/js/array/array-method-01.md","hash":"941373ecf68e622b7c9fb220bee584b3f9f95523","modified":1536068999253},{"_id":"source/_posts/js/array/js-call.md","hash":"51020f0b4d49f9d5b53cc506b41ee6c2cbd794d6","modified":1536068999253},{"_id":"source/_posts/js/common/fiddle001.md","hash":"9d7e003c0dc6dddcc043d4661e97f35ae50681bb","modified":1536068999254},{"_id":"source/_posts/js/common/parseUrlParams.md","hash":"2c77a4df69345579b1493fdaa521d76a56db9019","modified":1543480776696},{"_id":"source/_posts/js/common/regexp.md","hash":"b38b237e15dcc77d8b33bd65de845ee5f8da130d","modified":1536068999254},{"_id":"source/_posts/js/common/remberUrl.md","hash":"5979373dd0695728b9510bf297d88f47852dbeb1","modified":1545209359149},{"_id":"source/_posts/js/common/vuestudy01.md","hash":"8097c1ed9d276cd50569b6dba12e26cb00b7a623","modified":1536068999255},{"_id":"source/_posts/js/common/webstorage.md","hash":"555aa07b242a709009ed21df30498fe4e11c8fd7","modified":1537868911240},{"_id":"source/_posts/js/node/nodestudy-01.md","hash":"77b17ae5dd6af737046992ccb89cd54f2eac6e41","modified":1536068999256},{"_id":"source/_posts/js/react/react-constructor-super.md","hash":"3bd0967823d04c8c83f57df8e2180dab3d0ef346","modified":1536068999257},{"_id":"source/_posts/js/we_chat/wechat-001.md","hash":"9f8f2379bb5c1912be767bcb91ba0549d126955e","modified":1544706499789},{"_id":"source/_posts/js/we_chat/wechat-002.md","hash":"c6ab5f5745668d2b5c511eb2124aefdddcb33ce4","modified":1545209383353},{"_id":"source/_posts/js/we_chat/wechat-003.md","hash":"d9aa341ad8589bc12d4145646a10ec0f0ad1a704","modified":1545209377888},{"_id":"source/public_s/images/timeManage/0.1174553194175334.png","hash":"7a226e23dd8e1deb40862d45375ba8a26ca964c5","modified":1536068999264},{"_id":"source/public_s/images/timeManage/0.419097318675272.png","hash":"b1b35cc5d94278b2ebf80c2a870210fd1bf90e49","modified":1536068999264},{"_id":"source/public_s/images/timeManage/0.46321933528434545.png","hash":"ba70b029ef647009e29dde7003666d02391f7969","modified":1536068999265},{"_id":"source/public_s/images/timeManage/0.5021243947689109.png","hash":"8de789ab52892f44d609ae544272e8acfa02ec2a","modified":1536068999265},{"_id":"source/public_s/images/timeManage/0.7242512129749097.png","hash":"bc6bf8f1f8f33ba7dd64aa9e580675b09121ee0c","modified":1536068999266},{"_id":"source/public_s/images/timeManage/0.530341774969219.png","hash":"79a0ae47a04e4fd13db78d632efd4dc228362c16","modified":1536068999266},{"_id":"source/public_s/images/timeManage/0.9251521097293676.png","hash":"9ebd2722a28a68940be700d8081fa94c1527eb87","modified":1536068999267},{"_id":"themes/yelee/source/img/old/avatar2.png","hash":"ef8a4924b45e172c06c6db7d9ddce367635a5a37","modified":1536068999359},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1536068999341},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1536068999341},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1536068999342},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"6e9389782d3f9e419ebeb5afcaba61b95ad22b6d","modified":1536068999343},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1536068999343},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1536068999343},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"76c4ae65dcc9440010eaacdc16f9bee3181318ed","modified":1536068999344},{"_id":"themes/yelee/source/static/api/css/imgshare.css","hash":"7465b359751d368f4a45f7823dc4a1918bba7f5f","modified":1536068999365},{"_id":"themes/yelee/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1536068999365},{"_id":"themes/yelee/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1536068999366},{"_id":"themes/yelee/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1536068999366},{"_id":"themes/yelee/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1536068999367},{"_id":"themes/yelee/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1536068999367},{"_id":"themes/yelee/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1536068999367},{"_id":"themes/yelee/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1536068999368},{"_id":"themes/yelee/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1536068999368},{"_id":"themes/yelee/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1536068999368},{"_id":"themes/yelee/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1536068999369},{"_id":"themes/yelee/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1536068999369},{"_id":"themes/yelee/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1536068999369},{"_id":"themes/yelee/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1536068999369},{"_id":"themes/yelee/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1536068999370},{"_id":"themes/yelee/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1536068999370},{"_id":"themes/yelee/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1536068999370},{"_id":"themes/yelee/source/static/api/js/share.js","hash":"73bdb33580128e6c79a726a25f98092c0faa369d","modified":1536068999386},{"_id":"themes/yelee/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536068999389},{"_id":"themes/yelee/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536068999389},{"_id":"themes/yelee/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1536068999371},{"_id":"themes/yelee/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1536068999371},{"_id":"themes/yelee/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1536068999372},{"_id":"themes/yelee/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1536068999373},{"_id":"themes/yelee/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1536068999373},{"_id":"themes/yelee/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1536068999374},{"_id":"themes/yelee/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1536068999374},{"_id":"themes/yelee/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1536068999374},{"_id":"themes/yelee/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1536068999375},{"_id":"themes/yelee/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1536068999375},{"_id":"themes/yelee/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1536068999375},{"_id":"themes/yelee/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1536068999375},{"_id":"themes/yelee/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1536068999376},{"_id":"themes/yelee/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1536068999376},{"_id":"themes/yelee/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1536068999376},{"_id":"themes/yelee/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1536068999376},{"_id":"themes/yelee/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1536068999377},{"_id":"themes/yelee/source/static/api/img/share/l8.gif","hash":"ec7dbc7703961356e05528d2844b983f225445e4","modified":1536068999377},{"_id":"themes/yelee/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1536068999377},{"_id":"themes/yelee/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1536068999377},{"_id":"themes/yelee/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1536068999378},{"_id":"themes/yelee/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1536068999378},{"_id":"themes/yelee/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1536068999378},{"_id":"themes/yelee/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1536068999378},{"_id":"themes/yelee/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1536068999379},{"_id":"themes/yelee/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1536068999379},{"_id":"themes/yelee/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1536068999379},{"_id":"themes/yelee/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1536068999379},{"_id":"themes/yelee/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1536068999380},{"_id":"themes/yelee/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1536068999379},{"_id":"themes/yelee/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1536068999381},{"_id":"themes/yelee/source/static/api/js/base/class.js","hash":"db02960fb51f69a0d50dc9ed626a998be3884706","modified":1536068999381},{"_id":"themes/yelee/source/static/api/js/component/animate.js","hash":"17a3495543db66e4eb56a81a93edf3e41ca8cc31","modified":1536068999382},{"_id":"themes/yelee/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1536068999383},{"_id":"themes/yelee/source/static/api/js/component/comm_tools.js","hash":"28d096a61f54e64bdbc32d172ae20e7f6e9656a7","modified":1536068999383},{"_id":"themes/yelee/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1536068999384},{"_id":"themes/yelee/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1536068999384},{"_id":"themes/yelee/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1536068999384},{"_id":"themes/yelee/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1536068999384},{"_id":"themes/yelee/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1536068999385},{"_id":"themes/yelee/source/static/api/js/component/pop_popup_slide.js","hash":"45a72013fba95249ca965fd4d98f3bbde7a7098a","modified":1536068999385},{"_id":"themes/yelee/source/static/api/js/conf/const.js","hash":"7da7df37d0f3d3e1977a8d107c98a3c1ecdb39c2","modified":1536068999385},{"_id":"themes/yelee/source/static/api/js/conf/define.js","hash":"ee0afad836be1553980501855752ccd79fe1fe0e","modified":1536068999386},{"_id":"themes/yelee/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1536068999386},{"_id":"themes/yelee/source/static/api/js/share/combine_api.js","hash":"7ad3c5396bf20704e87f98ebe118034ed3cc7b22","modified":1536068999387},{"_id":"themes/yelee/source/static/api/js/share/like_api.js","hash":"4034b10f8f34367c6db47ae092e5b4107c2fb8b4","modified":1536068999387},{"_id":"themes/yelee/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1536068999387},{"_id":"themes/yelee/source/static/api/js/share/likeshare.js","hash":"2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312","modified":1536068999388},{"_id":"themes/yelee/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1536068999388},{"_id":"themes/yelee/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1536068999388},{"_id":"themes/yelee/source/static/api/js/start/router.js","hash":"27bc546a9c796b15e59442aaf09ae645a2ed4c74","modified":1536068999389},{"_id":"themes/yelee/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1536068999388},{"_id":"themes/yelee/source/static/api/js/trans/trans.js","hash":"cb82afecdbede8d5a00b6c5ea9595187b6408376","modified":1536068999390},{"_id":"themes/yelee/source/static/api/js/trans/trans_bdxc.js","hash":"a512ebfca0319ab38d06b7b0fb74bcdc942dc46e","modified":1536068999390},{"_id":"themes/yelee/source/static/api/js/trans/trans_bdysc.js","hash":"28bb985a03b6b1da5a89a143331932a12126c9c3","modified":1536068999390},{"_id":"themes/yelee/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1536068999391},{"_id":"themes/yelee/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1536068999391},{"_id":"themes/yelee/source/static/api/js/view/like_view.js","hash":"c1b6a3f3f89ac734c6da284c1ba1dde2ada4e250","modified":1536068999391},{"_id":"themes/yelee/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1536068999392},{"_id":"themes/yelee/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1536068999392},{"_id":"themes/yelee/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1536068999392},{"_id":"themes/yelee/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1536068999392},{"_id":"themes/yelee/source/static/api/js/base/tangram.js","hash":"f3ecbed4c05dba6a28df137e9a4e66c9ccfbd220","modified":1536068999382},{"_id":"source/public_s/mp3/a-love.mp3","hash":"d18094f4569eae835898a3d93d5b859e12ebcffd","modified":1536068999319},{"_id":"public/baidusitemap.xml","hash":"fd1efaf0ba0b58f7101389d0ec9c9bc727b7bf59","modified":1545209948443},{"_id":"public/search.xml","hash":"fa2a26449d5e67e97a696dcb29b8ee8942369a71","modified":1545209948742},{"_id":"public/sitemap.xml","hash":"02a83efe4f709b27cbd0c5da77e5e71d14661547","modified":1545209948756},{"_id":"public/404.html","hash":"1c9c83948945802f2b02221981db9f92acef6ff3","modified":1545209948766},{"_id":"public/about/index.html","hash":"bbad32a3574afb170dd9796c6f1fa976dbbd0a22","modified":1545209948766},{"_id":"public/archives/page/4/index.html","hash":"10f854e0ae15e76dda09d5c20a961bfedf2cb872","modified":1545209948766},{"_id":"public/archives/2017/10/index.html","hash":"bff62eacbe6222ddac093399896c343a8ab730e3","modified":1545209948766},{"_id":"public/archives/2018/page/3/index.html","hash":"1ede993ae9c5032babc8730c66e39d16f07e22d5","modified":1545209948766},{"_id":"public/archives/2018/02/index.html","hash":"3d95bbcf494cd8088685d44433d7a874f36976bb","modified":1545209948766},{"_id":"public/archives/2018/03/index.html","hash":"4421ae4a7d56ffb6a7b545d7014df04303addd1d","modified":1545209948766},{"_id":"public/archives/2018/04/index.html","hash":"27d5066ffb330da60c5460ae270a57f176927c85","modified":1545209948766},{"_id":"public/archives/2018/05/index.html","hash":"c9deaadbcd0251d55eda92af5a93377ceae59ce9","modified":1545209948766},{"_id":"public/archives/2018/07/index.html","hash":"c34d1a46ad771f2b8715e58a57cc74ce0c7ae817","modified":1545209948766},{"_id":"public/archives/2018/11/index.html","hash":"85d549960cc44697120ec85d3ebb09c55b2332d5","modified":1545209948766},{"_id":"public/archives/2018/12/index.html","hash":"840b76cd0c16d7023364281cb35e10e5344cee82","modified":1545209948766},{"_id":"public/categories/生活/index.html","hash":"363cf1161733cc34d3b97be360e7ebc072c33665","modified":1545209948766},{"_id":"public/categories/影视/index.html","hash":"28f6f441c175596e0261f561b679a058b99bb50e","modified":1545209948766},{"_id":"public/categories/前端分类总结/index.html","hash":"3d62a79b7612c2ac40e42771c6da78490b2c606a","modified":1545209948766},{"_id":"public/categories/vue框架/index.html","hash":"fea575d5c3d8cc4d0b87a2e76d6b1b135574919e","modified":1545209948766},{"_id":"public/categories/学习/网站/index.html","hash":"0455e53ff87e126df91f0508d84d7c54946a6485","modified":1545209948766},{"_id":"public/page/4/index.html","hash":"ca5a6d6c6d1c869c3ee191d5f637b2cfeea0cc16","modified":1545209948767},{"_id":"public/tags/批处理命令/index.html","hash":"ca251820d4f14630a963f2b907adf7e936e38a96","modified":1545209948767},{"_id":"public/tags/情感/index.html","hash":"becef3ee51561652ef7375741d6040125231dba7","modified":1545209948767},{"_id":"public/tags/电视剧/index.html","hash":"2e036bedc505cdab7becd8fbf299f0b9a9e30332","modified":1545209948767},{"_id":"public/tags/经典台词/index.html","hash":"fa63b3bf600e6dfb407deaebaa5878e8e8189ece","modified":1545209948767},{"_id":"public/tags/SEO/index.html","hash":"b823115bc760e7556d142e0179cb08297e7f8f3c","modified":1545209948767},{"_id":"public/tags/励志/index.html","hash":"562fe71965b4bf5232211576584f26b1d59a275a","modified":1545209948767},{"_id":"public/tags/前端分类/index.html","hash":"235d585b4c6d2dc6e2a6bd3aa76781f1a17dfd92","modified":1545209948767},{"_id":"public/tags/iview组件/index.html","hash":"061e53a6cfcb6f654aeb7cfc0a4895431de09e77","modified":1545209948767},{"_id":"public/tags/vue知识点/index.html","hash":"6bf257ac8eb806f30aaf945e9fb4e2d8dd54253f","modified":1545209948767},{"_id":"public/tags/js知识点总结/index.html","hash":"e58b34fc215fbac68722b9ac6b405b12bae339fb","modified":1545209948767},{"_id":"public/tags/数组/index.html","hash":"856005779ca396cfb45bf721590cccc9b2341812","modified":1545209948767},{"_id":"public/tags/算法/index.html","hash":"938c771384a21cabc4cfb572fb4a858f8287f870","modified":1545209948767},{"_id":"public/tags/正则表达式/index.html","hash":"d5d6c1e7835f49ea137f960e6a393c54f24dd0d7","modified":1545209948767},{"_id":"public/tags/联调工具/index.html","hash":"dd1f5ba67625d51db89f6d2975032e2986244b5a","modified":1545209948767},{"_id":"public/tags/vue原理/index.html","hash":"55e99514c6e9fe423775aa67bc1745a94f65ad66","modified":1545209948767},{"_id":"public/tags/浏览器储存/index.html","hash":"48c9fe04a3b56f6bb8e96420166428823a525dfd","modified":1545209948767},{"_id":"public/tags/localStorage/index.html","hash":"cef794310053d4f72a70b7af0ea264b2c0279596","modified":1545209948767},{"_id":"public/tags/node/index.html","hash":"e9c588ec21de4cdf8bb1d0df59c903db7168ff9a","modified":1545209948767},{"_id":"public/tags/react/index.html","hash":"cba27f6cd6332c09129fb361f658175371c58cf0","modified":1545209948768},{"_id":"public/tags/小程序/index.html","hash":"3284e9ecb63cd57e330a381fc9dcb53431b9e2ce","modified":1545209948768},{"_id":"public/tags/index.html","hash":"3b3251e5604e156c21c486ffb6cc30112c9a0699","modified":1545209948768},{"_id":"public/blog/2018/js/common/remberUrl/index.html","hash":"c8d9e0dfd34f9a75cc01c941120070691de2ae41","modified":1545209948768},{"_id":"public/blog/2018/js/we_chat/wechat-003/index.html","hash":"96a8a4a59ee6b284c917e18f66c2a1ff2bed1f8b","modified":1545209948768},{"_id":"public/blog/2018/frame/vue/vue-ivu-001/index.html","hash":"1e12fbd4b99581cbaac32c61feaddb8fef6d9f8b","modified":1545209948768},{"_id":"public/blog/2018/js/we_chat/wechat-002/index.html","hash":"4ac99bc8f32c85ab719ba8e942c37c509d9e7f2d","modified":1545209948768},{"_id":"public/blog/2018/study/study2018-05/index.html","hash":"2bb1656b232c6529a8837dcba5efda2e9d8007d1","modified":1545209948768},{"_id":"public/blog/2018/js/common/webstorage/index.html","hash":"1514d7bf1e6c86fd2bea5ade3f33c0250673cdc9","modified":1545209948768},{"_id":"public/blog/2018/js/we_chat/wechat-001/index.html","hash":"e5981195e4d4c2a93a0beb086e951a9cb4f83550","modified":1545209948768},{"_id":"public/blog/2018/study/september/index.html","hash":"72ecc819da803a2b884c206bb2cdd3ebed09dff6","modified":1545209948768},{"_id":"public/blog/2018/others/bat001/index.html","hash":"1f16d6989e813a208a79f45dd267766ae487a85f","modified":1545209948768},{"_id":"public/blog/2018/js/common/regexp/index.html","hash":"688639ce54d144bfb7046a02c98b3e39f564180d","modified":1545209948768},{"_id":"public/blog/2018/js/common/fiddle001/index.html","hash":"47c5edf4c7bb7b7214e61bc0d5630ef85ad58f4d","modified":1545209948768},{"_id":"public/blog/2018/js/common/vuestudy01/index.html","hash":"a8598963302ab6b637ca369fc5a6903864239001","modified":1545209948768},{"_id":"public/blog/2018/study/fontknownageMap/index.html","hash":"bef4fd6a260e4019f78190204a808f58f5578747","modified":1545209948768},{"_id":"public/blog/2018/study/study2014-07/index.html","hash":"8506df54a0ee88096c4af9d38200458a537afbe8","modified":1545209948769},{"_id":"public/blog/2018/others/seo/index.html","hash":"5cfc8e9d1a0e3a8d1d84386fd0322529b34875cc","modified":1545209948769},{"_id":"public/blog/2018/study/study2014-05/index.html","hash":"73a42053d055e0d6b68a6e936d1838a93b78f023","modified":1545209948769},{"_id":"public/blog/2018/js/node/nodestudy-01/index.html","hash":"832358b207107596e6c7542e42b41f921340b66e","modified":1545209948769},{"_id":"public/blog/2018/js/react/react-constructor-super/index.html","hash":"895fe636dd614bd00b9dc8d9d6405be9f39ac382","modified":1545209948769},{"_id":"public/blog/2018/study/study2018-04/index.html","hash":"82a3ec43f46f0887438820557b84c95960595328","modified":1545209948769},{"_id":"public/blog/2018/study/study2018-03/index.html","hash":"81967cc46675a75c192d57a05dd3722b4f20649e","modified":1545209948769},{"_id":"public/blog/2018/js/common/parseUrlParams/index.html","hash":"e5aa504f5511943150e0e7de4cdfa13180789d0b","modified":1545209948769},{"_id":"public/blog/2017/others/move-review-liechang/index.html","hash":"e50d00f21f95c0801dbe3addc24f677961ecc760","modified":1545209948769},{"_id":"public/blog/2017/others/time-manage/index.html","hash":"4ebe7884176e6f10f3a24ec66b90571ae264ce81","modified":1545209948769},{"_id":"public/blog/2017/frame/vue/vue-study-03/index.html","hash":"04caad32900937ac556026826b5bebc2f248f63d","modified":1545209948769},{"_id":"public/blog/2017/frame/vue/vue-study-iview/index.html","hash":"8448c4ecd01218dc2eacf0e35e6de26937eb5a10","modified":1545209948769},{"_id":"public/blog/2017/frame/vue/vue-study-computed/index.html","hash":"426fc8a036152eed5856be57b62addff8ddac019","modified":1545209948770},{"_id":"public/blog/2017/js/array/array-method-01/index.html","hash":"5e1743878ddd9b369ee0df8880a07fe3956b1abe","modified":1545209948770},{"_id":"public/blog/2017/js/array/js-call/index.html","hash":"95a7bab25fc3552d8d33f42193b499bb69e13469","modified":1545209948770},{"_id":"public/blog/2017/others/live-tulei-01/index.html","hash":"499d418b88bab47c5dc44fe1f1340a5d137adeb1","modified":1545209948770},{"_id":"public/blog/2017/others/hexo-command/index.html","hash":"f6adb56cb2c78ba31d3938da8fff60d69411e4e4","modified":1545209948770},{"_id":"public/blog/2017/others/hexo/index.html","hash":"4667a003edbe8d9e5e09769aab3672f541cb5108","modified":1545209948770},{"_id":"public/archives/index.html","hash":"13c335f97f6c73ecc42420813a7138a17e6c8f56","modified":1545209948770},{"_id":"public/archives/page/2/index.html","hash":"02d3af981c21537f1274709cd43e5bc838333be9","modified":1545209948770},{"_id":"public/archives/page/3/index.html","hash":"57db760020d52f434a3c2eb6b343e504fb6dc121","modified":1545209948770},{"_id":"public/archives/2017/index.html","hash":"d0d5b27f0b25fac6bcce7f76fcdef71e44d3d54a","modified":1545209948771},{"_id":"public/archives/2017/11/index.html","hash":"c755e22b043daa800b3a69e926e075ec743864a9","modified":1545209948771},{"_id":"public/archives/2018/index.html","hash":"fe7a9d888dbf59fad16c77eea74e69f88e5799c1","modified":1545209948771},{"_id":"public/archives/2018/page/2/index.html","hash":"bc8b3af1dea14024d9c4eadba7f8456965cbd677","modified":1545209948771},{"_id":"public/archives/2018/09/index.html","hash":"87912103129777067f8c0100e7f5f1a3e27735a1","modified":1545209948771},{"_id":"public/categories/前端开发/index.html","hash":"fee97cbb703f90dbf0456d67652d4bdfba5fbd47","modified":1545209948771},{"_id":"public/categories/学习/index.html","hash":"9eee613af68c835a9449680b65ecb71ce4fb86a4","modified":1545209948771},{"_id":"public/categories/JavaScript/index.html","hash":"bf795636b6deb6b6845ccb9608276c8141bd0a4e","modified":1545209948771},{"_id":"public/index.html","hash":"dad98253aa03aaf56c1e40ea41001e9b6173bb95","modified":1545209948771},{"_id":"public/page/2/index.html","hash":"d3abed850bab89f6aeff55a2d385a1aa88b3375f","modified":1545209948771},{"_id":"public/page/3/index.html","hash":"166355b35975904b52e79eca0d842d9f8387fc0a","modified":1545209948771},{"_id":"public/tags/学习计划/index.html","hash":"7b047fa80834770f30ac408f353a80dd17793f67","modified":1545209948771},{"_id":"public/CNAME","hash":"61e863e968917ce18fc58c0e40bb8217f360f0ed","modified":1545209948798},{"_id":"public/favicon.ico","hash":"bc6985bf377d2fdc64ada5af4c919288599594b4","modified":1545209948798},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1545209948798},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1545209948798},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1545209948798},{"_id":"public/robots.txt","hash":"85d977cb906879af47f146e03ba9cdc8d697fcb9","modified":1545209948798},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1545209948798},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1545209948798},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1545209948798},{"_id":"public/img/GitHub.jpg","hash":"22f5f53698aaebfb41a3a7a2305ebff2f5c951e8","modified":1545209948798},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1545209948798},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1545209948798},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1545209948798},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1545209948798},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1545209948798},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1545209948798},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1545209948798},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1545209948798},{"_id":"public/img/avatar1.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1545209948798},{"_id":"public/img/avatar.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1545209948798},{"_id":"public/img/avatar2.png","hash":"54d74ed6b3dc8bc2ac202726c4e731d35fb5826b","modified":1545209948799},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1545209948799},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1545209948799},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1545209948799},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1545209948799},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1545209948799},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1545209948799},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1545209948799},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1545209948799},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1545209948799},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1545209948799},{"_id":"public/public_s/images/autumn_20171110151408.jpg","hash":"d06db971de65cd859292a23748dade80dc068332","modified":1545209948799},{"_id":"public/public_s/images/menu.saveimg.savepath20180920175019.jpg","hash":"faafc9367feefed8f40c024bf7d841942bcad4a7","modified":1545209948799},{"_id":"public/public_s/images/regexper.png","hash":"5dc6f17b0fd3300ed6b38617ae1c8aed2eade380","modified":1545209948799},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1545209948799},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1545209948799},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1545209948799},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1545209948799},{"_id":"public/img/old/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1545209948799},{"_id":"public/img/old/avatar-1.png","hash":"e6bf950e2bedb0f24f8187a470b6ac9599e93c67","modified":1545209948799},{"_id":"public/public_s/images/timeManage/0.1174553194175334.png","hash":"7a226e23dd8e1deb40862d45375ba8a26ca964c5","modified":1545209948799},{"_id":"public/public_s/images/timeManage/0.419097318675272.png","hash":"b1b35cc5d94278b2ebf80c2a870210fd1bf90e49","modified":1545209948800},{"_id":"public/public_s/images/timeManage/0.46321933528434545.png","hash":"ba70b029ef647009e29dde7003666d02391f7969","modified":1545209948800},{"_id":"public/public_s/images/timeManage/0.5021243947689109.png","hash":"8de789ab52892f44d609ae544272e8acfa02ec2a","modified":1545209948800},{"_id":"public/public_s/images/timeManage/0.7242512129749097.png","hash":"bc6bf8f1f8f33ba7dd64aa9e580675b09121ee0c","modified":1545209948800},{"_id":"public/public_s/images/timeManage/0.530341774969219.png","hash":"79a0ae47a04e4fd13db78d632efd4dc228362c16","modified":1545209948800},{"_id":"public/public_s/images/timeManage/0.9251521097293676.png","hash":"9ebd2722a28a68940be700d8081fa94c1527eb87","modified":1545209948800},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1545209948800},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1545209948800},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1545209948800},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1545209948800},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1545209948800},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1545209948800},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1545209948800},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1545209948800},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1545209948800},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1545209948800},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1545209948800},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1545209948800},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1545209948800},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1545209948801},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1545209948801},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1545209948801},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1545209948801},{"_id":"public/static/api/img/share/l8.gif","hash":"ec7dbc7703961356e05528d2844b983f225445e4","modified":1545209948801},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1545209948801},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1545209948801},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1545209948801},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1545209948801},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1545209948802},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1545209948802},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1545209948802},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1545209948802},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1545209948802},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1545209948802},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1545209948802},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1545209948802},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1545209948802},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1545209949432},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1545209949434},{"_id":"public/public_s/images/mmexport1499932133535.jpeg","hash":"60f62ddc1f0c7ee3fcb29248a15235e9a72878ac","modified":1545209949436},{"_id":"public/img/old/avatar2.png","hash":"ef8a4924b45e172c06c6db7d9ddce367635a5a37","modified":1545209949436},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1545209949443},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1545209949443},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1545209949443},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1545209949443},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1545209949443},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1545209949444},{"_id":"public/js/search.js","hash":"51a376d9f07b536715f1c10f08ef49a5889971f5","modified":1545209949444},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1545209949444},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1545209949444},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1545209949444},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1545209949444},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1545209949444},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1545209949444},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1545209949444},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1545209949444},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1545209949444},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1545209949444},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1545209949444},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1545209949444},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1545209949444},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1545209949444},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1545209949444},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1545209949444},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545209949444},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545209949444},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1545209949445},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1545209949445},{"_id":"public/static/api/js/base/class.js","hash":"db02960fb51f69a0d50dc9ed626a998be3884706","modified":1545209949445},{"_id":"public/static/api/js/component/animate.js","hash":"17a3495543db66e4eb56a81a93edf3e41ca8cc31","modified":1545209949445},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1545209949445},{"_id":"public/static/api/js/component/comm_tools.js","hash":"28d096a61f54e64bdbc32d172ae20e7f6e9656a7","modified":1545209949445},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1545209949445},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1545209949445},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1545209949445},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1545209949445},{"_id":"public/static/api/js/conf/const.js","hash":"7da7df37d0f3d3e1977a8d107c98a3c1ecdb39c2","modified":1545209949445},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"45a72013fba95249ca965fd4d98f3bbde7a7098a","modified":1545209949445},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1545209949445},{"_id":"public/static/api/js/conf/define.js","hash":"ee0afad836be1553980501855752ccd79fe1fe0e","modified":1545209949445},{"_id":"public/static/api/js/share/combine_api.js","hash":"7ad3c5396bf20704e87f98ebe118034ed3cc7b22","modified":1545209949445},{"_id":"public/static/api/js/share/likeshare.js","hash":"2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312","modified":1545209949445},{"_id":"public/static/api/js/share/like_api.js","hash":"4034b10f8f34367c6db47ae092e5b4107c2fb8b4","modified":1545209949445},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1545209949445},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1545209949445},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1545209949445},{"_id":"public/static/api/js/start/router.js","hash":"27bc546a9c796b15e59442aaf09ae645a2ed4c74","modified":1545209949445},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1545209949445},{"_id":"public/static/api/js/trans/trans.js","hash":"cb82afecdbede8d5a00b6c5ea9595187b6408376","modified":1545209949445},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"a512ebfca0319ab38d06b7b0fb74bcdc942dc46e","modified":1545209949445},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1545209949445},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"28bb985a03b6b1da5a89a143331932a12126c9c3","modified":1545209949446},{"_id":"public/static/api/js/view/like_view.js","hash":"c1b6a3f3f89ac734c6da284c1ba1dde2ada4e250","modified":1545209949446},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1545209949446},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1545209949446},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1545209949446},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1545209949446},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1545209949446},{"_id":"public/css/style.css","hash":"506c43de840d7d35157ac5654a4524b68f2cebf2","modified":1545209949446},{"_id":"public/static/api/js/share.js","hash":"73bdb33580128e6c79a726a25f98092c0faa369d","modified":1545209949446},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1545209949446},{"_id":"public/public_s/mp3/a-love.mp3","hash":"d18094f4569eae835898a3d93d5b859e12ebcffd","modified":1545209949698}],"Category":[{"name":"前端开发","_id":"cjpuy3tqb00056oos0269s7o0"},{"name":"生活","_id":"cjpuy3tqg000a6oosk837uoqr"},{"name":"影视","_id":"cjpuy3tqm000g6oostjog05pv"},{"name":"学习","_id":"cjpuy3tqp000m6oosnwqplrs5"},{"name":"前端分类总结","_id":"cjpuy3tqs000s6oos6u72pd6e"},{"name":"vue框架","_id":"cjpuy3tro001r6oos9ra7fgrx"},{"name":"JavaScript","_id":"cjpuy3trw00226oos4ivwucm1"},{"name":"网站","parent":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3ts7002n6oosdylnp9ap"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","date":"2018-09-04T13:49:59.250Z","updated":"2018-09-04T13:49:59.250Z","path":"/404.html","layout":"page","_id":"cjpuy3toy00006oosy4xpu2l9","content":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>","site":{"data":{}},"excerpt":"","more":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>"},{"title":"about me","date":"2017-10-31T06:24:25.000Z","_content":"Ename:   dale\nCname:   小虫子\nJob:   web developer\nQQ:    914397365\nWechat:   xcz426\nE-mail:   914397365@qq.com\n<div>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=409649817&auto=1&height=66\"></iframe>\n\n</div>\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2017-10-31 14:24:25\n---\nEname:   dale\nCname:   小虫子\nJob:   web developer\nQQ:    914397365\nWechat:   xcz426\nE-mail:   914397365@qq.com\n<div>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=409649817&auto=1&height=66\"></iframe>\n\n</div>\n","updated":"2018-12-13T13:14:38.163Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpuy3tpm00016oosb7b1ybja","content":"<p>Ename:   dale<br>Cname:   小虫子<br>Job:   web developer<br>QQ:    914397365<br>Wechat:   xcz426<br>E-mail:   <a href=\"mailto:914397365@qq.com\" target=\"_blank\" rel=\"noopener\">914397365@qq.com</a></p>\n<div><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=409649817&auto=1&height=66\"></iframe><br><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p>Ename:   dale<br>Cname:   小虫子<br>Job:   web developer<br>QQ:    914397365<br>Wechat:   xcz426<br>E-mail:   <a href=\"mailto:914397365@qq.com\" target=\"_blank\" rel=\"noopener\">914397365@qq.com</a></p>\n<div><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=409649817&auto=1&height=66\"></iframe><br><br></div>\n"},{"title":"tags&","date":"2017-10-19T22:49:50.000Z","type":"tags","comments":0,"_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags&\ndate: 2017-10-20 06:49:50\ntype: \"tags\"\ncomments: false\n---\n\n\n","updated":"2018-09-04T13:49:59.320Z","path":"tags/index.html","layout":"page","_id":"cjpuy3tq500026oosg9hhlrz7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Dos下批处理命令bat","date":"2018-09-04T14:14:45.000Z","_content":"tips: 一键操作的批处理命令，重复的事情交给电脑~~\n<!-- more -->\n### 前言\n> 在我们开发过程中，经常会遇到切换环境，重启`nginx`，或者执行一系列的dos命令等，频繁的操作势必会很繁琐，浪费时间，作为一个程序员，重复的事情，当然要交给电脑了~\n\n首先了解一下什么是 .bat ？\n\n批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展名为bat;\n\n### 正文开始\n#### 以一个简单的nginx启动、重启、停止说起：\n\n    1. 首先切换到nginx目录，包含nginx.exe目录；\n    2. 按住shift，鼠标右键在此处打开powershell窗口；  \n    \n  nginx一般的三个操作如下：\n  \n  | 描述 | 命令 |\n  | ---------- | ------- |\n  | 启动 | start .\\nginx.exe |\n  | 重启 | .\\nginx.exe -s reload |\n  | 停止 | .\\nginx.exe -s stop |\n  > 注意：如果你不小心启动了多次，那么就会启动多个nginx进程，你用stop不能全部停止；可以用如下命令：\n  `taskkill /fi \"imagename eq nginx.EXE\" /f` 杀掉所有的nginx进程；\n  \n  接下来就展示如何使用bat批处理命令来做这个事情，先看下代码：\n  ```shell\n@echo off\n:entry\ncls\necho nginx一键操作命令集合：\necho ********************************\necho   1. 开启nginx\necho   2. 重启nginx\necho   3. 停止nginx\necho   4. 退出\necho ********************************\necho 请选择你要执行的操作...\nset /p userchoice=\nif \"%userchoice%\"==\"1\" goto startN\nif \"%userchoice%\"==\"2\" goto reloadN\nif \"%userchoice%\"==\"3\" goto stopN\nif \"%userchoice%\"==\"4\" goto quit\n\n:startN\nstart .\\nginx.exe\ngoto succ\n\n:reloadN\n.\\nginx.exe -s reload\ngoto succ\n\n:stopN\ntaskkill /fi \"imagename eq nginx.EXE\" /f\ngoto succ\n\n:quit\nexit\n\n:succ\necho 执行成功\npause\ngoto entry\n\n@echo on\n  ```\n 首先在上面说到的nginx目录下，新建一个.bat文件\n，将上述代码放进去就可以体会到一键操作了；\n\n接下来大概说说代码`set /p userchoice=`，意思是设置一个变量userchoice，值为用户输入；`:startN :entry :succ`类似一个方法，判断用输入的值，执行对应的方法；批处理命令是一行一行的执行命令，执行完成后，就会关闭shell窗口，如果想保持可以使用 `pause` 会出现请按任意键继续...；如此就完成了一个一键操作的脚本，由于该文件放在nginx的安装目录，为了方便，可以右键，发送快捷模式到桌面；\n\n#### bat进阶-修改文件\n\n> 由于目前本地的项目是用`nginx`启动访问，至于为什么，这里不解释，就是必须要用`nginx`，`nginx`里面的转发需要调用后台接口，而调用的环境经常变化，这样就需要先修改代理接口环境地址，然后重启`nginx`；\n\n现在我们的`bat`要执行修改文件，然后重启`nginx`操作，代码如下（仅供参考）\n```shell\n@echo off\n:entry\ncls\necho *****系统一键切换环境*****\necho ********************************\necho  1. 开发dev01环境\necho  2. 开发dev02环境\n\necho  3. ---测试--01--环境\necho  4. ---测试--02--环境\necho ********************************\necho 请选择你要切换环境...\nset /p userInput=\n\nif \"%userInput%\"==\"1\" goto dev01\nif \"%userInput%\"==\"2\" goto dev02\nif \"%userInput%\"==\"3\" goto test01\nif \"%userInput%\"==\"4\" goto test02\n\n:dev01\nset cc=proxy_pass http://ys.dev01.51ju.cn; #tag\ngoto switch\n\n:dev02\nset cc=proxy_pass http://ys.dev02.51ju.cn; #tag\ngoto switch\n\n:test01\nset cc=proxy_pass http://ys.test.51ju.cn; #tag\ngoto switch\n\n:test02\nset cc=proxy_pass http://ys.test02.51ju.cn; #tag\ngoto switch\n\n:switch\necho 正在切换中...\necho -------------------------\n(for /f \"tokens=*\" %%i in (a.conf) do echo %%i|findstr /ie tag>nul&&echo %cc%||echo %%i)>temp.ini\nmove /y temp.ini a.conf\necho -------------------------\necho 已经切换至： %cc%\necho -------------------------\necho 开始重启nginx...\ncd ../../\n.\\nginx.exe -s reload\necho --------------------------\necho nginx 重启成功~\ncd D:\\nginx-1.13.12\\conf\\servers\\\necho --------------------------\npause\n\ngoto entry\n@echo on\n```\n大概原理同上，主要说明一下`for`循环这个语句，\n- 首先获取到`a.conf`,然后循环每一行代码，\n-  `%%i`相当于循环的当前行代码，\n- `|findstr`是在当前行查找字符串，\n- `/ie `忽略大小写和从行末开始查找；\n-  `tag>nul`找到`'tag'`时，就把这一行清空：\n- `echo %cc%`是将方法中设置的cc值复制到这一行；\n- `move -y`就是移动文件到当前目录并取消重写文件发出的提示；\n\n注意： 默认配置中，需要修改的那一行命令需要添加一个标记tag。\n\n以上就完成了对一个文件的修改；修改文件后，需要重启`nginx`，但是这个文件的目录和`nginx`不在同一个目录下，需要执行命令`cd ../../`跳转到nginx.exe的那个目录,执行nginx重启，由于切换命令要重复使用，当前目录已经修改了，所以需要再跳转回来`cd D:\\nginx-1.13.12\\conf\\servers\\`;\n#### 娱乐一下\n相信看过科幻片的同学都知道，电脑大神或者黑客操作电脑时，不断的弹出`dos`窗口，然后绿色代码滚屏，其实很简单实现，原理如下：\n```\n@echo off\necho 当前在call目录下\n\nstart \"reload\" cmd /k\ncd /d D:\\test \ncall reload.bat \n\necho over...\npause\n```\n以上是在当前脚本中，新开`dos`窗口并调用其他目录下的脚本，如此循环重复，很简单的就实现不断开`dos`窗口了，至于滚屏，结合echo输出就可实现，`pause`命令是，代码执行到这一行时，提示请按任意键继续... 然后继续执行命令；\n\nps: 第一次捣鼓`bat`，如有错误，欢迎指出，共同进步；\n***\n\n参考链接：\n\n- [批处理---findstr命令详解](https://blog.csdn.net/zhouzihan520xj/article/details/40301041)\n- [DOS shell bat 输入输出变量](https://blog.csdn.net/jasonkent27/article/details/40394057)\n- [cmd - 如何在bat文件中调用另一个bat文件](https://blog.csdn.net/lewky_liu/article/details/78536439)","source":"_posts/others/bat001.md","raw":"---\ntitle: Dos下批处理命令bat\ntags: ['批处理命令']\ncategories: ['前端开发']\ndate: 2018-09-04 22:14:45\n---\ntips: 一键操作的批处理命令，重复的事情交给电脑~~\n<!-- more -->\n### 前言\n> 在我们开发过程中，经常会遇到切换环境，重启`nginx`，或者执行一系列的dos命令等，频繁的操作势必会很繁琐，浪费时间，作为一个程序员，重复的事情，当然要交给电脑了~\n\n首先了解一下什么是 .bat ？\n\n批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展名为bat;\n\n### 正文开始\n#### 以一个简单的nginx启动、重启、停止说起：\n\n    1. 首先切换到nginx目录，包含nginx.exe目录；\n    2. 按住shift，鼠标右键在此处打开powershell窗口；  \n    \n  nginx一般的三个操作如下：\n  \n  | 描述 | 命令 |\n  | ---------- | ------- |\n  | 启动 | start .\\nginx.exe |\n  | 重启 | .\\nginx.exe -s reload |\n  | 停止 | .\\nginx.exe -s stop |\n  > 注意：如果你不小心启动了多次，那么就会启动多个nginx进程，你用stop不能全部停止；可以用如下命令：\n  `taskkill /fi \"imagename eq nginx.EXE\" /f` 杀掉所有的nginx进程；\n  \n  接下来就展示如何使用bat批处理命令来做这个事情，先看下代码：\n  ```shell\n@echo off\n:entry\ncls\necho nginx一键操作命令集合：\necho ********************************\necho   1. 开启nginx\necho   2. 重启nginx\necho   3. 停止nginx\necho   4. 退出\necho ********************************\necho 请选择你要执行的操作...\nset /p userchoice=\nif \"%userchoice%\"==\"1\" goto startN\nif \"%userchoice%\"==\"2\" goto reloadN\nif \"%userchoice%\"==\"3\" goto stopN\nif \"%userchoice%\"==\"4\" goto quit\n\n:startN\nstart .\\nginx.exe\ngoto succ\n\n:reloadN\n.\\nginx.exe -s reload\ngoto succ\n\n:stopN\ntaskkill /fi \"imagename eq nginx.EXE\" /f\ngoto succ\n\n:quit\nexit\n\n:succ\necho 执行成功\npause\ngoto entry\n\n@echo on\n  ```\n 首先在上面说到的nginx目录下，新建一个.bat文件\n，将上述代码放进去就可以体会到一键操作了；\n\n接下来大概说说代码`set /p userchoice=`，意思是设置一个变量userchoice，值为用户输入；`:startN :entry :succ`类似一个方法，判断用输入的值，执行对应的方法；批处理命令是一行一行的执行命令，执行完成后，就会关闭shell窗口，如果想保持可以使用 `pause` 会出现请按任意键继续...；如此就完成了一个一键操作的脚本，由于该文件放在nginx的安装目录，为了方便，可以右键，发送快捷模式到桌面；\n\n#### bat进阶-修改文件\n\n> 由于目前本地的项目是用`nginx`启动访问，至于为什么，这里不解释，就是必须要用`nginx`，`nginx`里面的转发需要调用后台接口，而调用的环境经常变化，这样就需要先修改代理接口环境地址，然后重启`nginx`；\n\n现在我们的`bat`要执行修改文件，然后重启`nginx`操作，代码如下（仅供参考）\n```shell\n@echo off\n:entry\ncls\necho *****系统一键切换环境*****\necho ********************************\necho  1. 开发dev01环境\necho  2. 开发dev02环境\n\necho  3. ---测试--01--环境\necho  4. ---测试--02--环境\necho ********************************\necho 请选择你要切换环境...\nset /p userInput=\n\nif \"%userInput%\"==\"1\" goto dev01\nif \"%userInput%\"==\"2\" goto dev02\nif \"%userInput%\"==\"3\" goto test01\nif \"%userInput%\"==\"4\" goto test02\n\n:dev01\nset cc=proxy_pass http://ys.dev01.51ju.cn; #tag\ngoto switch\n\n:dev02\nset cc=proxy_pass http://ys.dev02.51ju.cn; #tag\ngoto switch\n\n:test01\nset cc=proxy_pass http://ys.test.51ju.cn; #tag\ngoto switch\n\n:test02\nset cc=proxy_pass http://ys.test02.51ju.cn; #tag\ngoto switch\n\n:switch\necho 正在切换中...\necho -------------------------\n(for /f \"tokens=*\" %%i in (a.conf) do echo %%i|findstr /ie tag>nul&&echo %cc%||echo %%i)>temp.ini\nmove /y temp.ini a.conf\necho -------------------------\necho 已经切换至： %cc%\necho -------------------------\necho 开始重启nginx...\ncd ../../\n.\\nginx.exe -s reload\necho --------------------------\necho nginx 重启成功~\ncd D:\\nginx-1.13.12\\conf\\servers\\\necho --------------------------\npause\n\ngoto entry\n@echo on\n```\n大概原理同上，主要说明一下`for`循环这个语句，\n- 首先获取到`a.conf`,然后循环每一行代码，\n-  `%%i`相当于循环的当前行代码，\n- `|findstr`是在当前行查找字符串，\n- `/ie `忽略大小写和从行末开始查找；\n-  `tag>nul`找到`'tag'`时，就把这一行清空：\n- `echo %cc%`是将方法中设置的cc值复制到这一行；\n- `move -y`就是移动文件到当前目录并取消重写文件发出的提示；\n\n注意： 默认配置中，需要修改的那一行命令需要添加一个标记tag。\n\n以上就完成了对一个文件的修改；修改文件后，需要重启`nginx`，但是这个文件的目录和`nginx`不在同一个目录下，需要执行命令`cd ../../`跳转到nginx.exe的那个目录,执行nginx重启，由于切换命令要重复使用，当前目录已经修改了，所以需要再跳转回来`cd D:\\nginx-1.13.12\\conf\\servers\\`;\n#### 娱乐一下\n相信看过科幻片的同学都知道，电脑大神或者黑客操作电脑时，不断的弹出`dos`窗口，然后绿色代码滚屏，其实很简单实现，原理如下：\n```\n@echo off\necho 当前在call目录下\n\nstart \"reload\" cmd /k\ncd /d D:\\test \ncall reload.bat \n\necho over...\npause\n```\n以上是在当前脚本中，新开`dos`窗口并调用其他目录下的脚本，如此循环重复，很简单的就实现不断开`dos`窗口了，至于滚屏，结合echo输出就可实现，`pause`命令是，代码执行到这一行时，提示请按任意键继续... 然后继续执行命令；\n\nps: 第一次捣鼓`bat`，如有错误，欢迎指出，共同进步；\n***\n\n参考链接：\n\n- [批处理---findstr命令详解](https://blog.csdn.net/zhouzihan520xj/article/details/40301041)\n- [DOS shell bat 输入输出变量](https://blog.csdn.net/jasonkent27/article/details/40394057)\n- [cmd - 如何在bat文件中调用另一个bat文件](https://blog.csdn.net/lewky_liu/article/details/78536439)","slug":"others/bat001","published":1,"updated":"2018-09-07T02:18:38.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tq600036oosibn1ijgf","content":"<p>tips: 一键操作的批处理命令，重复的事情交给电脑~~<br><a id=\"more\"></a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>在我们开发过程中，经常会遇到切换环境，重启<code>nginx</code>，或者执行一系列的dos命令等，频繁的操作势必会很繁琐，浪费时间，作为一个程序员，重复的事情，当然要交给电脑了~</p>\n</blockquote>\n<p>首先了解一下什么是 .bat ？</p>\n<p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展名为bat;</p>\n<h3 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h3><h4 id=\"以一个简单的nginx启动、重启、停止说起：\"><a href=\"#以一个简单的nginx启动、重启、停止说起：\" class=\"headerlink\" title=\"以一个简单的nginx启动、重启、停止说起：\"></a>以一个简单的nginx启动、重启、停止说起：</h4><pre><code>1. 首先切换到nginx目录，包含nginx.exe目录；\n2. 按住shift，鼠标右键在此处打开powershell窗口；  \n</code></pre><p>  nginx一般的三个操作如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>start .\\nginx.exe</td>\n</tr>\n<tr>\n<td>重启</td>\n<td>.\\nginx.exe -s reload</td>\n</tr>\n<tr>\n<td>停止</td>\n<td>.\\nginx.exe -s stop</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：如果你不小心启动了多次，那么就会启动多个nginx进程，你用stop不能全部停止；可以用如下命令：<br>  <code>taskkill /fi &quot;imagename eq nginx.EXE&quot; /f</code> 杀掉所有的nginx进程；</p>\n</blockquote>\n<p>  接下来就展示如何使用bat批处理命令来做这个事情，先看下代码：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">:entry</span><br><span class=\"line\">cls</span><br><span class=\"line\">echo nginx一键操作命令集合：</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo   1. 开启nginx</span><br><span class=\"line\">echo   2. 重启nginx</span><br><span class=\"line\">echo   3. 停止nginx</span><br><span class=\"line\">echo   4. 退出</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo 请选择你要执行的操作...</span><br><span class=\"line\">set /p userchoice=</span><br><span class=\"line\">if \"%userchoice%\"==\"1\" goto startN</span><br><span class=\"line\">if \"%userchoice%\"==\"2\" goto reloadN</span><br><span class=\"line\">if \"%userchoice%\"==\"3\" goto stopN</span><br><span class=\"line\">if \"%userchoice%\"==\"4\" goto quit</span><br><span class=\"line\"></span><br><span class=\"line\">:startN</span><br><span class=\"line\">start .\\nginx.exe</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:reloadN</span><br><span class=\"line\">.\\nginx.exe -s reload</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:stopN</span><br><span class=\"line\">taskkill /fi \"imagename eq nginx.EXE\" /f</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:quit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\">:succ</span><br><span class=\"line\">echo 执行成功</span><br><span class=\"line\">pause</span><br><span class=\"line\">goto entry</span><br><span class=\"line\"></span><br><span class=\"line\">@echo on</span><br></pre></td></tr></table></figure></p>\n<p> 首先在上面说到的nginx目录下，新建一个.bat文件<br>，将上述代码放进去就可以体会到一键操作了；</p>\n<p>接下来大概说说代码<code>set /p userchoice=</code>，意思是设置一个变量userchoice，值为用户输入；<code>:startN :entry :succ</code>类似一个方法，判断用输入的值，执行对应的方法；批处理命令是一行一行的执行命令，执行完成后，就会关闭shell窗口，如果想保持可以使用 <code>pause</code> 会出现请按任意键继续…；如此就完成了一个一键操作的脚本，由于该文件放在nginx的安装目录，为了方便，可以右键，发送快捷模式到桌面；</p>\n<h4 id=\"bat进阶-修改文件\"><a href=\"#bat进阶-修改文件\" class=\"headerlink\" title=\"bat进阶-修改文件\"></a>bat进阶-修改文件</h4><blockquote>\n<p>由于目前本地的项目是用<code>nginx</code>启动访问，至于为什么，这里不解释，就是必须要用<code>nginx</code>，<code>nginx</code>里面的转发需要调用后台接口，而调用的环境经常变化，这样就需要先修改代理接口环境地址，然后重启<code>nginx</code>；</p>\n</blockquote>\n<p>现在我们的<code>bat</code>要执行修改文件，然后重启<code>nginx</code>操作，代码如下（仅供参考）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">:entry</span><br><span class=\"line\">cls</span><br><span class=\"line\">echo *****系统一键切换环境*****</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo  1. 开发dev01环境</span><br><span class=\"line\">echo  2. 开发dev02环境</span><br><span class=\"line\"></span><br><span class=\"line\">echo  3. ---测试--01--环境</span><br><span class=\"line\">echo  4. ---测试--02--环境</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo 请选择你要切换环境...</span><br><span class=\"line\">set /p userInput=</span><br><span class=\"line\"></span><br><span class=\"line\">if \"%userInput%\"==\"1\" goto dev01</span><br><span class=\"line\">if \"%userInput%\"==\"2\" goto dev02</span><br><span class=\"line\">if \"%userInput%\"==\"3\" goto test01</span><br><span class=\"line\">if \"%userInput%\"==\"4\" goto test02</span><br><span class=\"line\"></span><br><span class=\"line\">:dev01</span><br><span class=\"line\">set cc=proxy_pass http://ys.dev01.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:dev02</span><br><span class=\"line\">set cc=proxy_pass http://ys.dev02.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:test01</span><br><span class=\"line\">set cc=proxy_pass http://ys.test.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:test02</span><br><span class=\"line\">set cc=proxy_pass http://ys.test02.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:switch</span><br><span class=\"line\">echo 正在切换中...</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">(for /f \"tokens=*\" %%i in (a.conf) do echo %%i|findstr /ie tag&gt;nul&amp;&amp;echo %cc%||echo %%i)&gt;temp.ini</span><br><span class=\"line\">move /y temp.ini a.conf</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">echo 已经切换至： %cc%</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">echo 开始重启nginx...</span><br><span class=\"line\">cd ../../</span><br><span class=\"line\">.\\nginx.exe -s reload</span><br><span class=\"line\">echo --------------------------</span><br><span class=\"line\">echo nginx 重启成功~</span><br><span class=\"line\">cd D:\\nginx-1.13.12\\conf\\servers\\</span><br><span class=\"line\">echo --------------------------</span><br><span class=\"line\">pause</span><br><span class=\"line\"></span><br><span class=\"line\">goto entry</span><br><span class=\"line\">@echo on</span><br></pre></td></tr></table></figure></p>\n<p>大概原理同上，主要说明一下<code>for</code>循环这个语句，</p>\n<ul>\n<li>首先获取到<code>a.conf</code>,然后循环每一行代码，</li>\n<li><code>%%i</code>相当于循环的当前行代码，</li>\n<li><code>|findstr</code>是在当前行查找字符串，</li>\n<li><code>/ie</code>忽略大小写和从行末开始查找；</li>\n<li><code>tag&gt;nul</code>找到<code>&#39;tag&#39;</code>时，就把这一行清空：</li>\n<li><code>echo %cc%</code>是将方法中设置的cc值复制到这一行；</li>\n<li><code>move -y</code>就是移动文件到当前目录并取消重写文件发出的提示；</li>\n</ul>\n<p>注意： 默认配置中，需要修改的那一行命令需要添加一个标记tag。</p>\n<p>以上就完成了对一个文件的修改；修改文件后，需要重启<code>nginx</code>，但是这个文件的目录和<code>nginx</code>不在同一个目录下，需要执行命令<code>cd ../../</code>跳转到nginx.exe的那个目录,执行nginx重启，由于切换命令要重复使用，当前目录已经修改了，所以需要再跳转回来<code>cd D:\\nginx-1.13.12\\conf\\servers\\</code>;</p>\n<h4 id=\"娱乐一下\"><a href=\"#娱乐一下\" class=\"headerlink\" title=\"娱乐一下\"></a>娱乐一下</h4><p>相信看过科幻片的同学都知道，电脑大神或者黑客操作电脑时，不断的弹出<code>dos</code>窗口，然后绿色代码滚屏，其实很简单实现，原理如下：<br><figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 当前在<span class=\"keyword\">call</span>目录下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span> \"reload\" <span class=\"built_in\">cmd</span> /k</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /d D:\\test </span><br><span class=\"line\"><span class=\"keyword\">call</span> reload.bat </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> over...</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure></p>\n<p>以上是在当前脚本中，新开<code>dos</code>窗口并调用其他目录下的脚本，如此循环重复，很简单的就实现不断开<code>dos</code>窗口了，至于滚屏，结合echo输出就可实现，<code>pause</code>命令是，代码执行到这一行时，提示请按任意键继续… 然后继续执行命令；</p>\n<p>ps: 第一次捣鼓<code>bat</code>，如有错误，欢迎指出，共同进步；</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/zhouzihan520xj/article/details/40301041\" target=\"_blank\" rel=\"noopener\">批处理—findstr命令详解</a></li>\n<li><a href=\"https://blog.csdn.net/jasonkent27/article/details/40394057\" target=\"_blank\" rel=\"noopener\">DOS shell bat 输入输出变量</a></li>\n<li><a href=\"https://blog.csdn.net/lewky_liu/article/details/78536439\" target=\"_blank\" rel=\"noopener\">cmd - 如何在bat文件中调用另一个bat文件</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>tips: 一键操作的批处理命令，重复的事情交给电脑~~<br>","more":"</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>在我们开发过程中，经常会遇到切换环境，重启<code>nginx</code>，或者执行一系列的dos命令等，频繁的操作势必会很繁琐，浪费时间，作为一个程序员，重复的事情，当然要交给电脑了~</p>\n</blockquote>\n<p>首先了解一下什么是 .bat ？</p>\n<p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展名为bat;</p>\n<h3 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h3><h4 id=\"以一个简单的nginx启动、重启、停止说起：\"><a href=\"#以一个简单的nginx启动、重启、停止说起：\" class=\"headerlink\" title=\"以一个简单的nginx启动、重启、停止说起：\"></a>以一个简单的nginx启动、重启、停止说起：</h4><pre><code>1. 首先切换到nginx目录，包含nginx.exe目录；\n2. 按住shift，鼠标右键在此处打开powershell窗口；  \n</code></pre><p>  nginx一般的三个操作如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>start .\\nginx.exe</td>\n</tr>\n<tr>\n<td>重启</td>\n<td>.\\nginx.exe -s reload</td>\n</tr>\n<tr>\n<td>停止</td>\n<td>.\\nginx.exe -s stop</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：如果你不小心启动了多次，那么就会启动多个nginx进程，你用stop不能全部停止；可以用如下命令：<br>  <code>taskkill /fi &quot;imagename eq nginx.EXE&quot; /f</code> 杀掉所有的nginx进程；</p>\n</blockquote>\n<p>  接下来就展示如何使用bat批处理命令来做这个事情，先看下代码：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">:entry</span><br><span class=\"line\">cls</span><br><span class=\"line\">echo nginx一键操作命令集合：</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo   1. 开启nginx</span><br><span class=\"line\">echo   2. 重启nginx</span><br><span class=\"line\">echo   3. 停止nginx</span><br><span class=\"line\">echo   4. 退出</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo 请选择你要执行的操作...</span><br><span class=\"line\">set /p userchoice=</span><br><span class=\"line\">if \"%userchoice%\"==\"1\" goto startN</span><br><span class=\"line\">if \"%userchoice%\"==\"2\" goto reloadN</span><br><span class=\"line\">if \"%userchoice%\"==\"3\" goto stopN</span><br><span class=\"line\">if \"%userchoice%\"==\"4\" goto quit</span><br><span class=\"line\"></span><br><span class=\"line\">:startN</span><br><span class=\"line\">start .\\nginx.exe</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:reloadN</span><br><span class=\"line\">.\\nginx.exe -s reload</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:stopN</span><br><span class=\"line\">taskkill /fi \"imagename eq nginx.EXE\" /f</span><br><span class=\"line\">goto succ</span><br><span class=\"line\"></span><br><span class=\"line\">:quit</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br><span class=\"line\">:succ</span><br><span class=\"line\">echo 执行成功</span><br><span class=\"line\">pause</span><br><span class=\"line\">goto entry</span><br><span class=\"line\"></span><br><span class=\"line\">@echo on</span><br></pre></td></tr></table></figure></p>\n<p> 首先在上面说到的nginx目录下，新建一个.bat文件<br>，将上述代码放进去就可以体会到一键操作了；</p>\n<p>接下来大概说说代码<code>set /p userchoice=</code>，意思是设置一个变量userchoice，值为用户输入；<code>:startN :entry :succ</code>类似一个方法，判断用输入的值，执行对应的方法；批处理命令是一行一行的执行命令，执行完成后，就会关闭shell窗口，如果想保持可以使用 <code>pause</code> 会出现请按任意键继续…；如此就完成了一个一键操作的脚本，由于该文件放在nginx的安装目录，为了方便，可以右键，发送快捷模式到桌面；</p>\n<h4 id=\"bat进阶-修改文件\"><a href=\"#bat进阶-修改文件\" class=\"headerlink\" title=\"bat进阶-修改文件\"></a>bat进阶-修改文件</h4><blockquote>\n<p>由于目前本地的项目是用<code>nginx</code>启动访问，至于为什么，这里不解释，就是必须要用<code>nginx</code>，<code>nginx</code>里面的转发需要调用后台接口，而调用的环境经常变化，这样就需要先修改代理接口环境地址，然后重启<code>nginx</code>；</p>\n</blockquote>\n<p>现在我们的<code>bat</code>要执行修改文件，然后重启<code>nginx</code>操作，代码如下（仅供参考）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">:entry</span><br><span class=\"line\">cls</span><br><span class=\"line\">echo *****系统一键切换环境*****</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo  1. 开发dev01环境</span><br><span class=\"line\">echo  2. 开发dev02环境</span><br><span class=\"line\"></span><br><span class=\"line\">echo  3. ---测试--01--环境</span><br><span class=\"line\">echo  4. ---测试--02--环境</span><br><span class=\"line\">echo ********************************</span><br><span class=\"line\">echo 请选择你要切换环境...</span><br><span class=\"line\">set /p userInput=</span><br><span class=\"line\"></span><br><span class=\"line\">if \"%userInput%\"==\"1\" goto dev01</span><br><span class=\"line\">if \"%userInput%\"==\"2\" goto dev02</span><br><span class=\"line\">if \"%userInput%\"==\"3\" goto test01</span><br><span class=\"line\">if \"%userInput%\"==\"4\" goto test02</span><br><span class=\"line\"></span><br><span class=\"line\">:dev01</span><br><span class=\"line\">set cc=proxy_pass http://ys.dev01.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:dev02</span><br><span class=\"line\">set cc=proxy_pass http://ys.dev02.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:test01</span><br><span class=\"line\">set cc=proxy_pass http://ys.test.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:test02</span><br><span class=\"line\">set cc=proxy_pass http://ys.test02.51ju.cn; #tag</span><br><span class=\"line\">goto switch</span><br><span class=\"line\"></span><br><span class=\"line\">:switch</span><br><span class=\"line\">echo 正在切换中...</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">(for /f \"tokens=*\" %%i in (a.conf) do echo %%i|findstr /ie tag&gt;nul&amp;&amp;echo %cc%||echo %%i)&gt;temp.ini</span><br><span class=\"line\">move /y temp.ini a.conf</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">echo 已经切换至： %cc%</span><br><span class=\"line\">echo -------------------------</span><br><span class=\"line\">echo 开始重启nginx...</span><br><span class=\"line\">cd ../../</span><br><span class=\"line\">.\\nginx.exe -s reload</span><br><span class=\"line\">echo --------------------------</span><br><span class=\"line\">echo nginx 重启成功~</span><br><span class=\"line\">cd D:\\nginx-1.13.12\\conf\\servers\\</span><br><span class=\"line\">echo --------------------------</span><br><span class=\"line\">pause</span><br><span class=\"line\"></span><br><span class=\"line\">goto entry</span><br><span class=\"line\">@echo on</span><br></pre></td></tr></table></figure></p>\n<p>大概原理同上，主要说明一下<code>for</code>循环这个语句，</p>\n<ul>\n<li>首先获取到<code>a.conf</code>,然后循环每一行代码，</li>\n<li><code>%%i</code>相当于循环的当前行代码，</li>\n<li><code>|findstr</code>是在当前行查找字符串，</li>\n<li><code>/ie</code>忽略大小写和从行末开始查找；</li>\n<li><code>tag&gt;nul</code>找到<code>&#39;tag&#39;</code>时，就把这一行清空：</li>\n<li><code>echo %cc%</code>是将方法中设置的cc值复制到这一行；</li>\n<li><code>move -y</code>就是移动文件到当前目录并取消重写文件发出的提示；</li>\n</ul>\n<p>注意： 默认配置中，需要修改的那一行命令需要添加一个标记tag。</p>\n<p>以上就完成了对一个文件的修改；修改文件后，需要重启<code>nginx</code>，但是这个文件的目录和<code>nginx</code>不在同一个目录下，需要执行命令<code>cd ../../</code>跳转到nginx.exe的那个目录,执行nginx重启，由于切换命令要重复使用，当前目录已经修改了，所以需要再跳转回来<code>cd D:\\nginx-1.13.12\\conf\\servers\\</code>;</p>\n<h4 id=\"娱乐一下\"><a href=\"#娱乐一下\" class=\"headerlink\" title=\"娱乐一下\"></a>娱乐一下</h4><p>相信看过科幻片的同学都知道，电脑大神或者黑客操作电脑时，不断的弹出<code>dos</code>窗口，然后绿色代码滚屏，其实很简单实现，原理如下：<br><figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 当前在<span class=\"keyword\">call</span>目录下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">start</span> \"reload\" <span class=\"built_in\">cmd</span> /k</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /d D:\\test </span><br><span class=\"line\"><span class=\"keyword\">call</span> reload.bat </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> over...</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure></p>\n<p>以上是在当前脚本中，新开<code>dos</code>窗口并调用其他目录下的脚本，如此循环重复，很简单的就实现不断开<code>dos</code>窗口了，至于滚屏，结合echo输出就可实现，<code>pause</code>命令是，代码执行到这一行时，提示请按任意键继续… 然后继续执行命令；</p>\n<p>ps: 第一次捣鼓<code>bat</code>，如有错误，欢迎指出，共同进步；</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/zhouzihan520xj/article/details/40301041\" target=\"_blank\" rel=\"noopener\">批处理—findstr命令详解</a></li>\n<li><a href=\"https://blog.csdn.net/jasonkent27/article/details/40394057\" target=\"_blank\" rel=\"noopener\">DOS shell bat 输入输出变量</a></li>\n<li><a href=\"https://blog.csdn.net/lewky_liu/article/details/78536439\" target=\"_blank\" rel=\"noopener\">cmd - 如何在bat文件中调用另一个bat文件</a></li>\n</ul>"},{"title":"hexo 命令集合","date":"2017-10-31T05:55:00.000Z","description":"hexo 操作的一些命令","_content":"<Contents>\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### [发布]Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nhttp://blog.csdn.net/qq_23435721/article/details/50997275\n\n### 添加搜索的方法\n\n``` bash\nnpm install hexo-generator-search --save\n```\n\nMore info: [站内搜索](http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html)\nMore info: [github地址](https://github.com/PaicHyperionDev/hexo-generator-search)\n\n### seo优化\n\n``` bash\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\nMore info: [优化教程](http://blog.csdn.net/qq_23435721/article/details/50997275)\nMore info: [优化教程](http://www.jianshu.com/p/86557c34b671)\nMore info: [优化教程](http://www.arao.me/2015/hexo-next-theme-optimize-seo/)\n\n\n### 首页显示tag的两种方法\n\n1. 方法一\n```\ntitle: Hello World\ndate: 2000-12-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n```\n\n2. 方法二\n```\ntitle: Hello World\ndate: 2000-12-03 00:00:00\n+description: \"Welcome to Hexo! This is your very first post.\"\n---\n<Contents>\n```","source":"_posts/others/hexo-command.md","raw":"---\ntitle: hexo 命令集合\ndate: 2017-10-31 13:55:00\ndescription: \"hexo 操作的一些命令\"\n---\n<Contents>\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### [发布]Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nhttp://blog.csdn.net/qq_23435721/article/details/50997275\n\n### 添加搜索的方法\n\n``` bash\nnpm install hexo-generator-search --save\n```\n\nMore info: [站内搜索](http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html)\nMore info: [github地址](https://github.com/PaicHyperionDev/hexo-generator-search)\n\n### seo优化\n\n``` bash\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\nMore info: [优化教程](http://blog.csdn.net/qq_23435721/article/details/50997275)\nMore info: [优化教程](http://www.jianshu.com/p/86557c34b671)\nMore info: [优化教程](http://www.arao.me/2015/hexo-next-theme-optimize-seo/)\n\n\n### 首页显示tag的两种方法\n\n1. 方法一\n```\ntitle: Hello World\ndate: 2000-12-03 00:00:00\n---\n<Excerpt in index | 首页摘要> \n+<!-- more -->\n<The rest of contents | 余下全文>\n```\n\n2. 方法二\n```\ntitle: Hello World\ndate: 2000-12-03 00:00:00\n+description: \"Welcome to Hexo! This is your very first post.\"\n---\n<Contents>\n```","slug":"others/hexo-command","published":1,"updated":"2018-09-04T13:49:59.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tq900046oos94xnht57","content":"<p><contents><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</contents></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"发布-Deploy-to-remote-sites\"><a href=\"#发布-Deploy-to-remote-sites\" class=\"headerlink\" title=\"[发布]Deploy to remote sites\"></a>[发布]Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><a href=\"http://blog.csdn.net/qq_23435721/article/details/50997275\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_23435721/article/details/50997275</a></p>\n<h3 id=\"添加搜索的方法\"><a href=\"#添加搜索的方法\" class=\"headerlink\" title=\"添加搜索的方法\"></a>添加搜索的方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html\" target=\"_blank\" rel=\"noopener\">站内搜索</a><br>More info: <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h3 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://blog.csdn.net/qq_23435721/article/details/50997275\" target=\"_blank\" rel=\"noopener\">优化教程</a><br>More info: <a href=\"http://www.jianshu.com/p/86557c34b671\" target=\"_blank\" rel=\"noopener\">优化教程</a><br>More info: <a href=\"http://www.arao.me/2015/hexo-next-theme-optimize-seo/\" target=\"_blank\" rel=\"noopener\">优化教程</a></p>\n<h3 id=\"首页显示tag的两种方法\"><a href=\"#首页显示tag的两种方法\" class=\"headerlink\" title=\"首页显示tag的两种方法\"></a>首页显示tag的两种方法</h3><ol>\n<li><p>方法一</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2000-12-03 00:00:00</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Excerpt</span> <span class=\"attr\">in</span> <span class=\"attr\">index</span> | 首页摘要&gt;</span> </span><br><span class=\"line\">+<span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">The</span> <span class=\"attr\">rest</span> <span class=\"attr\">of</span> <span class=\"attr\">contents</span> | 余下全文&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2000</span><span class=\"bullet\">-12</span><span class=\"bullet\">-03</span> <span class=\"number\">00</span><span class=\"string\">:00:00</span></span><br><span class=\"line\"><span class=\"string\">+description:</span> <span class=\"string\">\"Welcome to Hexo! This is your very first post.\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;Contents&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><contents><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</contents></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"发布-Deploy-to-remote-sites\"><a href=\"#发布-Deploy-to-remote-sites\" class=\"headerlink\" title=\"[发布]Deploy to remote sites\"></a>[发布]Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><a href=\"http://blog.csdn.net/qq_23435721/article/details/50997275\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_23435721/article/details/50997275</a></p>\n<h3 id=\"添加搜索的方法\"><a href=\"#添加搜索的方法\" class=\"headerlink\" title=\"添加搜索的方法\"></a>添加搜索的方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html\" target=\"_blank\" rel=\"noopener\">站内搜索</a><br>More info: <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h3 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://blog.csdn.net/qq_23435721/article/details/50997275\" target=\"_blank\" rel=\"noopener\">优化教程</a><br>More info: <a href=\"http://www.jianshu.com/p/86557c34b671\" target=\"_blank\" rel=\"noopener\">优化教程</a><br>More info: <a href=\"http://www.arao.me/2015/hexo-next-theme-optimize-seo/\" target=\"_blank\" rel=\"noopener\">优化教程</a></p>\n<h3 id=\"首页显示tag的两种方法\"><a href=\"#首页显示tag的两种方法\" class=\"headerlink\" title=\"首页显示tag的两种方法\"></a>首页显示tag的两种方法</h3><ol>\n<li><p>方法一</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2000-12-03 00:00:00</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Excerpt</span> <span class=\"attr\">in</span> <span class=\"attr\">index</span> | 首页摘要&gt;</span> </span><br><span class=\"line\">+<span class=\"comment\">&lt;!-- more --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">The</span> <span class=\"attr\">rest</span> <span class=\"attr\">of</span> <span class=\"attr\">contents</span> | 余下全文&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2000</span><span class=\"bullet\">-12</span><span class=\"bullet\">-03</span> <span class=\"number\">00</span><span class=\"string\">:00:00</span></span><br><span class=\"line\"><span class=\"string\">+description:</span> <span class=\"string\">\"Welcome to Hexo! This is your very first post.\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;Contents&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"我忘记了自己，却没忘记你！","date":"2017-10-31T16:00:00.000Z","description":"因为，那就是爱情本来的样子，这一切的一切，不为别的，只是因为爱情！","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是`“您”`，一处是信的结尾，`“一切尚好，不要挂念，好好保重身体。”`经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得`潸然泪下`，可是泪水过后，又会有多少`实质性的改变`？\n\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？\n\n\n\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，`这一切的一切`，不为别的，`只是因为爱情` ！**\n\n本文转载自： [涂磊公众号](http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg)\n\n<!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->\n","source":"_posts/others/live-tulei-01.md","raw":"---\ntitle: 我忘记了自己，却没忘记你！\ndate: 2017-11-1 00:00:00\ndescription: \"因为，那就是爱情本来的样子，这一切的一切，不为别的，只是因为爱情！\"\ntags: [情感]\ncategories: [生活]\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是`“您”`，一处是信的结尾，`“一切尚好，不要挂念，好好保重身体。”`经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得`潸然泪下`，可是泪水过后，又会有多少`实质性的改变`？\n\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？\n\n\n\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，`这一切的一切`，不为别的，`只是因为爱情` ！**\n\n本文转载自： [涂磊公众号](http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg)\n\n<!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->\n","slug":"others/live-tulei-01","published":1,"updated":"2018-09-04T13:49:59.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqd00076oos1h8r1cac","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是<code>“您”</code>，一处是信的结尾，<code>“一切尚好，不要挂念，好好保重身体。”</code>经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得<code>潸然泪下</code>，可是泪水过后，又会有多少<code>实质性的改变</code>？</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，<code>这一切的一切</code>，不为别的，<code>只是因为爱情</code> ！</strong></p>\n<p>本文转载自： <a href=\"http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg\" target=\"_blank\" rel=\"noopener\">涂磊公众号</a></p>\n<!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是<code>“您”</code>，一处是信的结尾，<code>“一切尚好，不要挂念，好好保重身体。”</code>经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得<code>潸然泪下</code>，可是泪水过后，又会有多少<code>实质性的改变</code>？</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？</p>\n<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，<code>这一切的一切</code>，不为别的，<code>只是因为爱情</code> ！</strong></p>\n<p>本文转载自： <a href=\"http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg\" target=\"_blank\" rel=\"noopener\">涂磊公众号</a></p>\n<!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->\n"},{"title":"hexo配置","date":"2017-10-30T16:00:00.000Z","description":"Welcome to Hexo! This is your very first post.","_content":"<Contents>\n\n### hexo 创建一个新页面的方法\n\n命令  `hexo new layout title`\n> layout会默认使用scaffolds中的post模板来生成一个新页面\n\n简写命令 `hexo new 'title'`","source":"_posts/others/hexo.md","raw":"title: hexo配置\ndate: 2017-10-31 00:00:00\ndescription: \"Welcome to Hexo! This is your very first post.\"\n---\n<Contents>\n\n### hexo 创建一个新页面的方法\n\n命令  `hexo new layout title`\n> layout会默认使用scaffolds中的post模板来生成一个新页面\n\n简写命令 `hexo new 'title'`","slug":"others/hexo","published":1,"updated":"2018-09-04T13:49:59.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqe00086oos2kw6uhru","content":"<contents>\n\n<h3 id=\"hexo-创建一个新页面的方法\"><a href=\"#hexo-创建一个新页面的方法\" class=\"headerlink\" title=\"hexo 创建一个新页面的方法\"></a>hexo 创建一个新页面的方法</h3><p>命令  <code>hexo new layout title</code></p>\n<blockquote>\n<p>layout会默认使用scaffolds中的post模板来生成一个新页面</p>\n</blockquote>\n<p>简写命令 <code>hexo new &#39;title&#39;</code></p>\n</contents>","site":{"data":{}},"excerpt":"","more":"<contents>\n\n<h3 id=\"hexo-创建一个新页面的方法\"><a href=\"#hexo-创建一个新页面的方法\" class=\"headerlink\" title=\"hexo 创建一个新页面的方法\"></a>hexo 创建一个新页面的方法</h3><p>命令  <code>hexo new layout title</code></p>\n<blockquote>\n<p>layout会默认使用scaffolds中的post模板来生成一个新页面</p>\n</blockquote>\n<p>简写命令 <code>hexo new &#39;title&#39;</code></p>\n</contents>"},{"title":"经过了这么多年的努力，理想终于成了泡影---猎场经典台词","date":"2017-11-14T05:33:59.000Z","description":"时间是一个伟大的作者，它必将写出最完美的答案","_content":"\n经典歌曲 :   一场恋爱\n***\n<audio style=\"width: 500px\" autoplay=\"autoplay\" src=\"/public_s/mp3/a-love.mp3\" controls = \"controls\">\n你的浏览器暂不支持！\n</audio>\n<small style=\"color: #808080; font-size: 12px\">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small>\n\n***\nGod gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.\n\n上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。\n<ol>\n\n<li> “如果记忆是一个罐头，我希望它永远不会过期”。 ----------引用自电影《重庆森林》</li>\n<li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ---------引用自卓别林</li>\n<li> “山中何所有 ，岭上多白云”。 ----------------引用自陶弘景</li>\n\n</ol>\n\n\n</br>\n1. 岁月如刀，我似芹萝，时间太可怕了。\n\n2. 经过了这么多年的努力，理想终于成了泡影。\n\n3. 时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 \n\n4. 女人不仅是个伴，还能让我活得不那么糙。\n\n5. 女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。\n\n6. 我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张\n\n7. “退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     \n\n8. 只要你还没钻进坟墓里，一切就只是开始。\n\n9. 职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。\n\n10. 这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。\n","source":"_posts/others/move-review-liechang.md","raw":"---\ntitle: 经过了这么多年的努力，理想终于成了泡影---猎场经典台词\ntags: [电视剧, 经典台词]\ncategories: [影视]\ndate: 2017-11-14 13:33:59\ndescription: 时间是一个伟大的作者，它必将写出最完美的答案\n---\n\n经典歌曲 :   一场恋爱\n***\n<audio style=\"width: 500px\" autoplay=\"autoplay\" src=\"/public_s/mp3/a-love.mp3\" controls = \"controls\">\n你的浏览器暂不支持！\n</audio>\n<small style=\"color: #808080; font-size: 12px\">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small>\n\n***\nGod gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.\n\n上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。\n<ol>\n\n<li> “如果记忆是一个罐头，我希望它永远不会过期”。 ----------引用自电影《重庆森林》</li>\n<li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ---------引用自卓别林</li>\n<li> “山中何所有 ，岭上多白云”。 ----------------引用自陶弘景</li>\n\n</ol>\n\n\n</br>\n1. 岁月如刀，我似芹萝，时间太可怕了。\n\n2. 经过了这么多年的努力，理想终于成了泡影。\n\n3. 时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 \n\n4. 女人不仅是个伴，还能让我活得不那么糙。\n\n5. 女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。\n\n6. 我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张\n\n7. “退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     \n\n8. 只要你还没钻进坟墓里，一切就只是开始。\n\n9. 职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。\n\n10. 这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。\n","slug":"others/move-review-liechang","published":1,"updated":"2018-09-04T13:49:59.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqf00096oosnalgvjab","content":"<p>经典歌曲 :   一场恋爱</p>\n<hr>\n<p><audio style=\"width: 500px\" autoplay=\"autoplay\" src=\"/public_s/mp3/a-love.mp3\" controls=\"controls\"><br>你的浏览器暂不支持！<br></audio><br><small style=\"color: #808080; font-size: 12px\">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small></p>\n<hr>\n<p>God gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.</p>\n<p>上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。</p>\n<ol><br><br><li> “如果记忆是一个罐头，我希望它永远不会过期”。 ———-引用自电影《重庆森林》</li><br><li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ———引用自卓别林</li><br><li> “山中何所有 ，岭上多白云”。 —————-引用自陶弘景</li><br><br></ol>\n\n\n<p><br></p>\n<ol>\n<li><p>岁月如刀，我似芹萝，时间太可怕了。</p>\n</li>\n<li><p>经过了这么多年的努力，理想终于成了泡影。</p>\n</li>\n<li><p>时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 </p>\n</li>\n<li><p>女人不仅是个伴，还能让我活得不那么糙。</p>\n</li>\n<li><p>女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。</p>\n</li>\n<li><p>我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张</p>\n</li>\n<li><p>“退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     </p>\n</li>\n<li><p>只要你还没钻进坟墓里，一切就只是开始。</p>\n</li>\n<li><p>职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。</p>\n</li>\n<li><p>这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>经典歌曲 :   一场恋爱</p>\n<hr>\n<p><audio style=\"width: 500px\" autoplay=\"autoplay\" src=\"/public_s/mp3/a-love.mp3\" controls=\"controls\"><br>你的浏览器暂不支持！<br></audio><br><small style=\"color: #808080; font-size: 12px\">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small></p>\n<hr>\n<p>God gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.</p>\n<p>上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。</p>\n<ol><br><br><li> “如果记忆是一个罐头，我希望它永远不会过期”。 ———-引用自电影《重庆森林》</li><br><li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ———引用自卓别林</li><br><li> “山中何所有 ，岭上多白云”。 —————-引用自陶弘景</li><br><br></ol>\n\n\n<p><br></p>\n<ol>\n<li><p>岁月如刀，我似芹萝，时间太可怕了。</p>\n</li>\n<li><p>经过了这么多年的努力，理想终于成了泡影。</p>\n</li>\n<li><p>时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 </p>\n</li>\n<li><p>女人不仅是个伴，还能让我活得不那么糙。</p>\n</li>\n<li><p>女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。</p>\n</li>\n<li><p>我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张</p>\n</li>\n<li><p>“退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     </p>\n</li>\n<li><p>只要你还没钻进坟墓里，一切就只是开始。</p>\n</li>\n<li><p>职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。</p>\n</li>\n<li><p>这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。</p>\n</li>\n</ol>\n"},{"title":"非大型网站的SEO优化之路","date":"2018-05-31T07:57:16.000Z","_content":"网站常用的SEO优化方式\n\n<!-- more -->\n#### 简介\n\n1. SEO 搜索引擎优化 免费\n2. SEM 搜索引擎营销 收费\n\n#### SEO排名机制\n\n1. 搜索引擎蜘蛛\n2. 权重\n***\n### 权重提升\n#### SEO优化重要的三要素\n\n1. 标题\n2. 关键词   \n3. 描述\n\n#### 外链  -> 分类抓取进入数据库\n\n1. 外链 - 网站于网站之间的连接向导--通过链接去抓取\n2. 互联网是链接与链接实现的一条网络\n3. 与内容相近的网站交换\n4. 其他形式的交换， 例如-灌水式外链【在论坛，贴吧发布链接~】\n\n#### 内链 \n\n1. 页面链接 【文章关键字链接】-- 蜘蛛顺着链接爬来爬去抓取\n2. 优化本站质量、提高流量\n\n#### 内容质量\n\n1. 质量高能够提升权重\n2. 更新内容，增加匹配度-保持权重\n3. 原创 【抄袭， 洗稿子， 不长久，搜索引擎算法更新】\n4. 关键词密度 【2% -- 8%】 【ps：一篇文章内的关键词链接】\n\n#### 黑帽和沙盒\n\n1. 购买外链 【在淘宝等与权重高德网站交换外链】\n2. 垃圾站 【seqing - dubo 等非法大流量网站进行交换】【降权惩罚，关进沙盒，搜索引擎扔进小黑屋】\n3. 黑客行为 【攻击网站，恶意添加外链】\n\n#### 话术设置\n\nexample： \n    -- 原标题： 前端开发，如何才能高新就业\n    -- 修改话术后： 一个菜鸟前端的百万年薪之路\n\n#### 关键词的挖掘\n\n1. 头脑风暴\n\n2. 利用搜索引擎的相关搜索\n    - 与排名靠前的网站使用相同的关键字， 蹭热度；\n    - 参考相关搜索中的关键词， 调整网站的关键字；\n    \n3. 工具\n    - 工具-百度指数，对关键词查询\n4. 长尾关键词\n    - 使用关键词竞争对手少，但是也有一定量的关键词， 用户转换率高很多\n\n#### 域名的选择\n\n1. 后缀的选择\n    - .com商业性强，输入自动填入\n2. 短域名\n3. 域名语义化\n4. 域名的使用历史查询\n\n#### seo前端优化方案\n\n1. 代码去冗余 【精简代码、 模块化】\n2. 自动化【 工具 webpack~~~ 】\n3. Html语义化【 P标签, h标签 a标签】\n4. meat标签\n    -- keywords\n    -- description\n5. title标签\n\n#### 其他方式\n1. 站群推广\n    --相同类似的网站互相链接，推广\n***\n### 日子分析\n### 推广工具\n1. 百度推广\n2. 百度统计\n3. 百度指数\n4. CNZZ\n5. 爱站网\n6. 站长工具\n\n\n","source":"_posts/others/seo.md","raw":"---\ntitle: 非大型网站的SEO优化之路\ntags: [SEO]\ncategories: [学习]\ndate: 2018-05-31 15:57:16\n---\n网站常用的SEO优化方式\n\n<!-- more -->\n#### 简介\n\n1. SEO 搜索引擎优化 免费\n2. SEM 搜索引擎营销 收费\n\n#### SEO排名机制\n\n1. 搜索引擎蜘蛛\n2. 权重\n***\n### 权重提升\n#### SEO优化重要的三要素\n\n1. 标题\n2. 关键词   \n3. 描述\n\n#### 外链  -> 分类抓取进入数据库\n\n1. 外链 - 网站于网站之间的连接向导--通过链接去抓取\n2. 互联网是链接与链接实现的一条网络\n3. 与内容相近的网站交换\n4. 其他形式的交换， 例如-灌水式外链【在论坛，贴吧发布链接~】\n\n#### 内链 \n\n1. 页面链接 【文章关键字链接】-- 蜘蛛顺着链接爬来爬去抓取\n2. 优化本站质量、提高流量\n\n#### 内容质量\n\n1. 质量高能够提升权重\n2. 更新内容，增加匹配度-保持权重\n3. 原创 【抄袭， 洗稿子， 不长久，搜索引擎算法更新】\n4. 关键词密度 【2% -- 8%】 【ps：一篇文章内的关键词链接】\n\n#### 黑帽和沙盒\n\n1. 购买外链 【在淘宝等与权重高德网站交换外链】\n2. 垃圾站 【seqing - dubo 等非法大流量网站进行交换】【降权惩罚，关进沙盒，搜索引擎扔进小黑屋】\n3. 黑客行为 【攻击网站，恶意添加外链】\n\n#### 话术设置\n\nexample： \n    -- 原标题： 前端开发，如何才能高新就业\n    -- 修改话术后： 一个菜鸟前端的百万年薪之路\n\n#### 关键词的挖掘\n\n1. 头脑风暴\n\n2. 利用搜索引擎的相关搜索\n    - 与排名靠前的网站使用相同的关键字， 蹭热度；\n    - 参考相关搜索中的关键词， 调整网站的关键字；\n    \n3. 工具\n    - 工具-百度指数，对关键词查询\n4. 长尾关键词\n    - 使用关键词竞争对手少，但是也有一定量的关键词， 用户转换率高很多\n\n#### 域名的选择\n\n1. 后缀的选择\n    - .com商业性强，输入自动填入\n2. 短域名\n3. 域名语义化\n4. 域名的使用历史查询\n\n#### seo前端优化方案\n\n1. 代码去冗余 【精简代码、 模块化】\n2. 自动化【 工具 webpack~~~ 】\n3. Html语义化【 P标签, h标签 a标签】\n4. meat标签\n    -- keywords\n    -- description\n5. title标签\n\n#### 其他方式\n1. 站群推广\n    --相同类似的网站互相链接，推广\n***\n### 日子分析\n### 推广工具\n1. 百度推广\n2. 百度统计\n3. 百度指数\n4. CNZZ\n5. 爱站网\n6. 站长工具\n\n\n","slug":"others/seo","published":1,"updated":"2018-09-04T13:49:59.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqi000d6oosru3243k5","content":"<p>网站常用的SEO优化方式</p>\n<a id=\"more\"></a>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ol>\n<li>SEO 搜索引擎优化 免费</li>\n<li>SEM 搜索引擎营销 收费</li>\n</ol>\n<h4 id=\"SEO排名机制\"><a href=\"#SEO排名机制\" class=\"headerlink\" title=\"SEO排名机制\"></a>SEO排名机制</h4><ol>\n<li>搜索引擎蜘蛛</li>\n<li>权重</li>\n</ol>\n<hr>\n<h3 id=\"权重提升\"><a href=\"#权重提升\" class=\"headerlink\" title=\"权重提升\"></a>权重提升</h3><h4 id=\"SEO优化重要的三要素\"><a href=\"#SEO优化重要的三要素\" class=\"headerlink\" title=\"SEO优化重要的三要素\"></a>SEO优化重要的三要素</h4><ol>\n<li>标题</li>\n<li>关键词   </li>\n<li>描述</li>\n</ol>\n<h4 id=\"外链-gt-分类抓取进入数据库\"><a href=\"#外链-gt-分类抓取进入数据库\" class=\"headerlink\" title=\"外链  -&gt; 分类抓取进入数据库\"></a>外链  -&gt; 分类抓取进入数据库</h4><ol>\n<li>外链 - 网站于网站之间的连接向导–通过链接去抓取</li>\n<li>互联网是链接与链接实现的一条网络</li>\n<li>与内容相近的网站交换</li>\n<li>其他形式的交换， 例如-灌水式外链【在论坛，贴吧发布链接~】</li>\n</ol>\n<h4 id=\"内链\"><a href=\"#内链\" class=\"headerlink\" title=\"内链\"></a>内链</h4><ol>\n<li>页面链接 【文章关键字链接】– 蜘蛛顺着链接爬来爬去抓取</li>\n<li>优化本站质量、提高流量</li>\n</ol>\n<h4 id=\"内容质量\"><a href=\"#内容质量\" class=\"headerlink\" title=\"内容质量\"></a>内容质量</h4><ol>\n<li>质量高能够提升权重</li>\n<li>更新内容，增加匹配度-保持权重</li>\n<li>原创 【抄袭， 洗稿子， 不长久，搜索引擎算法更新】</li>\n<li>关键词密度 【2% – 8%】 【ps：一篇文章内的关键词链接】</li>\n</ol>\n<h4 id=\"黑帽和沙盒\"><a href=\"#黑帽和沙盒\" class=\"headerlink\" title=\"黑帽和沙盒\"></a>黑帽和沙盒</h4><ol>\n<li>购买外链 【在淘宝等与权重高德网站交换外链】</li>\n<li>垃圾站 【seqing - dubo 等非法大流量网站进行交换】【降权惩罚，关进沙盒，搜索引擎扔进小黑屋】</li>\n<li>黑客行为 【攻击网站，恶意添加外链】</li>\n</ol>\n<h4 id=\"话术设置\"><a href=\"#话术设置\" class=\"headerlink\" title=\"话术设置\"></a>话术设置</h4><p>example：<br>    – 原标题： 前端开发，如何才能高新就业<br>    – 修改话术后： 一个菜鸟前端的百万年薪之路</p>\n<h4 id=\"关键词的挖掘\"><a href=\"#关键词的挖掘\" class=\"headerlink\" title=\"关键词的挖掘\"></a>关键词的挖掘</h4><ol>\n<li><p>头脑风暴</p>\n</li>\n<li><p>利用搜索引擎的相关搜索</p>\n<ul>\n<li>与排名靠前的网站使用相同的关键字， 蹭热度；</li>\n<li>参考相关搜索中的关键词， 调整网站的关键字；</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li>工具-百度指数，对关键词查询</li>\n</ul>\n</li>\n<li>长尾关键词<ul>\n<li>使用关键词竞争对手少，但是也有一定量的关键词， 用户转换率高很多</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"域名的选择\"><a href=\"#域名的选择\" class=\"headerlink\" title=\"域名的选择\"></a>域名的选择</h4><ol>\n<li>后缀的选择<ul>\n<li>.com商业性强，输入自动填入</li>\n</ul>\n</li>\n<li>短域名</li>\n<li>域名语义化</li>\n<li>域名的使用历史查询</li>\n</ol>\n<h4 id=\"seo前端优化方案\"><a href=\"#seo前端优化方案\" class=\"headerlink\" title=\"seo前端优化方案\"></a>seo前端优化方案</h4><ol>\n<li>代码去冗余 【精简代码、 模块化】</li>\n<li>自动化【 工具 webpack~~~ 】</li>\n<li>Html语义化【 P标签, h标签 a标签】</li>\n<li>meat标签<br> – keywords<br> – description</li>\n<li>title标签</li>\n</ol>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><ol>\n<li>站群推广<br> –相同类似的网站互相链接，推广</li>\n</ol>\n<hr>\n<h3 id=\"日子分析\"><a href=\"#日子分析\" class=\"headerlink\" title=\"日子分析\"></a>日子分析</h3><h3 id=\"推广工具\"><a href=\"#推广工具\" class=\"headerlink\" title=\"推广工具\"></a>推广工具</h3><ol>\n<li>百度推广</li>\n<li>百度统计</li>\n<li>百度指数</li>\n<li>CNZZ</li>\n<li>爱站网</li>\n<li>站长工具</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>网站常用的SEO优化方式</p>","more":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ol>\n<li>SEO 搜索引擎优化 免费</li>\n<li>SEM 搜索引擎营销 收费</li>\n</ol>\n<h4 id=\"SEO排名机制\"><a href=\"#SEO排名机制\" class=\"headerlink\" title=\"SEO排名机制\"></a>SEO排名机制</h4><ol>\n<li>搜索引擎蜘蛛</li>\n<li>权重</li>\n</ol>\n<hr>\n<h3 id=\"权重提升\"><a href=\"#权重提升\" class=\"headerlink\" title=\"权重提升\"></a>权重提升</h3><h4 id=\"SEO优化重要的三要素\"><a href=\"#SEO优化重要的三要素\" class=\"headerlink\" title=\"SEO优化重要的三要素\"></a>SEO优化重要的三要素</h4><ol>\n<li>标题</li>\n<li>关键词   </li>\n<li>描述</li>\n</ol>\n<h4 id=\"外链-gt-分类抓取进入数据库\"><a href=\"#外链-gt-分类抓取进入数据库\" class=\"headerlink\" title=\"外链  -&gt; 分类抓取进入数据库\"></a>外链  -&gt; 分类抓取进入数据库</h4><ol>\n<li>外链 - 网站于网站之间的连接向导–通过链接去抓取</li>\n<li>互联网是链接与链接实现的一条网络</li>\n<li>与内容相近的网站交换</li>\n<li>其他形式的交换， 例如-灌水式外链【在论坛，贴吧发布链接~】</li>\n</ol>\n<h4 id=\"内链\"><a href=\"#内链\" class=\"headerlink\" title=\"内链\"></a>内链</h4><ol>\n<li>页面链接 【文章关键字链接】– 蜘蛛顺着链接爬来爬去抓取</li>\n<li>优化本站质量、提高流量</li>\n</ol>\n<h4 id=\"内容质量\"><a href=\"#内容质量\" class=\"headerlink\" title=\"内容质量\"></a>内容质量</h4><ol>\n<li>质量高能够提升权重</li>\n<li>更新内容，增加匹配度-保持权重</li>\n<li>原创 【抄袭， 洗稿子， 不长久，搜索引擎算法更新】</li>\n<li>关键词密度 【2% – 8%】 【ps：一篇文章内的关键词链接】</li>\n</ol>\n<h4 id=\"黑帽和沙盒\"><a href=\"#黑帽和沙盒\" class=\"headerlink\" title=\"黑帽和沙盒\"></a>黑帽和沙盒</h4><ol>\n<li>购买外链 【在淘宝等与权重高德网站交换外链】</li>\n<li>垃圾站 【seqing - dubo 等非法大流量网站进行交换】【降权惩罚，关进沙盒，搜索引擎扔进小黑屋】</li>\n<li>黑客行为 【攻击网站，恶意添加外链】</li>\n</ol>\n<h4 id=\"话术设置\"><a href=\"#话术设置\" class=\"headerlink\" title=\"话术设置\"></a>话术设置</h4><p>example：<br>    – 原标题： 前端开发，如何才能高新就业<br>    – 修改话术后： 一个菜鸟前端的百万年薪之路</p>\n<h4 id=\"关键词的挖掘\"><a href=\"#关键词的挖掘\" class=\"headerlink\" title=\"关键词的挖掘\"></a>关键词的挖掘</h4><ol>\n<li><p>头脑风暴</p>\n</li>\n<li><p>利用搜索引擎的相关搜索</p>\n<ul>\n<li>与排名靠前的网站使用相同的关键字， 蹭热度；</li>\n<li>参考相关搜索中的关键词， 调整网站的关键字；</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li>工具-百度指数，对关键词查询</li>\n</ul>\n</li>\n<li>长尾关键词<ul>\n<li>使用关键词竞争对手少，但是也有一定量的关键词， 用户转换率高很多</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"域名的选择\"><a href=\"#域名的选择\" class=\"headerlink\" title=\"域名的选择\"></a>域名的选择</h4><ol>\n<li>后缀的选择<ul>\n<li>.com商业性强，输入自动填入</li>\n</ul>\n</li>\n<li>短域名</li>\n<li>域名语义化</li>\n<li>域名的使用历史查询</li>\n</ol>\n<h4 id=\"seo前端优化方案\"><a href=\"#seo前端优化方案\" class=\"headerlink\" title=\"seo前端优化方案\"></a>seo前端优化方案</h4><ol>\n<li>代码去冗余 【精简代码、 模块化】</li>\n<li>自动化【 工具 webpack~~~ 】</li>\n<li>Html语义化【 P标签, h标签 a标签】</li>\n<li>meat标签<br> – keywords<br> – description</li>\n<li>title标签</li>\n</ol>\n<h4 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h4><ol>\n<li>站群推广<br> –相同类似的网站互相链接，推广</li>\n</ol>\n<hr>\n<h3 id=\"日子分析\"><a href=\"#日子分析\" class=\"headerlink\" title=\"日子分析\"></a>日子分析</h3><h3 id=\"推广工具\"><a href=\"#推广工具\" class=\"headerlink\" title=\"推广工具\"></a>推广工具</h3><ol>\n<li>百度推广</li>\n<li>百度统计</li>\n<li>百度指数</li>\n<li>CNZZ</li>\n<li>爱站网</li>\n<li>站长工具</li>\n</ol>"},{"title":"阮一峰：时间管理的七句话","date":"2017-11-24T01:49:58.000Z","_content":"时间对每一个人来说都是重要的，学会管理时间；\n\n<!-- more -->\n\n### 一、 进程切换非常昂贵，避免多任务，保持单进程。\n\n![图片](/public_s/images/timeManage/0.5021243947689109.png)\n\n不要同时做多件事，结果可能都没做好，还拖长了工作时间。\n\n\n上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。\n\n###  二、研究表明，集中注意力、高效工作，每天最多4小时。\n\n![图片](/public_s/images/timeManage/0.9251521097293676.png)\n\n一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。\n\n上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。\n\n### 三、划分任务的优先级，不要把’急切’当作’重要’。\n![图片](/public_s/images/timeManage/0.530341774969219.png)\n\n你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）\n\n一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。\n\n### 四、起床后，不要查看邮件和微信。\n![图片](/public_s/images/timeManage/0.1174553194175334.png)\n\n早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）\n\n### 五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\n![图片](/public_s/images/timeManage/0.46321933528434545.png)\n\n越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。\n\n### 六、早晨4点起床，到了中午，你就完成了一天的任务。\n![图片](/public_s/images/timeManage/0.7242512129749097.png)\n\n早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。\n\n### 七、你没空时不会做的事情，有空了也不会做。\n![图片](/public_s/images/timeManage/0.419097318675272.png)\n\n\n\n世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。\n\n来源： http://www.techug.com/post/time-management.html","source":"_posts/others/time-manage.md","raw":"---\ntitle: 阮一峰：时间管理的七句话\ntags: [励志]\ncategories: [生活]\ndate: 2017-11-24 09:49:58\n---\n时间对每一个人来说都是重要的，学会管理时间；\n\n<!-- more -->\n\n### 一、 进程切换非常昂贵，避免多任务，保持单进程。\n\n![图片](/public_s/images/timeManage/0.5021243947689109.png)\n\n不要同时做多件事，结果可能都没做好，还拖长了工作时间。\n\n\n上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。\n\n###  二、研究表明，集中注意力、高效工作，每天最多4小时。\n\n![图片](/public_s/images/timeManage/0.9251521097293676.png)\n\n一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。\n\n上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。\n\n### 三、划分任务的优先级，不要把’急切’当作’重要’。\n![图片](/public_s/images/timeManage/0.530341774969219.png)\n\n你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）\n\n一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。\n\n### 四、起床后，不要查看邮件和微信。\n![图片](/public_s/images/timeManage/0.1174553194175334.png)\n\n早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）\n\n### 五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\n![图片](/public_s/images/timeManage/0.46321933528434545.png)\n\n越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。\n\n### 六、早晨4点起床，到了中午，你就完成了一天的任务。\n![图片](/public_s/images/timeManage/0.7242512129749097.png)\n\n早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。\n\n### 七、你没空时不会做的事情，有空了也不会做。\n![图片](/public_s/images/timeManage/0.419097318675272.png)\n\n\n\n世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。\n\n来源： http://www.techug.com/post/time-management.html","slug":"others/time-manage","published":1,"updated":"2018-09-04T13:49:59.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqk000e6ooszpgsgvdn","content":"<p>时间对每一个人来说都是重要的，学会管理时间；</p>\n<a id=\"more\"></a>\n<h3 id=\"一、-进程切换非常昂贵，避免多任务，保持单进程。\"><a href=\"#一、-进程切换非常昂贵，避免多任务，保持单进程。\" class=\"headerlink\" title=\"一、 进程切换非常昂贵，避免多任务，保持单进程。\"></a>一、 进程切换非常昂贵，避免多任务，保持单进程。</h3><p><img src=\"/public_s/images/timeManage/0.5021243947689109.png\" alt=\"图片\"></p>\n<p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p>\n<p>上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。</p>\n<h3 id=\"二、研究表明，集中注意力、高效工作，每天最多4小时。\"><a href=\"#二、研究表明，集中注意力、高效工作，每天最多4小时。\" class=\"headerlink\" title=\"二、研究表明，集中注意力、高效工作，每天最多4小时。\"></a>二、研究表明，集中注意力、高效工作，每天最多4小时。</h3><p><img src=\"/public_s/images/timeManage/0.9251521097293676.png\" alt=\"图片\"></p>\n<p>一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。</p>\n<p>上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。</p>\n<h3 id=\"三、划分任务的优先级，不要把’急切’当作’重要’。\"><a href=\"#三、划分任务的优先级，不要把’急切’当作’重要’。\" class=\"headerlink\" title=\"三、划分任务的优先级，不要把’急切’当作’重要’。\"></a>三、划分任务的优先级，不要把’急切’当作’重要’。</h3><p><img src=\"/public_s/images/timeManage/0.530341774969219.png\" alt=\"图片\"></p>\n<p>你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）</p>\n<p>一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。</p>\n<h3 id=\"四、起床后，不要查看邮件和微信。\"><a href=\"#四、起床后，不要查看邮件和微信。\" class=\"headerlink\" title=\"四、起床后，不要查看邮件和微信。\"></a>四、起床后，不要查看邮件和微信。</h3><p><img src=\"/public_s/images/timeManage/0.1174553194175334.png\" alt=\"图片\"></p>\n<p>早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）</p>\n<h3 id=\"五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\"><a href=\"#五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\" class=\"headerlink\" title=\"五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\"></a>五、避免开会，因为人类已知的最浪费时间的事情，就是开会。</h3><p><img src=\"/public_s/images/timeManage/0.46321933528434545.png\" alt=\"图片\"></p>\n<p>越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。</p>\n<h3 id=\"六、早晨4点起床，到了中午，你就完成了一天的任务。\"><a href=\"#六、早晨4点起床，到了中午，你就完成了一天的任务。\" class=\"headerlink\" title=\"六、早晨4点起床，到了中午，你就完成了一天的任务。\"></a>六、早晨4点起床，到了中午，你就完成了一天的任务。</h3><p><img src=\"/public_s/images/timeManage/0.7242512129749097.png\" alt=\"图片\"></p>\n<p>早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。</p>\n<h3 id=\"七、你没空时不会做的事情，有空了也不会做。\"><a href=\"#七、你没空时不会做的事情，有空了也不会做。\" class=\"headerlink\" title=\"七、你没空时不会做的事情，有空了也不会做。\"></a>七、你没空时不会做的事情，有空了也不会做。</h3><p><img src=\"/public_s/images/timeManage/0.419097318675272.png\" alt=\"图片\"></p>\n<p>世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。</p>\n<p>来源： <a href=\"http://www.techug.com/post/time-management.html\" target=\"_blank\" rel=\"noopener\">http://www.techug.com/post/time-management.html</a></p>\n","site":{"data":{}},"excerpt":"<p>时间对每一个人来说都是重要的，学会管理时间；</p>","more":"<h3 id=\"一、-进程切换非常昂贵，避免多任务，保持单进程。\"><a href=\"#一、-进程切换非常昂贵，避免多任务，保持单进程。\" class=\"headerlink\" title=\"一、 进程切换非常昂贵，避免多任务，保持单进程。\"></a>一、 进程切换非常昂贵，避免多任务，保持单进程。</h3><p><img src=\"/public_s/images/timeManage/0.5021243947689109.png\" alt=\"图片\"></p>\n<p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p>\n<p>上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。</p>\n<h3 id=\"二、研究表明，集中注意力、高效工作，每天最多4小时。\"><a href=\"#二、研究表明，集中注意力、高效工作，每天最多4小时。\" class=\"headerlink\" title=\"二、研究表明，集中注意力、高效工作，每天最多4小时。\"></a>二、研究表明，集中注意力、高效工作，每天最多4小时。</h3><p><img src=\"/public_s/images/timeManage/0.9251521097293676.png\" alt=\"图片\"></p>\n<p>一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。</p>\n<p>上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。</p>\n<h3 id=\"三、划分任务的优先级，不要把’急切’当作’重要’。\"><a href=\"#三、划分任务的优先级，不要把’急切’当作’重要’。\" class=\"headerlink\" title=\"三、划分任务的优先级，不要把’急切’当作’重要’。\"></a>三、划分任务的优先级，不要把’急切’当作’重要’。</h3><p><img src=\"/public_s/images/timeManage/0.530341774969219.png\" alt=\"图片\"></p>\n<p>你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）</p>\n<p>一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。</p>\n<h3 id=\"四、起床后，不要查看邮件和微信。\"><a href=\"#四、起床后，不要查看邮件和微信。\" class=\"headerlink\" title=\"四、起床后，不要查看邮件和微信。\"></a>四、起床后，不要查看邮件和微信。</h3><p><img src=\"/public_s/images/timeManage/0.1174553194175334.png\" alt=\"图片\"></p>\n<p>早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）</p>\n<h3 id=\"五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\"><a href=\"#五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\" class=\"headerlink\" title=\"五、避免开会，因为人类已知的最浪费时间的事情，就是开会。\"></a>五、避免开会，因为人类已知的最浪费时间的事情，就是开会。</h3><p><img src=\"/public_s/images/timeManage/0.46321933528434545.png\" alt=\"图片\"></p>\n<p>越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。</p>\n<h3 id=\"六、早晨4点起床，到了中午，你就完成了一天的任务。\"><a href=\"#六、早晨4点起床，到了中午，你就完成了一天的任务。\" class=\"headerlink\" title=\"六、早晨4点起床，到了中午，你就完成了一天的任务。\"></a>六、早晨4点起床，到了中午，你就完成了一天的任务。</h3><p><img src=\"/public_s/images/timeManage/0.7242512129749097.png\" alt=\"图片\"></p>\n<p>早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。</p>\n<h3 id=\"七、你没空时不会做的事情，有空了也不会做。\"><a href=\"#七、你没空时不会做的事情，有空了也不会做。\" class=\"headerlink\" title=\"七、你没空时不会做的事情，有空了也不会做。\"></a>七、你没空时不会做的事情，有空了也不会做。</h3><p><img src=\"/public_s/images/timeManage/0.419097318675272.png\" alt=\"图片\"></p>\n<p>世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。</p>\n<p>来源： <a href=\"http://www.techug.com/post/time-management.html\" target=\"_blank\" rel=\"noopener\">http://www.techug.com/post/time-management.html</a></p>"},{"title":"前端知识地图","date":"2018-07-06T03:57:58.000Z","_content":"分类整理前端开发的一些知识点\n\n<!-- more -->\n#### 浏览器缓存（http缓存）\n\n1. [面试精选之http缓存](https://juejin.im/post/5b3c87386fb9a04f9a5cb037)\n2. [这一次,让我们再深入一点 - HTTP概述](https://juejin.im/post/5a4c3dec51882512b7300b69)\n3. [面试 -- 网络 HTTP](https://juejin.im/post/5872309261ff4b005c4580d4)\n\n#### 网站性能优化\n1. [web前端性能优化-3方面](https://juejin.im/post/5a6941e1f265da3e33048429)\n2. [网站性能优化实践总结](https://www.jianshu.com/p/5e837e646c2f)\n\n#### 移动端开发\n\n1. [移动端常见bug汇总001](https://juejin.im/post/5af918636fb9a07ac5603ecb)\n2. [touchstart与click不得不说的故事](https://juejin.im/post/5aca0c1b6fb9a028d208377e)\n3. [移动端滚动穿透解决方案](https://juejin.im/post/5abf1c69f265da239706fcb8)\n4. [H5手机端开发问题汇总及解决方案](https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/)\n\n\n\n#### VUE专场\n\n1. [Vue 面试中常问知识点整理](http://web.jobbole.com/95195/)\n2. [JavaScript之实现一个简单的Vue](http://web.jobbole.com/95197/)\n3. [vue与react的区别](https://juejin.im/post/5b8b56e3f265da434c1f5f76)\n4. [Vue 项目里戳中你痛点的问题及解决办法](https://juejin.im/post/5b174de8f265da6e410e0b4e)\n#### Promise\n\n1. [Promise实现原理（附源码）](http://web.jobbole.com/95198/)\n2. [Promise 迷你书](http://liubin.org/promises-book/#ch2-promise-resolve)\n3. [理解 Promise 的工作原理](https://cnodejs.org/topic/569c8226adf526da2aeb23fd)\n4. [Node.js最新技术栈之Promise篇](https://cnodejs.org/topic/560dbc826a1ed28204a1e7de)\n\n#### ES6\n1. [通过示例来学习ES2016, 2017, 2018的新特性](https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/)\n\n#### webpack学习\n1. [webpack小书](http://webpack.wuhaolin.cn/)\n2. [webpack【gitbook】](https://fakefish.github.io/react-webpack-cookbook/index.html)\n\n#### 面试经验\n\n- . [总结了17年初到18年初百场前端面试的面试经验-含答案](https://juejin.im/post/5b44a485e51d4519945fb6b7)\n1. [从输入URL到页面加载的过程](https://juejin.im/post/5aa5cb846fb9a028e25d2fb1)\n2. [一些基础的前端技术面试问题](https://juejin.im/entry/57b68b8b0a2b58005c8270eb)\n3. [2017年前端面试题整理汇总100题](https://juejin.im/post/5b1666fde51d4506bb3a6513)\n4. [最全前端开发面试问题及答案整理](https://juejin.im/entry/56f06612731956005d3b6795)\n5. [缓存详解](https://juejin.im/entry/5b121499f265da6e225cdded)\n6. [雅虎前端优化的35条军规 - 咸鱼老弟 - 博客园](https://juejin.im/entry/5b02336a51882542682e80c0)\n7. [记一次凉凉的小米面试](https://juejin.im/post/5b4d543ce51d4519610dea67)\n\n8. [近百高频知识点，十万余字，地表最强前端面试图谱了解下](https://juejin.im/post/5b4a9136f265da0f990d49cb)\n9. [不要再问我跨域的问题了](http://web.jobbole.com/94928/)\n10. []()\n11. []()","source":"_posts/study/fontknownageMap.md","raw":"---\ntitle: 前端知识地图\ntags: [前端分类]\ncategories: [前端分类总结]\ndate: 2018-07-06 11:57:58\n---\n分类整理前端开发的一些知识点\n\n<!-- more -->\n#### 浏览器缓存（http缓存）\n\n1. [面试精选之http缓存](https://juejin.im/post/5b3c87386fb9a04f9a5cb037)\n2. [这一次,让我们再深入一点 - HTTP概述](https://juejin.im/post/5a4c3dec51882512b7300b69)\n3. [面试 -- 网络 HTTP](https://juejin.im/post/5872309261ff4b005c4580d4)\n\n#### 网站性能优化\n1. [web前端性能优化-3方面](https://juejin.im/post/5a6941e1f265da3e33048429)\n2. [网站性能优化实践总结](https://www.jianshu.com/p/5e837e646c2f)\n\n#### 移动端开发\n\n1. [移动端常见bug汇总001](https://juejin.im/post/5af918636fb9a07ac5603ecb)\n2. [touchstart与click不得不说的故事](https://juejin.im/post/5aca0c1b6fb9a028d208377e)\n3. [移动端滚动穿透解决方案](https://juejin.im/post/5abf1c69f265da239706fcb8)\n4. [H5手机端开发问题汇总及解决方案](https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/)\n\n\n\n#### VUE专场\n\n1. [Vue 面试中常问知识点整理](http://web.jobbole.com/95195/)\n2. [JavaScript之实现一个简单的Vue](http://web.jobbole.com/95197/)\n3. [vue与react的区别](https://juejin.im/post/5b8b56e3f265da434c1f5f76)\n4. [Vue 项目里戳中你痛点的问题及解决办法](https://juejin.im/post/5b174de8f265da6e410e0b4e)\n#### Promise\n\n1. [Promise实现原理（附源码）](http://web.jobbole.com/95198/)\n2. [Promise 迷你书](http://liubin.org/promises-book/#ch2-promise-resolve)\n3. [理解 Promise 的工作原理](https://cnodejs.org/topic/569c8226adf526da2aeb23fd)\n4. [Node.js最新技术栈之Promise篇](https://cnodejs.org/topic/560dbc826a1ed28204a1e7de)\n\n#### ES6\n1. [通过示例来学习ES2016, 2017, 2018的新特性](https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/)\n\n#### webpack学习\n1. [webpack小书](http://webpack.wuhaolin.cn/)\n2. [webpack【gitbook】](https://fakefish.github.io/react-webpack-cookbook/index.html)\n\n#### 面试经验\n\n- . [总结了17年初到18年初百场前端面试的面试经验-含答案](https://juejin.im/post/5b44a485e51d4519945fb6b7)\n1. [从输入URL到页面加载的过程](https://juejin.im/post/5aa5cb846fb9a028e25d2fb1)\n2. [一些基础的前端技术面试问题](https://juejin.im/entry/57b68b8b0a2b58005c8270eb)\n3. [2017年前端面试题整理汇总100题](https://juejin.im/post/5b1666fde51d4506bb3a6513)\n4. [最全前端开发面试问题及答案整理](https://juejin.im/entry/56f06612731956005d3b6795)\n5. [缓存详解](https://juejin.im/entry/5b121499f265da6e225cdded)\n6. [雅虎前端优化的35条军规 - 咸鱼老弟 - 博客园](https://juejin.im/entry/5b02336a51882542682e80c0)\n7. [记一次凉凉的小米面试](https://juejin.im/post/5b4d543ce51d4519610dea67)\n\n8. [近百高频知识点，十万余字，地表最强前端面试图谱了解下](https://juejin.im/post/5b4a9136f265da0f990d49cb)\n9. [不要再问我跨域的问题了](http://web.jobbole.com/94928/)\n10. []()\n11. []()","slug":"study/fontknownageMap","published":1,"updated":"2018-11-14T08:35:22.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqm000i6oospmo4ycju","content":"<p>分类整理前端开发的一些知识点</p>\n<a id=\"more\"></a>\n<h4 id=\"浏览器缓存（http缓存）\"><a href=\"#浏览器缓存（http缓存）\" class=\"headerlink\" title=\"浏览器缓存（http缓存）\"></a>浏览器缓存（http缓存）</h4><ol>\n<li><a href=\"https://juejin.im/post/5b3c87386fb9a04f9a5cb037\" target=\"_blank\" rel=\"noopener\">面试精选之http缓存</a></li>\n<li><a href=\"https://juejin.im/post/5a4c3dec51882512b7300b69\" target=\"_blank\" rel=\"noopener\">这一次,让我们再深入一点 - HTTP概述</a></li>\n<li><a href=\"https://juejin.im/post/5872309261ff4b005c4580d4\" target=\"_blank\" rel=\"noopener\">面试 – 网络 HTTP</a></li>\n</ol>\n<h4 id=\"网站性能优化\"><a href=\"#网站性能优化\" class=\"headerlink\" title=\"网站性能优化\"></a>网站性能优化</h4><ol>\n<li><a href=\"https://juejin.im/post/5a6941e1f265da3e33048429\" target=\"_blank\" rel=\"noopener\">web前端性能优化-3方面</a></li>\n<li><a href=\"https://www.jianshu.com/p/5e837e646c2f\" target=\"_blank\" rel=\"noopener\">网站性能优化实践总结</a></li>\n</ol>\n<h4 id=\"移动端开发\"><a href=\"#移动端开发\" class=\"headerlink\" title=\"移动端开发\"></a>移动端开发</h4><ol>\n<li><a href=\"https://juejin.im/post/5af918636fb9a07ac5603ecb\" target=\"_blank\" rel=\"noopener\">移动端常见bug汇总001</a></li>\n<li><a href=\"https://juejin.im/post/5aca0c1b6fb9a028d208377e\" target=\"_blank\" rel=\"noopener\">touchstart与click不得不说的故事</a></li>\n<li><a href=\"https://juejin.im/post/5abf1c69f265da239706fcb8\" target=\"_blank\" rel=\"noopener\">移动端滚动穿透解决方案</a></li>\n<li><a href=\"https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\" target=\"_blank\" rel=\"noopener\">H5手机端开发问题汇总及解决方案</a></li>\n</ol>\n<h4 id=\"VUE专场\"><a href=\"#VUE专场\" class=\"headerlink\" title=\"VUE专场\"></a>VUE专场</h4><ol>\n<li><a href=\"http://web.jobbole.com/95195/\" target=\"_blank\" rel=\"noopener\">Vue 面试中常问知识点整理</a></li>\n<li><a href=\"http://web.jobbole.com/95197/\" target=\"_blank\" rel=\"noopener\">JavaScript之实现一个简单的Vue</a></li>\n<li><a href=\"https://juejin.im/post/5b8b56e3f265da434c1f5f76\" target=\"_blank\" rel=\"noopener\">vue与react的区别</a></li>\n<li><p><a href=\"https://juejin.im/post/5b174de8f265da6e410e0b4e\" target=\"_blank\" rel=\"noopener\">Vue 项目里戳中你痛点的问题及解决办法</a></p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4></li>\n<li><p><a href=\"http://web.jobbole.com/95198/\" target=\"_blank\" rel=\"noopener\">Promise实现原理（附源码）</a></p>\n</li>\n<li><a href=\"http://liubin.org/promises-book/#ch2-promise-resolve\" target=\"_blank\" rel=\"noopener\">Promise 迷你书</a></li>\n<li><a href=\"https://cnodejs.org/topic/569c8226adf526da2aeb23fd\" target=\"_blank\" rel=\"noopener\">理解 Promise 的工作原理</a></li>\n<li><a href=\"https://cnodejs.org/topic/560dbc826a1ed28204a1e7de\" target=\"_blank\" rel=\"noopener\">Node.js最新技术栈之Promise篇</a></li>\n</ol>\n<h4 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h4><ol>\n<li><a href=\"https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/\" target=\"_blank\" rel=\"noopener\">通过示例来学习ES2016, 2017, 2018的新特性</a></li>\n</ol>\n<h4 id=\"webpack学习\"><a href=\"#webpack学习\" class=\"headerlink\" title=\"webpack学习\"></a>webpack学习</h4><ol>\n<li><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">webpack小书</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/index.html\" target=\"_blank\" rel=\"noopener\">webpack【gitbook】</a></li>\n</ol>\n<h4 id=\"面试经验\"><a href=\"#面试经验\" class=\"headerlink\" title=\"面试经验\"></a>面试经验</h4><ul>\n<li>. <a href=\"https://juejin.im/post/5b44a485e51d4519945fb6b7\" target=\"_blank\" rel=\"noopener\">总结了17年初到18年初百场前端面试的面试经验-含答案</a></li>\n</ul>\n<ol>\n<li><a href=\"https://juejin.im/post/5aa5cb846fb9a028e25d2fb1\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程</a></li>\n<li><a href=\"https://juejin.im/entry/57b68b8b0a2b58005c8270eb\" target=\"_blank\" rel=\"noopener\">一些基础的前端技术面试问题</a></li>\n<li><a href=\"https://juejin.im/post/5b1666fde51d4506bb3a6513\" target=\"_blank\" rel=\"noopener\">2017年前端面试题整理汇总100题</a></li>\n<li><a href=\"https://juejin.im/entry/56f06612731956005d3b6795\" target=\"_blank\" rel=\"noopener\">最全前端开发面试问题及答案整理</a></li>\n<li><a href=\"https://juejin.im/entry/5b121499f265da6e225cdded\" target=\"_blank\" rel=\"noopener\">缓存详解</a></li>\n<li><a href=\"https://juejin.im/entry/5b02336a51882542682e80c0\" target=\"_blank\" rel=\"noopener\">雅虎前端优化的35条军规 - 咸鱼老弟 - 博客园</a></li>\n<li><p><a href=\"https://juejin.im/post/5b4d543ce51d4519610dea67\" target=\"_blank\" rel=\"noopener\">记一次凉凉的小米面试</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5b4a9136f265da0f990d49cb\" target=\"_blank\" rel=\"noopener\">近百高频知识点，十万余字，地表最强前端面试图谱了解下</a></p>\n</li>\n<li><a href=\"http://web.jobbole.com/94928/\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>分类整理前端开发的一些知识点</p>","more":"<h4 id=\"浏览器缓存（http缓存）\"><a href=\"#浏览器缓存（http缓存）\" class=\"headerlink\" title=\"浏览器缓存（http缓存）\"></a>浏览器缓存（http缓存）</h4><ol>\n<li><a href=\"https://juejin.im/post/5b3c87386fb9a04f9a5cb037\" target=\"_blank\" rel=\"noopener\">面试精选之http缓存</a></li>\n<li><a href=\"https://juejin.im/post/5a4c3dec51882512b7300b69\" target=\"_blank\" rel=\"noopener\">这一次,让我们再深入一点 - HTTP概述</a></li>\n<li><a href=\"https://juejin.im/post/5872309261ff4b005c4580d4\" target=\"_blank\" rel=\"noopener\">面试 – 网络 HTTP</a></li>\n</ol>\n<h4 id=\"网站性能优化\"><a href=\"#网站性能优化\" class=\"headerlink\" title=\"网站性能优化\"></a>网站性能优化</h4><ol>\n<li><a href=\"https://juejin.im/post/5a6941e1f265da3e33048429\" target=\"_blank\" rel=\"noopener\">web前端性能优化-3方面</a></li>\n<li><a href=\"https://www.jianshu.com/p/5e837e646c2f\" target=\"_blank\" rel=\"noopener\">网站性能优化实践总结</a></li>\n</ol>\n<h4 id=\"移动端开发\"><a href=\"#移动端开发\" class=\"headerlink\" title=\"移动端开发\"></a>移动端开发</h4><ol>\n<li><a href=\"https://juejin.im/post/5af918636fb9a07ac5603ecb\" target=\"_blank\" rel=\"noopener\">移动端常见bug汇总001</a></li>\n<li><a href=\"https://juejin.im/post/5aca0c1b6fb9a028d208377e\" target=\"_blank\" rel=\"noopener\">touchstart与click不得不说的故事</a></li>\n<li><a href=\"https://juejin.im/post/5abf1c69f265da239706fcb8\" target=\"_blank\" rel=\"noopener\">移动端滚动穿透解决方案</a></li>\n<li><a href=\"https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/\" target=\"_blank\" rel=\"noopener\">H5手机端开发问题汇总及解决方案</a></li>\n</ol>\n<h4 id=\"VUE专场\"><a href=\"#VUE专场\" class=\"headerlink\" title=\"VUE专场\"></a>VUE专场</h4><ol>\n<li><a href=\"http://web.jobbole.com/95195/\" target=\"_blank\" rel=\"noopener\">Vue 面试中常问知识点整理</a></li>\n<li><a href=\"http://web.jobbole.com/95197/\" target=\"_blank\" rel=\"noopener\">JavaScript之实现一个简单的Vue</a></li>\n<li><a href=\"https://juejin.im/post/5b8b56e3f265da434c1f5f76\" target=\"_blank\" rel=\"noopener\">vue与react的区别</a></li>\n<li><p><a href=\"https://juejin.im/post/5b174de8f265da6e410e0b4e\" target=\"_blank\" rel=\"noopener\">Vue 项目里戳中你痛点的问题及解决办法</a></p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4></li>\n<li><p><a href=\"http://web.jobbole.com/95198/\" target=\"_blank\" rel=\"noopener\">Promise实现原理（附源码）</a></p>\n</li>\n<li><a href=\"http://liubin.org/promises-book/#ch2-promise-resolve\" target=\"_blank\" rel=\"noopener\">Promise 迷你书</a></li>\n<li><a href=\"https://cnodejs.org/topic/569c8226adf526da2aeb23fd\" target=\"_blank\" rel=\"noopener\">理解 Promise 的工作原理</a></li>\n<li><a href=\"https://cnodejs.org/topic/560dbc826a1ed28204a1e7de\" target=\"_blank\" rel=\"noopener\">Node.js最新技术栈之Promise篇</a></li>\n</ol>\n<h4 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h4><ol>\n<li><a href=\"https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/\" target=\"_blank\" rel=\"noopener\">通过示例来学习ES2016, 2017, 2018的新特性</a></li>\n</ol>\n<h4 id=\"webpack学习\"><a href=\"#webpack学习\" class=\"headerlink\" title=\"webpack学习\"></a>webpack学习</h4><ol>\n<li><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">webpack小书</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/index.html\" target=\"_blank\" rel=\"noopener\">webpack【gitbook】</a></li>\n</ol>\n<h4 id=\"面试经验\"><a href=\"#面试经验\" class=\"headerlink\" title=\"面试经验\"></a>面试经验</h4><ul>\n<li>. <a href=\"https://juejin.im/post/5b44a485e51d4519945fb6b7\" target=\"_blank\" rel=\"noopener\">总结了17年初到18年初百场前端面试的面试经验-含答案</a></li>\n</ul>\n<ol>\n<li><a href=\"https://juejin.im/post/5aa5cb846fb9a028e25d2fb1\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程</a></li>\n<li><a href=\"https://juejin.im/entry/57b68b8b0a2b58005c8270eb\" target=\"_blank\" rel=\"noopener\">一些基础的前端技术面试问题</a></li>\n<li><a href=\"https://juejin.im/post/5b1666fde51d4506bb3a6513\" target=\"_blank\" rel=\"noopener\">2017年前端面试题整理汇总100题</a></li>\n<li><a href=\"https://juejin.im/entry/56f06612731956005d3b6795\" target=\"_blank\" rel=\"noopener\">最全前端开发面试问题及答案整理</a></li>\n<li><a href=\"https://juejin.im/entry/5b121499f265da6e225cdded\" target=\"_blank\" rel=\"noopener\">缓存详解</a></li>\n<li><a href=\"https://juejin.im/entry/5b02336a51882542682e80c0\" target=\"_blank\" rel=\"noopener\">雅虎前端优化的35条军规 - 咸鱼老弟 - 博客园</a></li>\n<li><p><a href=\"https://juejin.im/post/5b4d543ce51d4519610dea67\" target=\"_blank\" rel=\"noopener\">记一次凉凉的小米面试</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5b4a9136f265da0f990d49cb\" target=\"_blank\" rel=\"noopener\">近百高频知识点，十万余字，地表最强前端面试图谱了解下</a></p>\n</li>\n<li><a href=\"http://web.jobbole.com/94928/\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ol>"},{"title":"九月读到的一些好文章","date":"2018-09-07T01:48:13.000Z","_content":"tips: september\n<!-- more -->\n1. [vue移动端适配 + mint-ui](https://juejin.im/post/5b8ff8b3e51d450e5a73c033)\n2. [原生JS实现轮播图--第二章动画实现](https://juejin.im/post/5b8d4171f265da436e74e5c1)\n3. [vue与react的区别](https://juejin.im/post/5b8b56e3f265da434c1f5f76)\n4. [彻底搞懂word-break、word-wrap、white-space](https://juejin.im/post/5b8905456fb9a01a105966b4)\n\n#### 富文本编辑器\n\n1. [wangEditor](http://www.wangeditor.com/index.html)\n\nVUE\n\n1. [vuex源码解读-大搜车](https://blog.souche.com/vuex-yuan-ma-jie-xi/)","source":"_posts/study/september.md","raw":"---\ntitle: 九月读到的一些好文章\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-09-07 09:48:13\n---\ntips: september\n<!-- more -->\n1. [vue移动端适配 + mint-ui](https://juejin.im/post/5b8ff8b3e51d450e5a73c033)\n2. [原生JS实现轮播图--第二章动画实现](https://juejin.im/post/5b8d4171f265da436e74e5c1)\n3. [vue与react的区别](https://juejin.im/post/5b8b56e3f265da434c1f5f76)\n4. [彻底搞懂word-break、word-wrap、white-space](https://juejin.im/post/5b8905456fb9a01a105966b4)\n\n#### 富文本编辑器\n\n1. [wangEditor](http://www.wangeditor.com/index.html)\n\nVUE\n\n1. [vuex源码解读-大搜车](https://blog.souche.com/vuex-yuan-ma-jie-xi/)","slug":"study/september","published":1,"updated":"2018-11-14T08:19:25.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqo000k6oos056fkzvd","content":"<p>tips: september<br><a id=\"more\"></a></p>\n<ol>\n<li><a href=\"https://juejin.im/post/5b8ff8b3e51d450e5a73c033\" target=\"_blank\" rel=\"noopener\">vue移动端适配 + mint-ui</a></li>\n<li><a href=\"https://juejin.im/post/5b8d4171f265da436e74e5c1\" target=\"_blank\" rel=\"noopener\">原生JS实现轮播图–第二章动画实现</a></li>\n<li><a href=\"https://juejin.im/post/5b8b56e3f265da434c1f5f76\" target=\"_blank\" rel=\"noopener\">vue与react的区别</a></li>\n<li><a href=\"https://juejin.im/post/5b8905456fb9a01a105966b4\" target=\"_blank\" rel=\"noopener\">彻底搞懂word-break、word-wrap、white-space</a></li>\n</ol>\n<h4 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h4><ol>\n<li><a href=\"http://www.wangeditor.com/index.html\" target=\"_blank\" rel=\"noopener\">wangEditor</a></li>\n</ol>\n<p>VUE</p>\n<ol>\n<li><a href=\"https://blog.souche.com/vuex-yuan-ma-jie-xi/\" target=\"_blank\" rel=\"noopener\">vuex源码解读-大搜车</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>tips: september<br>","more":"</p>\n<ol>\n<li><a href=\"https://juejin.im/post/5b8ff8b3e51d450e5a73c033\" target=\"_blank\" rel=\"noopener\">vue移动端适配 + mint-ui</a></li>\n<li><a href=\"https://juejin.im/post/5b8d4171f265da436e74e5c1\" target=\"_blank\" rel=\"noopener\">原生JS实现轮播图–第二章动画实现</a></li>\n<li><a href=\"https://juejin.im/post/5b8b56e3f265da434c1f5f76\" target=\"_blank\" rel=\"noopener\">vue与react的区别</a></li>\n<li><a href=\"https://juejin.im/post/5b8905456fb9a01a105966b4\" target=\"_blank\" rel=\"noopener\">彻底搞懂word-break、word-wrap、white-space</a></li>\n</ol>\n<h4 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h4><ol>\n<li><a href=\"http://www.wangeditor.com/index.html\" target=\"_blank\" rel=\"noopener\">wangEditor</a></li>\n</ol>\n<p>VUE</p>\n<ol>\n<li><a href=\"https://blog.souche.com/vuex-yuan-ma-jie-xi/\" target=\"_blank\" rel=\"noopener\">vuex源码解读-大搜车</a></li>\n</ol>"},{"title":"2018上半年学习资料整理&学习计划[5]","date":"2018-05-15T07:36:58.000Z","_content":"每天收集一点，每天学习一点\n\n<!-- more -->\n### 前端\n\n1. [印记中文网](https://docschina.org/)\n\n#### CSS\n\n1. [css3视频教程](http://www.php.cn/course/825.html)\n\n#### NestJS\n\n1. [NestJS中文网](https://docs.nestjs.cn/4.6/customdecorators)\n2. [验证器class-validator](https://github.com/typestack/class-validator)\n3. [数据库api](http://typeorm.io/#/select-query-builder)","source":"_posts/study/study2014-05.md","raw":"---\ntitle: 2018上半年学习资料整理&学习计划[5]\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-05-15 15:36:58\n---\n每天收集一点，每天学习一点\n\n<!-- more -->\n### 前端\n\n1. [印记中文网](https://docschina.org/)\n\n#### CSS\n\n1. [css3视频教程](http://www.php.cn/course/825.html)\n\n#### NestJS\n\n1. [NestJS中文网](https://docs.nestjs.cn/4.6/customdecorators)\n2. [验证器class-validator](https://github.com/typestack/class-validator)\n3. [数据库api](http://typeorm.io/#/select-query-builder)","slug":"study/study2014-05","published":1,"updated":"2018-11-14T08:04:59.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqp000o6oos0rod7l9h","content":"<p>每天收集一点，每天学习一点</p>\n<a id=\"more\"></a>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ol>\n<li><a href=\"https://docschina.org/\" target=\"_blank\" rel=\"noopener\">印记中文网</a></li>\n</ol>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><ol>\n<li><a href=\"http://www.php.cn/course/825.html\" target=\"_blank\" rel=\"noopener\">css3视频教程</a></li>\n</ol>\n<h4 id=\"NestJS\"><a href=\"#NestJS\" class=\"headerlink\" title=\"NestJS\"></a>NestJS</h4><ol>\n<li><a href=\"https://docs.nestjs.cn/4.6/customdecorators\" target=\"_blank\" rel=\"noopener\">NestJS中文网</a></li>\n<li><a href=\"https://github.com/typestack/class-validator\" target=\"_blank\" rel=\"noopener\">验证器class-validator</a></li>\n<li><a href=\"http://typeorm.io/#/select-query-builder\" target=\"_blank\" rel=\"noopener\">数据库api</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>每天收集一点，每天学习一点</p>","more":"<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ol>\n<li><a href=\"https://docschina.org/\" target=\"_blank\" rel=\"noopener\">印记中文网</a></li>\n</ol>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><ol>\n<li><a href=\"http://www.php.cn/course/825.html\" target=\"_blank\" rel=\"noopener\">css3视频教程</a></li>\n</ol>\n<h4 id=\"NestJS\"><a href=\"#NestJS\" class=\"headerlink\" title=\"NestJS\"></a>NestJS</h4><ol>\n<li><a href=\"https://docs.nestjs.cn/4.6/customdecorators\" target=\"_blank\" rel=\"noopener\">NestJS中文网</a></li>\n<li><a href=\"https://github.com/typestack/class-validator\" target=\"_blank\" rel=\"noopener\">验证器class-validator</a></li>\n<li><a href=\"http://typeorm.io/#/select-query-builder\" target=\"_blank\" rel=\"noopener\">数据库api</a></li>\n</ol>"},{"title":"2018上半年学习资料整理&学习计划[7]","date":"2018-07-02T02:57:58.000Z","_content":"七月\n\n<!-- more -->\n#### 学习博客\n\n1. [王海燕的博客](https://xiaowangmm2.github.io/)\n\n#### vue学习\n\n1. [滴滴前端学习课程](http://www.imooc.com/t/3017249#Course)\n2. [vue2.0源码学习](https://github.com/DDFE/DDFE-blog/issues/8)\n\n### 在线工具\n\n1. [在线工具](https://tool.lu/)\n\n#### 掘金2018上半年整理\n\n1. [2018上半年掘金微信群日报优质文章合集：前端篇](https://juejin.im/post/5b3adfe2e51d4555b17e85df)\n\n#### Nginx跨域配置\n\n1. [Nginx通过CORS实现跨域](http://www.yunweipai.com/archives/9381.html)\n\n#### vue的坑\n\n1. [Vue 项目里戳中你痛点的问题及解决办法](https://juejin.im/post/5b174de8f265da6e410e0b4e)\n\n#### 小程序\n 1. [一个json帮你完成分享朋友圈图片](https://juejin.im/post/5b481d216fb9a04fdb16a88f)\n\n#### \n1. [通过示例来学习ES2016, 2017, 2018的新特性](https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/)","source":"_posts/study/study2014-07.md","raw":"---\ntitle: 2018上半年学习资料整理&学习计划[7]\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-07-02 10:57:58\n---\n七月\n\n<!-- more -->\n#### 学习博客\n\n1. [王海燕的博客](https://xiaowangmm2.github.io/)\n\n#### vue学习\n\n1. [滴滴前端学习课程](http://www.imooc.com/t/3017249#Course)\n2. [vue2.0源码学习](https://github.com/DDFE/DDFE-blog/issues/8)\n\n### 在线工具\n\n1. [在线工具](https://tool.lu/)\n\n#### 掘金2018上半年整理\n\n1. [2018上半年掘金微信群日报优质文章合集：前端篇](https://juejin.im/post/5b3adfe2e51d4555b17e85df)\n\n#### Nginx跨域配置\n\n1. [Nginx通过CORS实现跨域](http://www.yunweipai.com/archives/9381.html)\n\n#### vue的坑\n\n1. [Vue 项目里戳中你痛点的问题及解决办法](https://juejin.im/post/5b174de8f265da6e410e0b4e)\n\n#### 小程序\n 1. [一个json帮你完成分享朋友圈图片](https://juejin.im/post/5b481d216fb9a04fdb16a88f)\n\n#### \n1. [通过示例来学习ES2016, 2017, 2018的新特性](https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/)","slug":"study/study2014-07","published":1,"updated":"2018-09-04T13:49:59.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqr000q6oos2njkt8g6","content":"<p>七月</p>\n<a id=\"more\"></a>\n<h4 id=\"学习博客\"><a href=\"#学习博客\" class=\"headerlink\" title=\"学习博客\"></a>学习博客</h4><ol>\n<li><a href=\"https://xiaowangmm2.github.io/\" target=\"_blank\" rel=\"noopener\">王海燕的博客</a></li>\n</ol>\n<h4 id=\"vue学习\"><a href=\"#vue学习\" class=\"headerlink\" title=\"vue学习\"></a>vue学习</h4><ol>\n<li><a href=\"http://www.imooc.com/t/3017249#Course\" target=\"_blank\" rel=\"noopener\">滴滴前端学习课程</a></li>\n<li><a href=\"https://github.com/DDFE/DDFE-blog/issues/8\" target=\"_blank\" rel=\"noopener\">vue2.0源码学习</a></li>\n</ol>\n<h3 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h3><ol>\n<li><a href=\"https://tool.lu/\" target=\"_blank\" rel=\"noopener\">在线工具</a></li>\n</ol>\n<h4 id=\"掘金2018上半年整理\"><a href=\"#掘金2018上半年整理\" class=\"headerlink\" title=\"掘金2018上半年整理\"></a>掘金2018上半年整理</h4><ol>\n<li><a href=\"https://juejin.im/post/5b3adfe2e51d4555b17e85df\" target=\"_blank\" rel=\"noopener\">2018上半年掘金微信群日报优质文章合集：前端篇</a></li>\n</ol>\n<h4 id=\"Nginx跨域配置\"><a href=\"#Nginx跨域配置\" class=\"headerlink\" title=\"Nginx跨域配置\"></a>Nginx跨域配置</h4><ol>\n<li><a href=\"http://www.yunweipai.com/archives/9381.html\" target=\"_blank\" rel=\"noopener\">Nginx通过CORS实现跨域</a></li>\n</ol>\n<h4 id=\"vue的坑\"><a href=\"#vue的坑\" class=\"headerlink\" title=\"vue的坑\"></a>vue的坑</h4><ol>\n<li><a href=\"https://juejin.im/post/5b174de8f265da6e410e0b4e\" target=\"_blank\" rel=\"noopener\">Vue 项目里戳中你痛点的问题及解决办法</a></li>\n</ol>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ol>\n<li><a href=\"https://juejin.im/post/5b481d216fb9a04fdb16a88f\" target=\"_blank\" rel=\"noopener\">一个json帮你完成分享朋友圈图片</a></li>\n</ol>\n<p>#### </p>\n<ol>\n<li><a href=\"https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/\" target=\"_blank\" rel=\"noopener\">通过示例来学习ES2016, 2017, 2018的新特性</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>七月</p>","more":"<h4 id=\"学习博客\"><a href=\"#学习博客\" class=\"headerlink\" title=\"学习博客\"></a>学习博客</h4><ol>\n<li><a href=\"https://xiaowangmm2.github.io/\" target=\"_blank\" rel=\"noopener\">王海燕的博客</a></li>\n</ol>\n<h4 id=\"vue学习\"><a href=\"#vue学习\" class=\"headerlink\" title=\"vue学习\"></a>vue学习</h4><ol>\n<li><a href=\"http://www.imooc.com/t/3017249#Course\" target=\"_blank\" rel=\"noopener\">滴滴前端学习课程</a></li>\n<li><a href=\"https://github.com/DDFE/DDFE-blog/issues/8\" target=\"_blank\" rel=\"noopener\">vue2.0源码学习</a></li>\n</ol>\n<h3 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h3><ol>\n<li><a href=\"https://tool.lu/\" target=\"_blank\" rel=\"noopener\">在线工具</a></li>\n</ol>\n<h4 id=\"掘金2018上半年整理\"><a href=\"#掘金2018上半年整理\" class=\"headerlink\" title=\"掘金2018上半年整理\"></a>掘金2018上半年整理</h4><ol>\n<li><a href=\"https://juejin.im/post/5b3adfe2e51d4555b17e85df\" target=\"_blank\" rel=\"noopener\">2018上半年掘金微信群日报优质文章合集：前端篇</a></li>\n</ol>\n<h4 id=\"Nginx跨域配置\"><a href=\"#Nginx跨域配置\" class=\"headerlink\" title=\"Nginx跨域配置\"></a>Nginx跨域配置</h4><ol>\n<li><a href=\"http://www.yunweipai.com/archives/9381.html\" target=\"_blank\" rel=\"noopener\">Nginx通过CORS实现跨域</a></li>\n</ol>\n<h4 id=\"vue的坑\"><a href=\"#vue的坑\" class=\"headerlink\" title=\"vue的坑\"></a>vue的坑</h4><ol>\n<li><a href=\"https://juejin.im/post/5b174de8f265da6e410e0b4e\" target=\"_blank\" rel=\"noopener\">Vue 项目里戳中你痛点的问题及解决办法</a></li>\n</ol>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ol>\n<li><a href=\"https://juejin.im/post/5b481d216fb9a04fdb16a88f\" target=\"_blank\" rel=\"noopener\">一个json帮你完成分享朋友圈图片</a></li>\n</ol>\n<p>#### </p>\n<ol>\n<li><a href=\"https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/\" target=\"_blank\" rel=\"noopener\">通过示例来学习ES2016, 2017, 2018的新特性</a></li>\n</ol>"},{"title":"2018上半年学习资料整理&学习计划[3]","date":"2018-03-30T07:49:58.000Z","_content":"每天收集一点，每天学习一点\n\n<!-- more -->\n#### git使用学习\n\n1. [git快速学习教程-廖雪峰的网站](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [git使用原理文档](https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git)\n\n#### 博客\n\n1. [胖芮的博客--很多学习的东西](http://ruizhengyun.cn/)\n2. [博客框架的的例子](http://fehey.com/hve-blog/index.html)\n\n#### 框架\n\n1. [vue快速入门，全家桶知识学习](https://zhimap.com/mmap/2d0dc65361fc429fb4f5432592e3f976)\n\n#### 其他\n\n1. [hexo官网](https://hexo.io/zh-cn/docs/asset-folders.html)\n\n#### webpack学习\n1. [webpack小书](http://webpack.wuhaolin.cn/)\n2. [webpack【gitbook】](https://fakefish.github.io/react-webpack-cookbook/index.html)","source":"_posts/study/study2018-03.md","raw":"---\ntitle: 2018上半年学习资料整理&学习计划[3]\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-03-30 15:49:58\n---\n每天收集一点，每天学习一点\n\n<!-- more -->\n#### git使用学习\n\n1. [git快速学习教程-廖雪峰的网站](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [git使用原理文档](https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git)\n\n#### 博客\n\n1. [胖芮的博客--很多学习的东西](http://ruizhengyun.cn/)\n2. [博客框架的的例子](http://fehey.com/hve-blog/index.html)\n\n#### 框架\n\n1. [vue快速入门，全家桶知识学习](https://zhimap.com/mmap/2d0dc65361fc429fb4f5432592e3f976)\n\n#### 其他\n\n1. [hexo官网](https://hexo.io/zh-cn/docs/asset-folders.html)\n\n#### webpack学习\n1. [webpack小书](http://webpack.wuhaolin.cn/)\n2. [webpack【gitbook】](https://fakefish.github.io/react-webpack-cookbook/index.html)","slug":"study/study2018-03","published":1,"updated":"2018-09-04T13:49:59.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqs000u6oos0ab4cu1x","content":"<p>每天收集一点，每天学习一点</p>\n<a id=\"more\"></a>\n<h4 id=\"git使用学习\"><a href=\"#git使用学习\" class=\"headerlink\" title=\"git使用学习\"></a>git使用学习</h4><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">git快速学习教程-廖雪峰的网站</a></li>\n<li><a href=\"https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git\" target=\"_blank\" rel=\"noopener\">git使用原理文档</a></li>\n</ol>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><ol>\n<li><a href=\"http://ruizhengyun.cn/\" target=\"_blank\" rel=\"noopener\">胖芮的博客–很多学习的东西</a></li>\n<li><a href=\"http://fehey.com/hve-blog/index.html\" target=\"_blank\" rel=\"noopener\">博客框架的的例子</a></li>\n</ol>\n<h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><ol>\n<li><a href=\"https://zhimap.com/mmap/2d0dc65361fc429fb4f5432592e3f976\" target=\"_blank\" rel=\"noopener\">vue快速入门，全家桶知识学习</a></li>\n</ol>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ol>\n<li><a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">hexo官网</a></li>\n</ol>\n<h4 id=\"webpack学习\"><a href=\"#webpack学习\" class=\"headerlink\" title=\"webpack学习\"></a>webpack学习</h4><ol>\n<li><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">webpack小书</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/index.html\" target=\"_blank\" rel=\"noopener\">webpack【gitbook】</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>每天收集一点，每天学习一点</p>","more":"<h4 id=\"git使用学习\"><a href=\"#git使用学习\" class=\"headerlink\" title=\"git使用学习\"></a>git使用学习</h4><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">git快速学习教程-廖雪峰的网站</a></li>\n<li><a href=\"https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git\" target=\"_blank\" rel=\"noopener\">git使用原理文档</a></li>\n</ol>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><ol>\n<li><a href=\"http://ruizhengyun.cn/\" target=\"_blank\" rel=\"noopener\">胖芮的博客–很多学习的东西</a></li>\n<li><a href=\"http://fehey.com/hve-blog/index.html\" target=\"_blank\" rel=\"noopener\">博客框架的的例子</a></li>\n</ol>\n<h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><ol>\n<li><a href=\"https://zhimap.com/mmap/2d0dc65361fc429fb4f5432592e3f976\" target=\"_blank\" rel=\"noopener\">vue快速入门，全家桶知识学习</a></li>\n</ol>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ol>\n<li><a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"noopener\">hexo官网</a></li>\n</ol>\n<h4 id=\"webpack学习\"><a href=\"#webpack学习\" class=\"headerlink\" title=\"webpack学习\"></a>webpack学习</h4><ol>\n<li><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">webpack小书</a></li>\n<li><a href=\"https://fakefish.github.io/react-webpack-cookbook/index.html\" target=\"_blank\" rel=\"noopener\">webpack【gitbook】</a></li>\n</ol>"},{"title":"2018上半年学习资料整理&学习计划[4]","date":"2018-04-08T07:36:58.000Z","_content":"每天收集一点，每天学习一点\n\n<!-- more -->\n#### 小程序\n\n1. [小程序登录鉴权-手把手](https://juejin.im/post/5ac9b72cf265da23906c486a)\n\n#### node.js --express\n\n0. [node社区](https://cnodejs.org/)\n1. [express入门指南](http://www.expressjs.com.cn/)\n\n#### Promise\n\n2. [Promise 迷你书](http://liubin.org/promises-book/#ch2-promise-resolve)\n3. [理解 Promise 的工作原理](https://cnodejs.org/topic/569c8226adf526da2aeb23fd)\n4. [Node.js最新技术栈之Promise篇](https://cnodejs.org/topic/560dbc826a1ed28204a1e7de)\n\n#### axios\n\n1. [axios中文文档](https://www.kancloud.cn/yunye/axios/234845)\n\n#### css\n\n1. [css探索之旅](http://blog.doyoe.com/)\n2. [Web前端实验室](http://demo.doyoe.com/)\n3. [在线阴影生成方法](http://www.css88.com/tool/css3Preview/Box-Shadow.html)\n4. [CSS3中的伪类 nth-child选择器](http://www.daqianduan.com/3737.html)\n\n#### ESlint\n\n1. [ESlint配置官网](https://eslint.org/)\n3. [ESlint配置官网(zh)](http://eslint.cn/)\n2. [ESlint知乎配置大全](https://zhuanlan.zhihu.com/p/28906725)","source":"_posts/study/study2018-04.md","raw":"---\ntitle: 2018上半年学习资料整理&学习计划[4]\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-04-08 15:36:58\n---\n每天收集一点，每天学习一点\n\n<!-- more -->\n#### 小程序\n\n1. [小程序登录鉴权-手把手](https://juejin.im/post/5ac9b72cf265da23906c486a)\n\n#### node.js --express\n\n0. [node社区](https://cnodejs.org/)\n1. [express入门指南](http://www.expressjs.com.cn/)\n\n#### Promise\n\n2. [Promise 迷你书](http://liubin.org/promises-book/#ch2-promise-resolve)\n3. [理解 Promise 的工作原理](https://cnodejs.org/topic/569c8226adf526da2aeb23fd)\n4. [Node.js最新技术栈之Promise篇](https://cnodejs.org/topic/560dbc826a1ed28204a1e7de)\n\n#### axios\n\n1. [axios中文文档](https://www.kancloud.cn/yunye/axios/234845)\n\n#### css\n\n1. [css探索之旅](http://blog.doyoe.com/)\n2. [Web前端实验室](http://demo.doyoe.com/)\n3. [在线阴影生成方法](http://www.css88.com/tool/css3Preview/Box-Shadow.html)\n4. [CSS3中的伪类 nth-child选择器](http://www.daqianduan.com/3737.html)\n\n#### ESlint\n\n1. [ESlint配置官网](https://eslint.org/)\n3. [ESlint配置官网(zh)](http://eslint.cn/)\n2. [ESlint知乎配置大全](https://zhuanlan.zhihu.com/p/28906725)","slug":"study/study2018-04","published":1,"updated":"2018-11-14T08:26:20.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqu000w6oosyjgqignv","content":"<p>每天收集一点，每天学习一点</p>\n<a id=\"more\"></a>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ol>\n<li><a href=\"https://juejin.im/post/5ac9b72cf265da23906c486a\" target=\"_blank\" rel=\"noopener\">小程序登录鉴权-手把手</a></li>\n</ol>\n<h4 id=\"node-js-–express\"><a href=\"#node-js-–express\" class=\"headerlink\" title=\"node.js –express\"></a>node.js –express</h4><ol start=\"0\">\n<li><a href=\"https://cnodejs.org/\" target=\"_blank\" rel=\"noopener\">node社区</a></li>\n<li><a href=\"http://www.expressjs.com.cn/\" target=\"_blank\" rel=\"noopener\">express入门指南</a></li>\n</ol>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><ol start=\"2\">\n<li><a href=\"http://liubin.org/promises-book/#ch2-promise-resolve\" target=\"_blank\" rel=\"noopener\">Promise 迷你书</a></li>\n<li><a href=\"https://cnodejs.org/topic/569c8226adf526da2aeb23fd\" target=\"_blank\" rel=\"noopener\">理解 Promise 的工作原理</a></li>\n<li><a href=\"https://cnodejs.org/topic/560dbc826a1ed28204a1e7de\" target=\"_blank\" rel=\"noopener\">Node.js最新技术栈之Promise篇</a></li>\n</ol>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li><a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios中文文档</a></li>\n</ol>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><ol>\n<li><a href=\"http://blog.doyoe.com/\" target=\"_blank\" rel=\"noopener\">css探索之旅</a></li>\n<li><a href=\"http://demo.doyoe.com/\" target=\"_blank\" rel=\"noopener\">Web前端实验室</a></li>\n<li><a href=\"http://www.css88.com/tool/css3Preview/Box-Shadow.html\" target=\"_blank\" rel=\"noopener\">在线阴影生成方法</a></li>\n<li><a href=\"http://www.daqianduan.com/3737.html\" target=\"_blank\" rel=\"noopener\">CSS3中的伪类 nth-child选择器</a></li>\n</ol>\n<h4 id=\"ESlint\"><a href=\"#ESlint\" class=\"headerlink\" title=\"ESlint\"></a>ESlint</h4><ol>\n<li><a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener\">ESlint配置官网</a></li>\n<li><a href=\"http://eslint.cn/\" target=\"_blank\" rel=\"noopener\">ESlint配置官网(zh)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28906725\" target=\"_blank\" rel=\"noopener\">ESlint知乎配置大全</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>每天收集一点，每天学习一点</p>","more":"<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ol>\n<li><a href=\"https://juejin.im/post/5ac9b72cf265da23906c486a\" target=\"_blank\" rel=\"noopener\">小程序登录鉴权-手把手</a></li>\n</ol>\n<h4 id=\"node-js-–express\"><a href=\"#node-js-–express\" class=\"headerlink\" title=\"node.js –express\"></a>node.js –express</h4><ol start=\"0\">\n<li><a href=\"https://cnodejs.org/\" target=\"_blank\" rel=\"noopener\">node社区</a></li>\n<li><a href=\"http://www.expressjs.com.cn/\" target=\"_blank\" rel=\"noopener\">express入门指南</a></li>\n</ol>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><ol start=\"2\">\n<li><a href=\"http://liubin.org/promises-book/#ch2-promise-resolve\" target=\"_blank\" rel=\"noopener\">Promise 迷你书</a></li>\n<li><a href=\"https://cnodejs.org/topic/569c8226adf526da2aeb23fd\" target=\"_blank\" rel=\"noopener\">理解 Promise 的工作原理</a></li>\n<li><a href=\"https://cnodejs.org/topic/560dbc826a1ed28204a1e7de\" target=\"_blank\" rel=\"noopener\">Node.js最新技术栈之Promise篇</a></li>\n</ol>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li><a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios中文文档</a></li>\n</ol>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><ol>\n<li><a href=\"http://blog.doyoe.com/\" target=\"_blank\" rel=\"noopener\">css探索之旅</a></li>\n<li><a href=\"http://demo.doyoe.com/\" target=\"_blank\" rel=\"noopener\">Web前端实验室</a></li>\n<li><a href=\"http://www.css88.com/tool/css3Preview/Box-Shadow.html\" target=\"_blank\" rel=\"noopener\">在线阴影生成方法</a></li>\n<li><a href=\"http://www.daqianduan.com/3737.html\" target=\"_blank\" rel=\"noopener\">CSS3中的伪类 nth-child选择器</a></li>\n</ol>\n<h4 id=\"ESlint\"><a href=\"#ESlint\" class=\"headerlink\" title=\"ESlint\"></a>ESlint</h4><ol>\n<li><a href=\"https://eslint.org/\" target=\"_blank\" rel=\"noopener\">ESlint配置官网</a></li>\n<li><a href=\"http://eslint.cn/\" target=\"_blank\" rel=\"noopener\">ESlint配置官网(zh)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28906725\" target=\"_blank\" rel=\"noopener\">ESlint知乎配置大全</a></li>\n</ol>"},{"title":"2018下半年学习资料整理&学习计划[11]","date":"2018-11-14T09:36:58.000Z","_content":"每天收集一点，每天学习一点\n\n<!-- more -->\n#### JavaScript\n\n1. [深入理解javascript原型和闭包](http://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n","source":"_posts/study/study2018-05.md","raw":"---\ntitle: 2018下半年学习资料整理&学习计划[11]\ntags: [学习计划]\ncategories: [学习]\ndate: 2018-11-14 17:36:58\n---\n每天收集一点，每天学习一点\n\n<!-- more -->\n#### JavaScript\n\n1. [深入理解javascript原型和闭包](http://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n","slug":"study/study2018-05","published":1,"updated":"2018-11-14T09:05:20.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tqv000z6oosm2tb6hvu","content":"<p>每天收集一点，每天学习一点</p>\n<a id=\"more\"></a>\n<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><ol>\n<li><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>每天收集一点，每天学习一点</p>","more":"<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><ol>\n<li><a href=\"http://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解javascript原型和闭包</a></li>\n</ol>"},{"title":"iview使用总结（二）","date":"2018-12-13T09:15:14.000Z","_content":"摘要: iview表单校验、vue中实现hover效果、vue Render方法使用姿势\n<!-- more -->\n### iview表单校验\n**1. iview在校验select报错**    \n***\n 问题：即使选择了某一项一直报错？;\n 原因: iview默认校验数据类型为**String**, 而我们再给select的 :value是`number`类型的;\n\n**解决方法:** 加入 type: 'number'\n\n```js\n\nindustryType: [\n    { required: true, message: \"请选择\", trigger: \"change\", type: 'number' }\n]\n\n```\n**2. 多条件校验， 自定义正则校验**\n```js\n\n contractPhone: [\n    { required: true, message: \"请输入联系电话\", trigger: \"blur\" },\n    { type: 'string',pattern: /^1\\d{10}$/, message: '联系电话格式有误', trigger: \"blur\" } // 使用正则表达式\n]\n\n```\n**3. 校验日期，或者城市选择器**\n 问题： iview默认校验的数据类型是 String，所以用默认校验，type是不符合的。\n 解决： type：data\n```js\nprovince:[\n    { required: true, message: '预送达时间不能为空', trigger: 'change' ,type: 'date'},\n],\n```\n***\n### vue中实现hover效果\n\n```html\n<div\n    class=\"img-wrap-item\"\n    @mouseenter=\"showCloseIcon(item)\"\n    @mouseleave=\"showCloseIcon(item)\"\n</div>\n```\n\n### iview select  remote模式下，无法清空搜索输入的内容\n当使用remote模式下的select弹窗时， 关闭再显示，无法清空其内容\n\n```html\n<Select\n    class=\"change-select\"\n    v-model=\"concatCustomer\"\n    filterable\n    remote\n    :remote-method=\"queryCustomerList\"\n    :loading=\"customer_loading\"\n    placeholder=\"请输入客户名称\"\n>\n```\n解决方法： \n`        document.querySelector('.change-select .ivu-select-input').value = ''`\n\n\n### vue Render方法使用姿势\niview框架中使用render函数方法：`render:(h,params)=>{}`\n> render参数\n```js\nrender:(h, params) => {\n  return h(\" 定义的元素 \"，{ 元素的性质 }，\" 元素的内容\"/[元素的内容])\n}\n```\nexample\n```js\nrender: (h, params) => {\n    return h('p',\n        {\n            props: { // 组件peops\n            },\n            style: { // style样式属性\n                height: '60px',\n                border: \"1px solid lightblue\"\n            },\n            domProps: { // dom原生属性\n                href: 'javascript:void(0);',\n            },\n            on: { // 绑定 vue事件\n            },\n            nativeOn: { // 绑定原生事件\n                click: value => {\n                    this.$Message.success('点击事件成功啦')\n                },\n                keydown: event => {\n                    console.log('event.target.value', event.target.value);\n                }\n            }\n        },\n        [h('span', {\n            style: {\n                background: 'lightgreen'\n            }\n        }, 55),\n        [h('a',{\n            style: {\n                border: '1px solid red'\n            }\n        }, '我是a标签')]\n        ], )\n    }\n```\n\n\n\n### 完整示例如下\nhtml -> template\n```html\n    <Form :model=\"formItem\" ref=\"formItem\" :rules=\"formValidate\" inline :label-width=\"84\"> <!-- label-width作用于 所有的子formitem  inline行内模式 -->\n        <FormItem label=\"联系电话\" prop=\"contractPhone\">\n              <Input\n                v-model=\"formItem.contractPhone\"\n                style=\"width: 280px;\"\n                placeholder=\"请输入联系电话\"\n              />\n        </FormItem>\n        <FormItem label=\"公司所在地\" prop=\"provinceArr\">  <!-- 此处需要用 prop 名字要与v-model的 一致 -->\n              <Cascader\n                v-model=\"formItem.provinceArr\"\n                :data=\"provinceList\"\n                trigger=\"hover\"\n              ></Cascader>\n        </FormItem>\n        <FormItem label=\"请选择\" prop=\"select\">\n              <Select\n                v-model=\"formItem.industryType\"\n              >\n                <Option\n                  v-for=\"item in categoryList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                >{{ item.label }}</Option>\n              </Select>\n        </FormItem>\n    </Form>\n```\ndata中的校验：\n```js\n    data() {\n        return {\n            formValidate: {\n                // 多重校验\n                contractPhone: [\n                    { required: true, message: \"请输入联系电话\", trigger: \"blur\" },\n                    { pattern: /^1\\d{10}$/, message: '联系电话格式有误', trigger: \"blur\" } // 使用正则表达式\n                ],\n                industryType: [\n                    { required: true, message: \"请选择行业类别\", trigger: \"change\",  type:'number'}\n                ],\n                // 自定义校验  地址控件校验\n                provinceArr: [\n                    {\n                        validator: this.proviinceValidate, // 调用自定义方法 支持异步，比如查重\n                        required: true,\n                        trigger: \"change\"\n                    }\n                ]\n            }\n        }\n    },\n    method: {\n        // 异步或者自定义校验方法\n        proviinceValidate(rule, value, callback) {\n            if (Array.isArray(value) && value.length === 2) {\n                return callback();\n            } else {\n                return callback(new Error(\"地址不能为空\"));\n            }\n        },\n        // 表单提交 验证方法\n        submit() {\n            this.$refs['formItem'].validate( async (valid) => {  // 如果有await异步操作 需要async\n                if (valid) {\n                    // 校验通过\n                }\n        }),\n        // 清空方法\n        clear() {\n            this.$refs['formItem'].resetFields()\n        }\n\n    }\n      \n```","source":"_posts/frame/vue/vue-ivu-001.md","raw":"---\ntitle: iview使用总结（二）\ntags: [iview组件]\ncategories: [vue框架]\ndate: 2018-12-13 17:15:14\n---\n摘要: iview表单校验、vue中实现hover效果、vue Render方法使用姿势\n<!-- more -->\n### iview表单校验\n**1. iview在校验select报错**    \n***\n 问题：即使选择了某一项一直报错？;\n 原因: iview默认校验数据类型为**String**, 而我们再给select的 :value是`number`类型的;\n\n**解决方法:** 加入 type: 'number'\n\n```js\n\nindustryType: [\n    { required: true, message: \"请选择\", trigger: \"change\", type: 'number' }\n]\n\n```\n**2. 多条件校验， 自定义正则校验**\n```js\n\n contractPhone: [\n    { required: true, message: \"请输入联系电话\", trigger: \"blur\" },\n    { type: 'string',pattern: /^1\\d{10}$/, message: '联系电话格式有误', trigger: \"blur\" } // 使用正则表达式\n]\n\n```\n**3. 校验日期，或者城市选择器**\n 问题： iview默认校验的数据类型是 String，所以用默认校验，type是不符合的。\n 解决： type：data\n```js\nprovince:[\n    { required: true, message: '预送达时间不能为空', trigger: 'change' ,type: 'date'},\n],\n```\n***\n### vue中实现hover效果\n\n```html\n<div\n    class=\"img-wrap-item\"\n    @mouseenter=\"showCloseIcon(item)\"\n    @mouseleave=\"showCloseIcon(item)\"\n</div>\n```\n\n### iview select  remote模式下，无法清空搜索输入的内容\n当使用remote模式下的select弹窗时， 关闭再显示，无法清空其内容\n\n```html\n<Select\n    class=\"change-select\"\n    v-model=\"concatCustomer\"\n    filterable\n    remote\n    :remote-method=\"queryCustomerList\"\n    :loading=\"customer_loading\"\n    placeholder=\"请输入客户名称\"\n>\n```\n解决方法： \n`        document.querySelector('.change-select .ivu-select-input').value = ''`\n\n\n### vue Render方法使用姿势\niview框架中使用render函数方法：`render:(h,params)=>{}`\n> render参数\n```js\nrender:(h, params) => {\n  return h(\" 定义的元素 \"，{ 元素的性质 }，\" 元素的内容\"/[元素的内容])\n}\n```\nexample\n```js\nrender: (h, params) => {\n    return h('p',\n        {\n            props: { // 组件peops\n            },\n            style: { // style样式属性\n                height: '60px',\n                border: \"1px solid lightblue\"\n            },\n            domProps: { // dom原生属性\n                href: 'javascript:void(0);',\n            },\n            on: { // 绑定 vue事件\n            },\n            nativeOn: { // 绑定原生事件\n                click: value => {\n                    this.$Message.success('点击事件成功啦')\n                },\n                keydown: event => {\n                    console.log('event.target.value', event.target.value);\n                }\n            }\n        },\n        [h('span', {\n            style: {\n                background: 'lightgreen'\n            }\n        }, 55),\n        [h('a',{\n            style: {\n                border: '1px solid red'\n            }\n        }, '我是a标签')]\n        ], )\n    }\n```\n\n\n\n### 完整示例如下\nhtml -> template\n```html\n    <Form :model=\"formItem\" ref=\"formItem\" :rules=\"formValidate\" inline :label-width=\"84\"> <!-- label-width作用于 所有的子formitem  inline行内模式 -->\n        <FormItem label=\"联系电话\" prop=\"contractPhone\">\n              <Input\n                v-model=\"formItem.contractPhone\"\n                style=\"width: 280px;\"\n                placeholder=\"请输入联系电话\"\n              />\n        </FormItem>\n        <FormItem label=\"公司所在地\" prop=\"provinceArr\">  <!-- 此处需要用 prop 名字要与v-model的 一致 -->\n              <Cascader\n                v-model=\"formItem.provinceArr\"\n                :data=\"provinceList\"\n                trigger=\"hover\"\n              ></Cascader>\n        </FormItem>\n        <FormItem label=\"请选择\" prop=\"select\">\n              <Select\n                v-model=\"formItem.industryType\"\n              >\n                <Option\n                  v-for=\"item in categoryList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                >{{ item.label }}</Option>\n              </Select>\n        </FormItem>\n    </Form>\n```\ndata中的校验：\n```js\n    data() {\n        return {\n            formValidate: {\n                // 多重校验\n                contractPhone: [\n                    { required: true, message: \"请输入联系电话\", trigger: \"blur\" },\n                    { pattern: /^1\\d{10}$/, message: '联系电话格式有误', trigger: \"blur\" } // 使用正则表达式\n                ],\n                industryType: [\n                    { required: true, message: \"请选择行业类别\", trigger: \"change\",  type:'number'}\n                ],\n                // 自定义校验  地址控件校验\n                provinceArr: [\n                    {\n                        validator: this.proviinceValidate, // 调用自定义方法 支持异步，比如查重\n                        required: true,\n                        trigger: \"change\"\n                    }\n                ]\n            }\n        }\n    },\n    method: {\n        // 异步或者自定义校验方法\n        proviinceValidate(rule, value, callback) {\n            if (Array.isArray(value) && value.length === 2) {\n                return callback();\n            } else {\n                return callback(new Error(\"地址不能为空\"));\n            }\n        },\n        // 表单提交 验证方法\n        submit() {\n            this.$refs['formItem'].validate( async (valid) => {  // 如果有await异步操作 需要async\n                if (valid) {\n                    // 校验通过\n                }\n        }),\n        // 清空方法\n        clear() {\n            this.$refs['formItem'].resetFields()\n        }\n\n    }\n      \n```","slug":"frame/vue/vue-ivu-001","published":1,"updated":"2018-12-19T07:08:24.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trm001p6oos2gq04pe1","content":"<p>摘要: iview表单校验、vue中实现hover效果、vue Render方法使用姿势<br><a id=\"more\"></a></p>\n<h3 id=\"iview表单校验\"><a href=\"#iview表单校验\" class=\"headerlink\" title=\"iview表单校验\"></a>iview表单校验</h3><p><strong>1. iview在校验select报错</strong>    </p>\n<hr>\n<p> 问题：即使选择了某一项一直报错？;<br> 原因: iview默认校验数据类型为<strong>String</strong>, 而我们再给select的 :value是<code>number</code>类型的;</p>\n<p><strong>解决方法:</strong> 加入 type: ‘number’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">industryType: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请选择\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"change\"</span>, <span class=\"attr\">type</span>: <span class=\"string\">'number'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>2. 多条件校验， 自定义正则校验</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> contractPhone: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请输入联系电话\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>,<span class=\"attr\">pattern</span>: <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>, <span class=\"attr\">message</span>: <span class=\"string\">'联系电话格式有误'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125; <span class=\"comment\">// 使用正则表达式</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong>3. 校验日期，或者城市选择器</strong><br> 问题： iview默认校验的数据类型是 String，所以用默认校验，type是不符合的。<br> 解决： type：data<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">province:[</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">'预送达时间不能为空'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'change'</span> ,<span class=\"attr\">type</span>: <span class=\"string\">'date'</span>&#125;,</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"vue中实现hover效果\"><a href=\"#vue中实现hover效果\" class=\"headerlink\" title=\"vue中实现hover效果\"></a>vue中实现hover效果</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"img-wrap-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">mouseenter</span>=<span class=\"string\">\"showCloseIcon(item)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">mouseleave</span>=<span class=\"string\">\"showCloseIcon(item)\"</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iview-select-remote模式下，无法清空搜索输入的内容\"><a href=\"#iview-select-remote模式下，无法清空搜索输入的内容\" class=\"headerlink\" title=\"iview select  remote模式下，无法清空搜索输入的内容\"></a>iview select  remote模式下，无法清空搜索输入的内容</h3><p>当使用remote模式下的select弹窗时， 关闭再显示，无法清空其内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Select</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"change-select\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"concatCustomer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">filterable</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">remote</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:remote-method</span>=<span class=\"string\">\"queryCustomerList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:loading</span>=<span class=\"string\">\"customer_loading\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入客户名称\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>解决方法：<br><code>document.querySelector(&#39;.change-select .ivu-select-input&#39;).value = &#39;&#39;</code></p>\n<h3 id=\"vue-Render方法使用姿势\"><a href=\"#vue-Render方法使用姿势\" class=\"headerlink\" title=\"vue Render方法使用姿势\"></a>vue Render方法使用姿势</h3><p>iview框架中使用render函数方法：<code>render:(h,params)=&gt;{}</code></p>\n<blockquote>\n<p>render参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render:<span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h(<span class=\"string\">\" 定义的元素 \"</span>，&#123; 元素的性质 &#125;，<span class=\"string\">\" 元素的内容\"</span>/[元素的内容])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>example<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'p'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            props: &#123; <span class=\"comment\">// 组件peops</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            style: &#123; <span class=\"comment\">// style样式属性</span></span><br><span class=\"line\">                height: <span class=\"string\">'60px'</span>,</span><br><span class=\"line\">                border: <span class=\"string\">\"1px solid lightblue\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            domProps: &#123; <span class=\"comment\">// dom原生属性</span></span><br><span class=\"line\">                href: <span class=\"string\">'javascript:void(0);'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123; <span class=\"comment\">// 绑定 vue事件</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            nativeOn: &#123; <span class=\"comment\">// 绑定原生事件</span></span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.$Message.success(<span class=\"string\">'点击事件成功啦'</span>)</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                keydown: <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'event.target.value'</span>, event.target.value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            style: &#123;</span><br><span class=\"line\">                background: <span class=\"string\">'lightgreen'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">55</span>),</span><br><span class=\"line\">        [h(<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">            style: &#123;</span><br><span class=\"line\">                border: <span class=\"string\">'1px solid red'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">'我是a标签'</span>)]</span><br><span class=\"line\">        ], )</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"完整示例如下\"><a href=\"#完整示例如下\" class=\"headerlink\" title=\"完整示例如下\"></a>完整示例如下</h3><p>html -&gt; template<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"formItem\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"formItem\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"formValidate\"</span> <span class=\"attr\">inline</span> <span class=\"attr\">:label-width</span>=<span class=\"string\">\"84\"</span>&gt;</span> <span class=\"comment\">&lt;!-- label-width作用于 所有的子formitem  inline行内模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"联系电话\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"contractPhone\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.contractPhone\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">\"width: 280px;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入联系电话\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"公司所在地\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"provinceArr\"</span>&gt;</span>  <span class=\"comment\">&lt;!-- 此处需要用 prop 名字要与v-model的 一致 --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Cascader</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.provinceArr\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">:data</span>=<span class=\"string\">\"provinceList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">trigger</span>=<span class=\"string\">\"hover\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Cascader</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"请选择\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"select\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.industryType\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Option</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in categoryList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">:key</span>=<span class=\"string\">\"item.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">:value</span>=<span class=\"string\">\"item.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span>&#123;&#123; item.label &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>data中的校验：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        formValidate: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 多重校验</span></span><br><span class=\"line\">            contractPhone: [</span><br><span class=\"line\">                &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请输入联系电话\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">pattern</span>: <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>, <span class=\"attr\">message</span>: <span class=\"string\">'联系电话格式有误'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125; <span class=\"comment\">// 使用正则表达式</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            industryType: [</span><br><span class=\"line\">                &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请选择行业类别\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"change\"</span>,  <span class=\"attr\">type</span>:<span class=\"string\">'number'</span>&#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"comment\">// 自定义校验  地址控件校验</span></span><br><span class=\"line\">            provinceArr: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    validator: <span class=\"keyword\">this</span>.proviinceValidate, <span class=\"comment\">// 调用自定义方法 支持异步，比如查重</span></span><br><span class=\"line\">                    required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    trigger: <span class=\"string\">\"change\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">method: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步或者自定义校验方法</span></span><br><span class=\"line\">    proviinceValidate(rule, value, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value) &amp;&amp; value.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"地址不能为空\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单提交 验证方法</span></span><br><span class=\"line\">    submit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[<span class=\"string\">'formItem'</span>].validate( <span class=\"keyword\">async</span> (valid) =&gt; &#123;  <span class=\"comment\">// 如果有await异步操作 需要async</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 校验通过</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 清空方法</span></span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[<span class=\"string\">'formItem'</span>].resetFields()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>摘要: iview表单校验、vue中实现hover效果、vue Render方法使用姿势<br>","more":"</p>\n<h3 id=\"iview表单校验\"><a href=\"#iview表单校验\" class=\"headerlink\" title=\"iview表单校验\"></a>iview表单校验</h3><p><strong>1. iview在校验select报错</strong>    </p>\n<hr>\n<p> 问题：即使选择了某一项一直报错？;<br> 原因: iview默认校验数据类型为<strong>String</strong>, 而我们再给select的 :value是<code>number</code>类型的;</p>\n<p><strong>解决方法:</strong> 加入 type: ‘number’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">industryType: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请选择\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"change\"</span>, <span class=\"attr\">type</span>: <span class=\"string\">'number'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>2. 多条件校验， 自定义正则校验</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> contractPhone: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请输入联系电话\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>,<span class=\"attr\">pattern</span>: <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>, <span class=\"attr\">message</span>: <span class=\"string\">'联系电话格式有误'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125; <span class=\"comment\">// 使用正则表达式</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong>3. 校验日期，或者城市选择器</strong><br> 问题： iview默认校验的数据类型是 String，所以用默认校验，type是不符合的。<br> 解决： type：data<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">province:[</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">'预送达时间不能为空'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'change'</span> ,<span class=\"attr\">type</span>: <span class=\"string\">'date'</span>&#125;,</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"vue中实现hover效果\"><a href=\"#vue中实现hover效果\" class=\"headerlink\" title=\"vue中实现hover效果\"></a>vue中实现hover效果</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"img-wrap-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">mouseenter</span>=<span class=\"string\">\"showCloseIcon(item)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">mouseleave</span>=<span class=\"string\">\"showCloseIcon(item)\"</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iview-select-remote模式下，无法清空搜索输入的内容\"><a href=\"#iview-select-remote模式下，无法清空搜索输入的内容\" class=\"headerlink\" title=\"iview select  remote模式下，无法清空搜索输入的内容\"></a>iview select  remote模式下，无法清空搜索输入的内容</h3><p>当使用remote模式下的select弹窗时， 关闭再显示，无法清空其内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Select</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"change-select\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"concatCustomer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">filterable</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">remote</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:remote-method</span>=<span class=\"string\">\"queryCustomerList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:loading</span>=<span class=\"string\">\"customer_loading\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入客户名称\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<p>解决方法：<br><code>document.querySelector(&#39;.change-select .ivu-select-input&#39;).value = &#39;&#39;</code></p>\n<h3 id=\"vue-Render方法使用姿势\"><a href=\"#vue-Render方法使用姿势\" class=\"headerlink\" title=\"vue Render方法使用姿势\"></a>vue Render方法使用姿势</h3><p>iview框架中使用render函数方法：<code>render:(h,params)=&gt;{}</code></p>\n<blockquote>\n<p>render参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render:<span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h(<span class=\"string\">\" 定义的元素 \"</span>，&#123; 元素的性质 &#125;，<span class=\"string\">\" 元素的内容\"</span>/[元素的内容])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>example<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\">(<span class=\"params\">h, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'p'</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            props: &#123; <span class=\"comment\">// 组件peops</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            style: &#123; <span class=\"comment\">// style样式属性</span></span><br><span class=\"line\">                height: <span class=\"string\">'60px'</span>,</span><br><span class=\"line\">                border: <span class=\"string\">\"1px solid lightblue\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            domProps: &#123; <span class=\"comment\">// dom原生属性</span></span><br><span class=\"line\">                href: <span class=\"string\">'javascript:void(0);'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            on: &#123; <span class=\"comment\">// 绑定 vue事件</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            nativeOn: &#123; <span class=\"comment\">// 绑定原生事件</span></span><br><span class=\"line\">                click: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.$Message.success(<span class=\"string\">'点击事件成功啦'</span>)</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                keydown: <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'event.target.value'</span>, event.target.value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [h(<span class=\"string\">'span'</span>, &#123;</span><br><span class=\"line\">            style: &#123;</span><br><span class=\"line\">                background: <span class=\"string\">'lightgreen'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">55</span>),</span><br><span class=\"line\">        [h(<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">            style: &#123;</span><br><span class=\"line\">                border: <span class=\"string\">'1px solid red'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">'我是a标签'</span>)]</span><br><span class=\"line\">        ], )</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"完整示例如下\"><a href=\"#完整示例如下\" class=\"headerlink\" title=\"完整示例如下\"></a>完整示例如下</h3><p>html -&gt; template<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"formItem\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"formItem\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"formValidate\"</span> <span class=\"attr\">inline</span> <span class=\"attr\">:label-width</span>=<span class=\"string\">\"84\"</span>&gt;</span> <span class=\"comment\">&lt;!-- label-width作用于 所有的子formitem  inline行内模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"联系电话\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"contractPhone\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.contractPhone\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">\"width: 280px;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入联系电话\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"公司所在地\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"provinceArr\"</span>&gt;</span>  <span class=\"comment\">&lt;!-- 此处需要用 prop 名字要与v-model的 一致 --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Cascader</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.provinceArr\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">:data</span>=<span class=\"string\">\"provinceList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">trigger</span>=<span class=\"string\">\"hover\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Cascader</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FormItem</span> <span class=\"attr\">label</span>=<span class=\"string\">\"请选择\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"select\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Select</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">\"formItem.industryType\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Option</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in categoryList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">:key</span>=<span class=\"string\">\"item.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">:value</span>=<span class=\"string\">\"item.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            &gt;</span>&#123;&#123; item.label &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">Option</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">Select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FormItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>data中的校验：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        formValidate: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 多重校验</span></span><br><span class=\"line\">            contractPhone: [</span><br><span class=\"line\">                &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请输入联系电话\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125;,</span><br><span class=\"line\">                &#123; <span class=\"attr\">pattern</span>: <span class=\"regexp\">/^1\\d&#123;10&#125;$/</span>, <span class=\"attr\">message</span>: <span class=\"string\">'联系电话格式有误'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"blur\"</span> &#125; <span class=\"comment\">// 使用正则表达式</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            industryType: [</span><br><span class=\"line\">                &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"请选择行业类别\"</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">\"change\"</span>,  <span class=\"attr\">type</span>:<span class=\"string\">'number'</span>&#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"comment\">// 自定义校验  地址控件校验</span></span><br><span class=\"line\">            provinceArr: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    validator: <span class=\"keyword\">this</span>.proviinceValidate, <span class=\"comment\">// 调用自定义方法 支持异步，比如查重</span></span><br><span class=\"line\">                    required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    trigger: <span class=\"string\">\"change\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">method: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步或者自定义校验方法</span></span><br><span class=\"line\">    proviinceValidate(rule, value, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value) &amp;&amp; value.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"地址不能为空\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单提交 验证方法</span></span><br><span class=\"line\">    submit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[<span class=\"string\">'formItem'</span>].validate( <span class=\"keyword\">async</span> (valid) =&gt; &#123;  <span class=\"comment\">// 如果有await异步操作 需要async</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 校验通过</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 清空方法</span></span><br><span class=\"line\">    clear() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[<span class=\"string\">'formItem'</span>].resetFields()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"vue组件的使用","date":"2017-11-09T07:14:27.000Z","_content":"vue中组价的使用方式？\n<!-- more -->\ndescription: ","source":"_posts/frame/vue/vue-study-03.md","raw":"---\ntitle: vue组件的使用\ntags: []\ncategories: []\ndate: 2017-11-09 15:14:27\n---\nvue中组价的使用方式？\n<!-- more -->\ndescription: ","slug":"frame/vue/vue-study-03","published":1,"updated":"2018-09-04T13:49:59.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trn001q6oos11audyjn","content":"<p>vue中组价的使用方式？<br><a id=\"more\"></a><br>description: </p>\n","site":{"data":{}},"excerpt":"<p>vue中组价的使用方式？<br>","more":"<br>description: </p>"},{"title":"iview组件使用的踩坑记录","date":"2017-11-08T08:03:39.000Z","_content":"级联选择器的校验， 导航Tabs的使用\n<!-- more -->\n## 级联选择起的校验\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-08 16:03:39 </div>\n\n### html\n\n```html\n <Form :label-width=\"100\" ref=\"formData\" :rules=\"ruleValidate\" :model=\"formData\" inline class=\"wms-form-check oneline\">   \n\n    <Form-item label=\"收货地址：\" style=\"width:532px\" prop=\"region\" `@注意region`>\n        <Cascader :data=\"provinceCity\" v-model=\"formData.region\" `@注意region` size=\"small\" trigger=\"hover\"></Cascader>\n    </Form-item>\n\n<Form>\n```\n### javascript\n\n```js\nimport wmsValidate from 'wmsValidate\ndata() {\n    return {\n        formData: {\n            region: []\n        },\n        ruleValidate: {\n            ownerName: [{required: true, message: '货主名称不能为空', trigger: 'change'}],\n            type: [{required: true, message: '单据类型不能为空', trigger: 'change'}],\n\n            contactsName: [{required: true, message: '联系人不能为空', trigger: 'blur'}],\n            contacts: [{required: true, message: '联系方式不能为空', trigger: 'blur'}],\n            \n            region: [ --@注意--\n                {\n                    validator: wmsValidate.proviinceValidate,\n                    required: true,\n                    trigger: 'change',\n                    fullField: 'address'\n                }],\n            address: [{required: true, message: '详细地址不能为空', trigger: 'blur'}],\n            shippingMethod: [{required: true, message: '送货方式不能为空', trigger: 'change'}]\n                \n            },  \n    }\n}\n```\n### 检验地址控件的方法\n\n```js\n    // 校验地址控件选择 必填, 不能双向绑定 改变数据\nexport default class wmsValidate {\n\n    static proviinceValidate(rule, value, callback) {\n        if (_.isArray(value) && value.length === 3) {\n            return callback()\n        } else {\n            return callback(new Error('地址不能为空'))\n        }\n    }\n}\n```\n**Tisp：** `v-model`绑定的名字，`prop`的名字，和`validate`中的名字必须一致，`validate`中才能接收到值\n</br>\n\n\n\n\n## iview中tabs的使用\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-15 09:46:55 </div>\n\n正确使用姿势：\n```html\n<Tabs v-if=\"pageName!=='detail'\" type=\"card\" class=\"wms-mt10 wms-tabs\">\n    <Tab-pane label=\"出库箱信息\">\n    </Tab-pane>\n</Tabs>\n<div v-if=\"pageName!=='detail'\"> </div>\n```\n**Tisp：**： 不能将`Tabs`放在 带有`v-if`属性的`div`中\n\n\n</br>\n## iview中Model弹窗二次点击依然会关闭问题\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-16 18:39:55 </div>\n\n 确定按钮点击 --会自动关闭`Model`, 添加属性 `:loading`后需要在`@on-ok`事件中手动去设置关闭\n Tips: `:loading`初始值为要设置为 `true`\n **问题：** 首次点击未手动设置model关闭， 再次点击依然会自动关闭？\n 场景：\n> html\n\n ```html\n<Modal\n    v-model=\"syncUploadPop\"\n    title=\"title\"\n    width=\"400\"\n    :mask-closable=\"false\"\n    @on-ok=\"accountUnload\"\n    :loading=\"uploadLoading\"\n    >\n</Model>\n ```\n > js\n\n ```js\n data() {\n     return {\n         syncUploadPop: false,      // 弹出款默认不显示\n         uploadLoading: true        // 上传中\n     }\n }\nmethods: {\n    async accountUnload() {\n\n        this.uploadLoading = true   // 确定点击显示 加载中、、、\n\n        let res = await request.post(InterObj.accountUnloadTo, params)\n        this.uploadLoading = false  // 请求成功取消 加载中、、、\n\n        // -------解决问题的核心代码------\n        this.$nextTick(() => {\n            this.uploadLoading = true\n        })\n        // -------解决问题的核心代码------\n\n        if(res.result === 'success') {\n            this.$Message.success(res.msg)\n            this.syncUploadPop = false\n        } else {\n            this.$Message.error(res.msg)\n        }\n    },\n}\n\n ```\n **总结：** `:loading`设置成false取消 加载中状态后，需要在线程最后依然将 他设置为`true`","source":"_posts/frame/vue/vue-study-iview.md","raw":"---\ntitle: iview组件使用的踩坑记录\ntags: [iview组件]\ncategories: [vue框架]\ndate: 2017-11-08 16:03:39\n---\n级联选择器的校验， 导航Tabs的使用\n<!-- more -->\n## 级联选择起的校验\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-08 16:03:39 </div>\n\n### html\n\n```html\n <Form :label-width=\"100\" ref=\"formData\" :rules=\"ruleValidate\" :model=\"formData\" inline class=\"wms-form-check oneline\">   \n\n    <Form-item label=\"收货地址：\" style=\"width:532px\" prop=\"region\" `@注意region`>\n        <Cascader :data=\"provinceCity\" v-model=\"formData.region\" `@注意region` size=\"small\" trigger=\"hover\"></Cascader>\n    </Form-item>\n\n<Form>\n```\n### javascript\n\n```js\nimport wmsValidate from 'wmsValidate\ndata() {\n    return {\n        formData: {\n            region: []\n        },\n        ruleValidate: {\n            ownerName: [{required: true, message: '货主名称不能为空', trigger: 'change'}],\n            type: [{required: true, message: '单据类型不能为空', trigger: 'change'}],\n\n            contactsName: [{required: true, message: '联系人不能为空', trigger: 'blur'}],\n            contacts: [{required: true, message: '联系方式不能为空', trigger: 'blur'}],\n            \n            region: [ --@注意--\n                {\n                    validator: wmsValidate.proviinceValidate,\n                    required: true,\n                    trigger: 'change',\n                    fullField: 'address'\n                }],\n            address: [{required: true, message: '详细地址不能为空', trigger: 'blur'}],\n            shippingMethod: [{required: true, message: '送货方式不能为空', trigger: 'change'}]\n                \n            },  \n    }\n}\n```\n### 检验地址控件的方法\n\n```js\n    // 校验地址控件选择 必填, 不能双向绑定 改变数据\nexport default class wmsValidate {\n\n    static proviinceValidate(rule, value, callback) {\n        if (_.isArray(value) && value.length === 3) {\n            return callback()\n        } else {\n            return callback(new Error('地址不能为空'))\n        }\n    }\n}\n```\n**Tisp：** `v-model`绑定的名字，`prop`的名字，和`validate`中的名字必须一致，`validate`中才能接收到值\n</br>\n\n\n\n\n## iview中tabs的使用\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-15 09:46:55 </div>\n\n正确使用姿势：\n```html\n<Tabs v-if=\"pageName!=='detail'\" type=\"card\" class=\"wms-mt10 wms-tabs\">\n    <Tab-pane label=\"出库箱信息\">\n    </Tab-pane>\n</Tabs>\n<div v-if=\"pageName!=='detail'\"> </div>\n```\n**Tisp：**： 不能将`Tabs`放在 带有`v-if`属性的`div`中\n\n\n</br>\n## iview中Model弹窗二次点击依然会关闭问题\n<div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-16 18:39:55 </div>\n\n 确定按钮点击 --会自动关闭`Model`, 添加属性 `:loading`后需要在`@on-ok`事件中手动去设置关闭\n Tips: `:loading`初始值为要设置为 `true`\n **问题：** 首次点击未手动设置model关闭， 再次点击依然会自动关闭？\n 场景：\n> html\n\n ```html\n<Modal\n    v-model=\"syncUploadPop\"\n    title=\"title\"\n    width=\"400\"\n    :mask-closable=\"false\"\n    @on-ok=\"accountUnload\"\n    :loading=\"uploadLoading\"\n    >\n</Model>\n ```\n > js\n\n ```js\n data() {\n     return {\n         syncUploadPop: false,      // 弹出款默认不显示\n         uploadLoading: true        // 上传中\n     }\n }\nmethods: {\n    async accountUnload() {\n\n        this.uploadLoading = true   // 确定点击显示 加载中、、、\n\n        let res = await request.post(InterObj.accountUnloadTo, params)\n        this.uploadLoading = false  // 请求成功取消 加载中、、、\n\n        // -------解决问题的核心代码------\n        this.$nextTick(() => {\n            this.uploadLoading = true\n        })\n        // -------解决问题的核心代码------\n\n        if(res.result === 'success') {\n            this.$Message.success(res.msg)\n            this.syncUploadPop = false\n        } else {\n            this.$Message.error(res.msg)\n        }\n    },\n}\n\n ```\n **总结：** `:loading`设置成false取消 加载中状态后，需要在线程最后依然将 他设置为`true`","slug":"frame/vue/vue-study-iview","published":1,"updated":"2018-09-04T13:49:59.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trp001t6oosa5691gue","content":"<p>级联选择器的校验， 导航Tabs的使用<br><a id=\"more\"></a></p>\n<h2 id=\"级联选择起的校验\"><a href=\"#级联选择起的校验\" class=\"headerlink\" title=\"级联选择起的校验\"></a>级联选择起的校验</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-08 16:03:39 </div>\n\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">:label-width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"formData\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"ruleValidate\"</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"formData\"</span> <span class=\"attr\">inline</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wms-form-check oneline\"</span>&gt;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"收货地址：\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:532px\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"region\"</span> `@注意<span class=\"attr\">region</span>`&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Cascader</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"provinceCity\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"formData.region\"</span> `@注意<span class=\"attr\">region</span>` <span class=\"attr\">size</span>=<span class=\"string\">\"small\"</span> <span class=\"attr\">trigger</span>=<span class=\"string\">\"hover\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Cascader</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wmsValidate <span class=\"keyword\">from</span> <span class=\"string\">'wmsValidate</span></span><br><span class=\"line\"><span class=\"string\">data() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">        formData: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            region: []</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        ruleValidate: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            ownerName: [&#123;required: true, message: '</span>货主名称不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            type: [&#123;required: true, message: '</span>单据类型不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            contactsName: [&#123;required: true, message: '</span>联系人不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            contacts: [&#123;required: true, message: '</span>联系方式不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            region: [ --@注意--</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    validator: wmsValidate.proviinceValidate,</span></span><br><span class=\"line\"><span class=\"string\">                    required: true,</span></span><br><span class=\"line\"><span class=\"string\">                    trigger: '</span>change<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">                    fullField: '</span>address<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">                &#125;],</span></span><br><span class=\"line\"><span class=\"string\">            address: [&#123;required: true, message: '</span>详细地址不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            shippingMethod: [&#123;required: true, message: '</span>送货方式不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;]</span></span><br><span class=\"line\"><span class=\"string\">                </span></span><br><span class=\"line\"><span class=\"string\">            &#125;,  </span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检验地址控件的方法\"><a href=\"#检验地址控件的方法\" class=\"headerlink\" title=\"检验地址控件的方法\"></a>检验地址控件的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 校验地址控件选择 必填, 不能双向绑定 改变数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">wmsValidate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> proviinceValidate(rule, value, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.isArray(value) &amp;&amp; value.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'地址不能为空'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Tisp：</strong> <code>v-model</code>绑定的名字，<code>prop</code>的名字，和<code>validate</code>中的名字必须一致，<code>validate</code>中才能接收到值<br><br></p>\n<h2 id=\"iview中tabs的使用\"><a href=\"#iview中tabs的使用\" class=\"headerlink\" title=\"iview中tabs的使用\"></a>iview中tabs的使用</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-15 09:46:55 </div>\n\n<p>正确使用姿势：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Tabs</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"pageName!=='detail'\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wms-mt10 wms-tabs\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Tab-pane</span> <span class=\"attr\">label</span>=<span class=\"string\">\"出库箱信息\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Tab-pane</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Tabs</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"pageName!=='detail'\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Tisp：</strong>： 不能将<code>Tabs</code>放在 带有<code>v-if</code>属性的<code>div</code>中</p>\n<p><br></p>\n<h2 id=\"iview中Model弹窗二次点击依然会关闭问题\"><a href=\"#iview中Model弹窗二次点击依然会关闭问题\" class=\"headerlink\" title=\"iview中Model弹窗二次点击依然会关闭问题\"></a>iview中Model弹窗二次点击依然会关闭问题</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-16 18:39:55 </div>\n\n<p> 确定按钮点击 –会自动关闭<code>Model</code>, 添加属性 <code>:loading</code>后需要在<code>@on-ok</code>事件中手动去设置关闭<br> Tips: <code>:loading</code>初始值为要设置为 <code>true</code><br> <strong>问题：</strong> 首次点击未手动设置model关闭， 再次点击依然会自动关闭？<br> 场景：</p>\n<blockquote>\n<p>html</p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"syncUploadPop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">title</span>=<span class=\"string\">\"title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">\"400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:mask-closable</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">on-ok</span>=<span class=\"string\">\"accountUnload\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:loading</span>=<span class=\"string\">\"uploadLoading\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Model</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>js</p>\n</blockquote>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         syncUploadPop: <span class=\"literal\">false</span>,      <span class=\"comment\">// 弹出款默认不显示</span></span><br><span class=\"line\">         uploadLoading: <span class=\"literal\">true</span>        <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> accountUnload() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">true</span>   <span class=\"comment\">// 确定点击显示 加载中、、、</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> request.post(InterObj.accountUnloadTo, params)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">false</span>  <span class=\"comment\">// 请求成功取消 加载中、、、</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// -------解决问题的核心代码------</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// -------解决问题的核心代码------</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.result === <span class=\"string\">'success'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$Message.success(res.msg)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.syncUploadPop = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$Message.error(res.msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <strong>总结：</strong> <code>:loading</code>设置成false取消 加载中状态后，需要在线程最后依然将 他设置为<code>true</code></p>\n","site":{"data":{}},"excerpt":"<p>级联选择器的校验， 导航Tabs的使用<br>","more":"</p>\n<h2 id=\"级联选择起的校验\"><a href=\"#级联选择起的校验\" class=\"headerlink\" title=\"级联选择起的校验\"></a>级联选择起的校验</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-08 16:03:39 </div>\n\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Form</span> <span class=\"attr\">:label-width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"formData\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"ruleValidate\"</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"formData\"</span> <span class=\"attr\">inline</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wms-form-check oneline\"</span>&gt;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"收货地址：\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:532px\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"region\"</span> `@注意<span class=\"attr\">region</span>`&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Cascader</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"provinceCity\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"formData.region\"</span> `@注意<span class=\"attr\">region</span>` <span class=\"attr\">size</span>=<span class=\"string\">\"small\"</span> <span class=\"attr\">trigger</span>=<span class=\"string\">\"hover\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Cascader</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wmsValidate <span class=\"keyword\">from</span> <span class=\"string\">'wmsValidate</span></span><br><span class=\"line\"><span class=\"string\">data() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">        formData: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            region: []</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        ruleValidate: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            ownerName: [&#123;required: true, message: '</span>货主名称不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            type: [&#123;required: true, message: '</span>单据类型不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            contactsName: [&#123;required: true, message: '</span>联系人不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            contacts: [&#123;required: true, message: '</span>联系方式不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            </span></span><br><span class=\"line\"><span class=\"string\">            region: [ --@注意--</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    validator: wmsValidate.proviinceValidate,</span></span><br><span class=\"line\"><span class=\"string\">                    required: true,</span></span><br><span class=\"line\"><span class=\"string\">                    trigger: '</span>change<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">                    fullField: '</span>address<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">                &#125;],</span></span><br><span class=\"line\"><span class=\"string\">            address: [&#123;required: true, message: '</span>详细地址不能为空<span class=\"string\">', trigger: '</span>blur<span class=\"string\">'&#125;],</span></span><br><span class=\"line\"><span class=\"string\">            shippingMethod: [&#123;required: true, message: '</span>送货方式不能为空<span class=\"string\">', trigger: '</span>change<span class=\"string\">'&#125;]</span></span><br><span class=\"line\"><span class=\"string\">                </span></span><br><span class=\"line\"><span class=\"string\">            &#125;,  </span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检验地址控件的方法\"><a href=\"#检验地址控件的方法\" class=\"headerlink\" title=\"检验地址控件的方法\"></a>检验地址控件的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 校验地址控件选择 必填, 不能双向绑定 改变数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">wmsValidate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> proviinceValidate(rule, value, callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.isArray(value) &amp;&amp; value.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'地址不能为空'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Tisp：</strong> <code>v-model</code>绑定的名字，<code>prop</code>的名字，和<code>validate</code>中的名字必须一致，<code>validate</code>中才能接收到值<br><br></p>\n<h2 id=\"iview中tabs的使用\"><a href=\"#iview中tabs的使用\" class=\"headerlink\" title=\"iview中tabs的使用\"></a>iview中tabs的使用</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-15 09:46:55 </div>\n\n<p>正确使用姿势：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Tabs</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"pageName!=='detail'\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"card\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wms-mt10 wms-tabs\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Tab-pane</span> <span class=\"attr\">label</span>=<span class=\"string\">\"出库箱信息\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Tab-pane</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Tabs</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"pageName!=='detail'\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Tisp：</strong>： 不能将<code>Tabs</code>放在 带有<code>v-if</code>属性的<code>div</code>中</p>\n<p><br></p>\n<h2 id=\"iview中Model弹窗二次点击依然会关闭问题\"><a href=\"#iview中Model弹窗二次点击依然会关闭问题\" class=\"headerlink\" title=\"iview中Model弹窗二次点击依然会关闭问题\"></a>iview中Model弹窗二次点击依然会关闭问题</h2><div style=\"color: #808080; font-size: 12px; text-align: right\">2017-11-16 18:39:55 </div>\n\n<p> 确定按钮点击 –会自动关闭<code>Model</code>, 添加属性 <code>:loading</code>后需要在<code>@on-ok</code>事件中手动去设置关闭<br> Tips: <code>:loading</code>初始值为要设置为 <code>true</code><br> <strong>问题：</strong> 首次点击未手动设置model关闭， 再次点击依然会自动关闭？<br> 场景：</p>\n<blockquote>\n<p>html</p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Modal</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">\"syncUploadPop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">title</span>=<span class=\"string\">\"title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">\"400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:mask-closable</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">on-ok</span>=<span class=\"string\">\"accountUnload\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:loading</span>=<span class=\"string\">\"uploadLoading\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Model</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>js</p>\n</blockquote>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         syncUploadPop: <span class=\"literal\">false</span>,      <span class=\"comment\">// 弹出款默认不显示</span></span><br><span class=\"line\">         uploadLoading: <span class=\"literal\">true</span>        <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> accountUnload() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">true</span>   <span class=\"comment\">// 确定点击显示 加载中、、、</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> request.post(InterObj.accountUnloadTo, params)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">false</span>  <span class=\"comment\">// 请求成功取消 加载中、、、</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// -------解决问题的核心代码------</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.uploadLoading = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// -------解决问题的核心代码------</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.result === <span class=\"string\">'success'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$Message.success(res.msg)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.syncUploadPop = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$Message.error(res.msg)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <strong>总结：</strong> <code>:loading</code>设置成false取消 加载中状态后，需要在线程最后依然将 他设置为<code>true</code></p>"},{"title":"vue中的计算属性 computed","date":"2017-11-07T11:49:48.000Z","description":"vue中使用 computed 时，改变对象的属性，vue无法检测到，通常直接改变这个对象的索引；","_content":"## vue中使用计算属性 computed\n> html Vue:\n\n```vue\n<template>\n    <div>\n        <p>{{cpu_number}}</p>\n        <p>{{cpu_numObj}}</p>\n\n        <p>{{cpu_numObj2}}</p>\n    </div>\n</template>\n```\n> javaScript:\n\n```js\n\ndata() {\n    return {\n        number: 1,\n        numObj: {},\n        numObj2: {},\n    }\n},\ncomputed: {\n    cpu_number: function() {\n        return this.number ++\n    },\n    cpu_numObj: function() {\n        this.numObj.type = '直接改变对象属性'    // 计算属性不会检测到\n        return numObj.type\n    }\n    cpu_numObj2: function() {\n        this.numObj2 = Object.assign({}, {type: '改变了对象索引'})    // 计算属性会检测到\n        return numObj2\n    }\n}\n```\n\n**总结**： vue 计算属性computed可以检测到 `变量`  `数组`  `对象的`变化； 但是 对象的属性变化是不会被检测到的","source":"_posts/frame/vue/vue-study-computed.md","raw":"---\ntitle: vue中的计算属性 computed\ndate: 2017-11-07 19:49:48\ndescription: vue中使用 computed 时，改变对象的属性，vue无法检测到，通常直接改变这个对象的索引；\ntags: [vue知识点]\ncategories: [vue框架]\n---\n## vue中使用计算属性 computed\n> html Vue:\n\n```vue\n<template>\n    <div>\n        <p>{{cpu_number}}</p>\n        <p>{{cpu_numObj}}</p>\n\n        <p>{{cpu_numObj2}}</p>\n    </div>\n</template>\n```\n> javaScript:\n\n```js\n\ndata() {\n    return {\n        number: 1,\n        numObj: {},\n        numObj2: {},\n    }\n},\ncomputed: {\n    cpu_number: function() {\n        return this.number ++\n    },\n    cpu_numObj: function() {\n        this.numObj.type = '直接改变对象属性'    // 计算属性不会检测到\n        return numObj.type\n    }\n    cpu_numObj2: function() {\n        this.numObj2 = Object.assign({}, {type: '改变了对象索引'})    // 计算属性会检测到\n        return numObj2\n    }\n}\n```\n\n**总结**： vue 计算属性computed可以检测到 `变量`  `数组`  `对象的`变化； 但是 对象的属性变化是不会被检测到的","slug":"frame/vue/vue-study-computed","published":1,"updated":"2018-09-04T13:49:59.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trq001u6oossmwqx971","content":"<h2 id=\"vue中使用计算属性-computed\"><a href=\"#vue中使用计算属性-computed\" class=\"headerlink\" title=\"vue中使用计算属性 computed\"></a>vue中使用计算属性 computed</h2><blockquote>\n<p>html Vue:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_number&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_numObj&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_numObj2&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>javaScript:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        number: <span class=\"number\">1</span>,</span><br><span class=\"line\">        numObj: &#123;&#125;,</span><br><span class=\"line\">        numObj2: &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    cpu_number: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.number ++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cpu_numObj: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numObj.type = <span class=\"string\">'直接改变对象属性'</span>    <span class=\"comment\">// 计算属性不会检测到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numObj.type</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cpu_numObj2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numObj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, &#123;<span class=\"attr\">type</span>: <span class=\"string\">'改变了对象索引'</span>&#125;)    <span class=\"comment\">// 计算属性会检测到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numObj2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>： vue 计算属性computed可以检测到 <code>变量</code>  <code>数组</code>  <code>对象的</code>变化； 但是 对象的属性变化是不会被检测到的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue中使用计算属性-computed\"><a href=\"#vue中使用计算属性-computed\" class=\"headerlink\" title=\"vue中使用计算属性 computed\"></a>vue中使用计算属性 computed</h2><blockquote>\n<p>html Vue:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_number&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_numObj&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;p&gt;&#123;&#123;cpu_numObj2&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>javaScript:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        number: <span class=\"number\">1</span>,</span><br><span class=\"line\">        numObj: &#123;&#125;,</span><br><span class=\"line\">        numObj2: &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    cpu_number: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.number ++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cpu_numObj: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numObj.type = <span class=\"string\">'直接改变对象属性'</span>    <span class=\"comment\">// 计算属性不会检测到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numObj.type</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cpu_numObj2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numObj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, &#123;<span class=\"attr\">type</span>: <span class=\"string\">'改变了对象索引'</span>&#125;)    <span class=\"comment\">// 计算属性会检测到</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numObj2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>： vue 计算属性computed可以检测到 <code>变量</code>  <code>数组</code>  <code>对象的</code>变化； 但是 对象的属性变化是不会被检测到的</p>\n"},{"title":"javascript之call的用法","date":"2017-11-07T04:35:00.000Z","description":"从零来理解javascript中的call的用法","_content":"## 正文开始\n**一说到call**，\n\n————总是**`call`**、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；\n\n**通俗点：**\n> **`call`**的作用就是： **改变函数执行时的上下文** 也就是`this`的指向;\n### 用法：\n    Food.call(thisArg, arg1, arg2, ...)\n\n### 来看个例子 --- A\n\n\n```js\nfunction fun(){\n\tthis.name = 'fun-name'\n\tthis.age = 'fun-age'\n}\n var wrap = {\n \tage: 'default',\n \tname: 'default',\n \tmyfun: function() {\n \t\tfun()\n \t}\n}\n\nwrap.myfun();\nconsole.log(wrap.age)   // 'default-age'\nconsole.log(window.age)  // 'fun-age'\n```\n直接运行这个函数 **`wrap.myfun(); `**\n> \n执行这个函数后\n1、在`wrap`下面执行`myfun()`后，其中的`this`指向`window`全局的\n2、在`window`全局下面创建了一个 `age`属性，值为 `'fun-age'`\n3、`wrap`中的`age`还是`default`\n\n\n### 来看个例子 --- B\n```js\nfunction fun(){\n\tthis.name = 'fun-name'\n\tthis.age = 'fun-age'\n}\n var wrap = {\n \tage: 'default',\n \tname: 'default',\n \tobj: function() {\n \t\tfun.call(this)      // **---注意这里打 call 了---**\n \t}\n}\n\nwrap.myfun();\nconsole.log(wrap.age)   // 'fun-age'        --发生了变化---\nconsole.log(window.age)  // 'age is not defined'   --发生了变化---\n```\n例子B运行时：\n\n> `wrap.obj()`执行后，在执行`fun`时，把`this`， call进去了, 这个`this`是指向`wrap`，所以`fun`执行时其中的`this`指向的是`wrap`，自然改变的就是`wrap`中的`age`，这就是`call`的作用改变了`fun`执行时的上下文；\n\n好累，反正我是大概懂了他（this）刚才干了什么；\n***\n那么在我们的coding中，一般什么时候用到call了？\n## call的用法\n### 利用call来 做继承\n```js\nvar Person = function () {\n    this.fun = function() { \n        console.log('longlee') }\n};\nvar student = function () {\n    Person.call(this);\n};\n\nvar st = new student ();\n\ng1.fun()  // 输出： longlee\n```\n如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；\n### 判断数据的类型 \n> 【object、 array、 null】\n```js\nvar obj1 = {name: 'longlee'}\nvar obj2 = ['longlee']\nvar obj3 = null\n\nObject.prototype.toString.call(obj1)    // \"[object Object]\"\nObject.prototype.toString.call(obj2)    // \"[object Array]\"\nObject.prototype.toString.call(obj3)    // \"[object Null]\"\nObject.prototype.toString.call(12)      // \"[object Number]\"\n....\n....\n ```\n ### 类（伪）数组使用数组方法\n```js\nvar arg = Array.prototype.slice.call(arguments);\narguments是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,\n\n但是我们能通过 Array.prototype.slice.call 转换为真正的数组\n这样 arguments 就可以应用 Array 下的所有方法了。\n```\n### 获取数组中的最大值和最小值\n```js\nmaxInNumbers = Math.max.call(Math, 55, 888 , 521 , -36); // 888\nnumber 本身没有 max 方法，但是 Math 有，我们就可以借助 call 使用其方法。\n\n```\n\n就说到这了，再说下去，我自己也快消化不良了、、、、\n\n\n***\n题外话：\n说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法\n`Math.max(...[2,1,3])`  // 3\n`Math.min(...[2,1,3])`  // 1\n\n个人见解，有误之处，大神请指出，以免改正！\n弄懂 call 了。可以继续打 call 了","source":"_posts/js/array/js-call.md","raw":"---\ntitle: javascript之call的用法\ndate: 2017-11-07 12:35:00\ndescription: \"从零来理解javascript中的call的用法\"\ntags: [js知识点总结]\ncategories: [JavaScript]\n---\n## 正文开始\n**一说到call**，\n\n————总是**`call`**、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；\n\n**通俗点：**\n> **`call`**的作用就是： **改变函数执行时的上下文** 也就是`this`的指向;\n### 用法：\n    Food.call(thisArg, arg1, arg2, ...)\n\n### 来看个例子 --- A\n\n\n```js\nfunction fun(){\n\tthis.name = 'fun-name'\n\tthis.age = 'fun-age'\n}\n var wrap = {\n \tage: 'default',\n \tname: 'default',\n \tmyfun: function() {\n \t\tfun()\n \t}\n}\n\nwrap.myfun();\nconsole.log(wrap.age)   // 'default-age'\nconsole.log(window.age)  // 'fun-age'\n```\n直接运行这个函数 **`wrap.myfun(); `**\n> \n执行这个函数后\n1、在`wrap`下面执行`myfun()`后，其中的`this`指向`window`全局的\n2、在`window`全局下面创建了一个 `age`属性，值为 `'fun-age'`\n3、`wrap`中的`age`还是`default`\n\n\n### 来看个例子 --- B\n```js\nfunction fun(){\n\tthis.name = 'fun-name'\n\tthis.age = 'fun-age'\n}\n var wrap = {\n \tage: 'default',\n \tname: 'default',\n \tobj: function() {\n \t\tfun.call(this)      // **---注意这里打 call 了---**\n \t}\n}\n\nwrap.myfun();\nconsole.log(wrap.age)   // 'fun-age'        --发生了变化---\nconsole.log(window.age)  // 'age is not defined'   --发生了变化---\n```\n例子B运行时：\n\n> `wrap.obj()`执行后，在执行`fun`时，把`this`， call进去了, 这个`this`是指向`wrap`，所以`fun`执行时其中的`this`指向的是`wrap`，自然改变的就是`wrap`中的`age`，这就是`call`的作用改变了`fun`执行时的上下文；\n\n好累，反正我是大概懂了他（this）刚才干了什么；\n***\n那么在我们的coding中，一般什么时候用到call了？\n## call的用法\n### 利用call来 做继承\n```js\nvar Person = function () {\n    this.fun = function() { \n        console.log('longlee') }\n};\nvar student = function () {\n    Person.call(this);\n};\n\nvar st = new student ();\n\ng1.fun()  // 输出： longlee\n```\n如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；\n### 判断数据的类型 \n> 【object、 array、 null】\n```js\nvar obj1 = {name: 'longlee'}\nvar obj2 = ['longlee']\nvar obj3 = null\n\nObject.prototype.toString.call(obj1)    // \"[object Object]\"\nObject.prototype.toString.call(obj2)    // \"[object Array]\"\nObject.prototype.toString.call(obj3)    // \"[object Null]\"\nObject.prototype.toString.call(12)      // \"[object Number]\"\n....\n....\n ```\n ### 类（伪）数组使用数组方法\n```js\nvar arg = Array.prototype.slice.call(arguments);\narguments是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,\n\n但是我们能通过 Array.prototype.slice.call 转换为真正的数组\n这样 arguments 就可以应用 Array 下的所有方法了。\n```\n### 获取数组中的最大值和最小值\n```js\nmaxInNumbers = Math.max.call(Math, 55, 888 , 521 , -36); // 888\nnumber 本身没有 max 方法，但是 Math 有，我们就可以借助 call 使用其方法。\n\n```\n\n就说到这了，再说下去，我自己也快消化不良了、、、、\n\n\n***\n题外话：\n说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法\n`Math.max(...[2,1,3])`  // 3\n`Math.min(...[2,1,3])`  // 1\n\n个人见解，有误之处，大神请指出，以免改正！\n弄懂 call 了。可以继续打 call 了","slug":"js/array/js-call","published":1,"updated":"2018-09-04T13:49:59.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trr001v6oosbfcj6fa5","content":"<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p><strong>一说到call</strong>，</p>\n<p>————总是<strong><code>call</code></strong>、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；</p>\n<p><strong>通俗点：</strong></p>\n<blockquote>\n<p><strong><code>call</code></strong>的作用就是： <strong>改变函数执行时的上下文</strong> 也就是<code>this</code>的指向;</p>\n</blockquote>\n<h3 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h3><pre><code>Food.call(thisArg, arg1, arg2, ...)\n</code></pre><h3 id=\"来看个例子-—-A\"><a href=\"#来看个例子-—-A\" class=\"headerlink\" title=\"来看个例子 — A\"></a>来看个例子 — A</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'fun-name'</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'fun-age'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wrap = &#123;</span><br><span class=\"line\"> \tage: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tname: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tmyfun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\tfun()</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wrap.myfun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrap.age)   <span class=\"comment\">// 'default-age'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age)  <span class=\"comment\">// 'fun-age'</span></span><br></pre></td></tr></table></figure>\n<p>直接运行这个函数 <strong><code>wrap.myfun();</code></strong></p>\n<blockquote>\n</blockquote>\n<p>执行这个函数后<br>1、在<code>wrap</code>下面执行<code>myfun()</code>后，其中的<code>this</code>指向<code>window</code>全局的<br>2、在<code>window</code>全局下面创建了一个 <code>age</code>属性，值为 <code>&#39;fun-age&#39;</code><br>3、<code>wrap</code>中的<code>age</code>还是<code>default</code></p>\n<h3 id=\"来看个例子-—-B\"><a href=\"#来看个例子-—-B\" class=\"headerlink\" title=\"来看个例子 — B\"></a>来看个例子 — B</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'fun-name'</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'fun-age'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wrap = &#123;</span><br><span class=\"line\"> \tage: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tname: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tobj: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\tfun.call(<span class=\"keyword\">this</span>)      <span class=\"comment\">// **---注意这里打 call 了---**</span></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wrap.myfun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrap.age)   <span class=\"comment\">// 'fun-age'        --发生了变化---</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age)  <span class=\"comment\">// 'age is not defined'   --发生了变化---</span></span><br></pre></td></tr></table></figure>\n<p>例子B运行时：</p>\n<blockquote>\n<p><code>wrap.obj()</code>执行后，在执行<code>fun</code>时，把<code>this</code>， call进去了, 这个<code>this</code>是指向<code>wrap</code>，所以<code>fun</code>执行时其中的<code>this</code>指向的是<code>wrap</code>，自然改变的就是<code>wrap</code>中的<code>age</code>，这就是<code>call</code>的作用改变了<code>fun</code>执行时的上下文；</p>\n</blockquote>\n<p>好累，反正我是大概懂了他（this）刚才干了什么；</p>\n<hr>\n<p>那么在我们的coding中，一般什么时候用到call了？</p>\n<h2 id=\"call的用法\"><a href=\"#call的用法\" class=\"headerlink\" title=\"call的用法\"></a>call的用法</h2><h3 id=\"利用call来-做继承\"><a href=\"#利用call来-做继承\" class=\"headerlink\" title=\"利用call来 做继承\"></a>利用call来 做继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'longlee'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> st = <span class=\"keyword\">new</span> student ();</span><br><span class=\"line\"></span><br><span class=\"line\">g1.fun()  <span class=\"comment\">// 输出： longlee</span></span><br></pre></td></tr></table></figure>\n<p>如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；</p>\n<h3 id=\"判断数据的类型\"><a href=\"#判断数据的类型\" class=\"headerlink\" title=\"判断数据的类型\"></a>判断数据的类型</h3><blockquote>\n<p>【object、 array、 null】<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'longlee'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = [<span class=\"string\">'longlee'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj1)    <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj2)    <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj3)    <span class=\"comment\">// \"[object Null]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">12</span>)      <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"类（伪）数组使用数组方法\"><a href=\"#类（伪）数组使用数组方法\" class=\"headerlink\" title=\"类（伪）数组使用数组方法\"></a>类（伪）数组使用数组方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"><span class=\"built_in\">arguments</span>是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,</span><br><span class=\"line\"></span><br><span class=\"line\">但是我们能通过 <span class=\"built_in\">Array</span>.prototype.slice.call 转换为真正的数组</span><br><span class=\"line\">这样 <span class=\"built_in\">arguments</span> 就可以应用 <span class=\"built_in\">Array</span> 下的所有方法了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxInNumbers = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, <span class=\"number\">55</span>, <span class=\"number\">888</span> , <span class=\"number\">521</span> , <span class=\"number\">-36</span>); <span class=\"comment\">// 888</span></span><br><span class=\"line\">number 本身没有 max 方法，但是 <span class=\"built_in\">Math</span> 有，我们就可以借助 call 使用其方法。</span><br></pre></td></tr></table></figure>\n<p>就说到这了，再说下去，我自己也快消化不良了、、、、</p>\n<hr>\n<p>题外话：<br>说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法<br><code>Math.max(...[2,1,3])</code>  // 3<br><code>Math.min(...[2,1,3])</code>  // 1</p>\n<p>个人见解，有误之处，大神请指出，以免改正！<br>弄懂 call 了。可以继续打 call 了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p><strong>一说到call</strong>，</p>\n<p>————总是<strong><code>call</code></strong>、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；</p>\n<p><strong>通俗点：</strong></p>\n<blockquote>\n<p><strong><code>call</code></strong>的作用就是： <strong>改变函数执行时的上下文</strong> 也就是<code>this</code>的指向;</p>\n</blockquote>\n<h3 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h3><pre><code>Food.call(thisArg, arg1, arg2, ...)\n</code></pre><h3 id=\"来看个例子-—-A\"><a href=\"#来看个例子-—-A\" class=\"headerlink\" title=\"来看个例子 — A\"></a>来看个例子 — A</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'fun-name'</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'fun-age'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wrap = &#123;</span><br><span class=\"line\"> \tage: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tname: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tmyfun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\tfun()</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wrap.myfun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrap.age)   <span class=\"comment\">// 'default-age'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age)  <span class=\"comment\">// 'fun-age'</span></span><br></pre></td></tr></table></figure>\n<p>直接运行这个函数 <strong><code>wrap.myfun();</code></strong></p>\n<blockquote>\n</blockquote>\n<p>执行这个函数后<br>1、在<code>wrap</code>下面执行<code>myfun()</code>后，其中的<code>this</code>指向<code>window</code>全局的<br>2、在<code>window</code>全局下面创建了一个 <code>age</code>属性，值为 <code>&#39;fun-age&#39;</code><br>3、<code>wrap</code>中的<code>age</code>还是<code>default</code></p>\n<h3 id=\"来看个例子-—-B\"><a href=\"#来看个例子-—-B\" class=\"headerlink\" title=\"来看个例子 — B\"></a>来看个例子 — B</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'fun-name'</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'fun-age'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> wrap = &#123;</span><br><span class=\"line\"> \tage: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tname: <span class=\"string\">'default'</span>,</span><br><span class=\"line\"> \tobj: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> \t\tfun.call(<span class=\"keyword\">this</span>)      <span class=\"comment\">// **---注意这里打 call 了---**</span></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wrap.myfun();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrap.age)   <span class=\"comment\">// 'fun-age'        --发生了变化---</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.age)  <span class=\"comment\">// 'age is not defined'   --发生了变化---</span></span><br></pre></td></tr></table></figure>\n<p>例子B运行时：</p>\n<blockquote>\n<p><code>wrap.obj()</code>执行后，在执行<code>fun</code>时，把<code>this</code>， call进去了, 这个<code>this</code>是指向<code>wrap</code>，所以<code>fun</code>执行时其中的<code>this</code>指向的是<code>wrap</code>，自然改变的就是<code>wrap</code>中的<code>age</code>，这就是<code>call</code>的作用改变了<code>fun</code>执行时的上下文；</p>\n</blockquote>\n<p>好累，反正我是大概懂了他（this）刚才干了什么；</p>\n<hr>\n<p>那么在我们的coding中，一般什么时候用到call了？</p>\n<h2 id=\"call的用法\"><a href=\"#call的用法\" class=\"headerlink\" title=\"call的用法\"></a>call的用法</h2><h3 id=\"利用call来-做继承\"><a href=\"#利用call来-做继承\" class=\"headerlink\" title=\"利用call来 做继承\"></a>利用call来 做继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'longlee'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> student = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> st = <span class=\"keyword\">new</span> student ();</span><br><span class=\"line\"></span><br><span class=\"line\">g1.fun()  <span class=\"comment\">// 输出： longlee</span></span><br></pre></td></tr></table></figure>\n<p>如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；</p>\n<h3 id=\"判断数据的类型\"><a href=\"#判断数据的类型\" class=\"headerlink\" title=\"判断数据的类型\"></a>判断数据的类型</h3><blockquote>\n<p>【object、 array、 null】<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'longlee'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = [<span class=\"string\">'longlee'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj1)    <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj2)    <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj3)    <span class=\"comment\">// \"[object Null]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">12</span>)      <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"类（伪）数组使用数组方法\"><a href=\"#类（伪）数组使用数组方法\" class=\"headerlink\" title=\"类（伪）数组使用数组方法\"></a>类（伪）数组使用数组方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arg = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"><span class=\"built_in\">arguments</span>是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,</span><br><span class=\"line\"></span><br><span class=\"line\">但是我们能通过 <span class=\"built_in\">Array</span>.prototype.slice.call 转换为真正的数组</span><br><span class=\"line\">这样 <span class=\"built_in\">arguments</span> 就可以应用 <span class=\"built_in\">Array</span> 下的所有方法了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数组中的最大值和最小值\"><a href=\"#获取数组中的最大值和最小值\" class=\"headerlink\" title=\"获取数组中的最大值和最小值\"></a>获取数组中的最大值和最小值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxInNumbers = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>, <span class=\"number\">55</span>, <span class=\"number\">888</span> , <span class=\"number\">521</span> , <span class=\"number\">-36</span>); <span class=\"comment\">// 888</span></span><br><span class=\"line\">number 本身没有 max 方法，但是 <span class=\"built_in\">Math</span> 有，我们就可以借助 call 使用其方法。</span><br></pre></td></tr></table></figure>\n<p>就说到这了，再说下去，我自己也快消化不良了、、、、</p>\n<hr>\n<p>题外话：<br>说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法<br><code>Math.max(...[2,1,3])</code>  // 3<br><code>Math.min(...[2,1,3])</code>  // 1</p>\n<p>个人见解，有误之处，大神请指出，以免改正！<br>弄懂 call 了。可以继续打 call 了</p>\n"},{"title":"每个JavaScript程序员都需要知道的5个数组方法","date":"2017-11-07T07:16:00.000Z","description":"操作数组的5个方法，forEach、map、filter、indexOf、every","_content":"### Array.forEach()\n> .forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。\n .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。\n\n```js\nvar score = ['9', '13', '10'];\nscore.forEach(function(item, index){\n    console.log(item, index)\n});\n    //  9  0\n    // 13  1\n    // 10  2\n```\n\n### Array.map()\n>   .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。\n> 如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。\n\n```js\nvar numbers = [2, 4, 6, 8];\n\nvar doubleNums = numbers.map(function(element) {\n    return element * 2;\n});\nconsole.log('doubleNums: ', doubleNums)\n```\n\n\n### Array.filter()\n> .filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。\n\n```js\nvar scores = [3, 12, 5, 23, 19, 7];\n\nvar topScores = scores.filter(function(item){\n    if (item > 10){\n        return true;\n    } else {\n        return false;\n    }\n});\n\nconsole.log('topScores: ', topScores);\n```\n\n\n### Array.indexOf()\n> indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。\n\n```js\nvar a = [2, 9, 9, 18];\nvar i = a.indexOf(9);\nconsole.log('i: ', i);\n/*\nif (a.indexOf(7) === -1) {\n  // 数组中没有这个元素\n}*/\n```\n\n\n### Array.every()\n> .every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。\n如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。\n\n```js\nvar ages = [23, 19, 32, 44];\n\nvar olderThan18 = ages.every(function(element) {\n    return element > 18;\n});\n\nconsole.log('olderThan18: ', olderThan18);\n```\n\nTips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。\n","source":"_posts/js/array/array-method-01.md","raw":"---\ntitle: 每个JavaScript程序员都需要知道的5个数组方法\ndate: 2017-11-7 15:16:00\ndescription: \"操作数组的5个方法，forEach、map、filter、indexOf、every\"\ntags: [数组]\ncategories: [JavaScript]\n---\n### Array.forEach()\n> .forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。\n .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。\n\n```js\nvar score = ['9', '13', '10'];\nscore.forEach(function(item, index){\n    console.log(item, index)\n});\n    //  9  0\n    // 13  1\n    // 10  2\n```\n\n### Array.map()\n>   .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。\n> 如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。\n\n```js\nvar numbers = [2, 4, 6, 8];\n\nvar doubleNums = numbers.map(function(element) {\n    return element * 2;\n});\nconsole.log('doubleNums: ', doubleNums)\n```\n\n\n### Array.filter()\n> .filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。\n\n```js\nvar scores = [3, 12, 5, 23, 19, 7];\n\nvar topScores = scores.filter(function(item){\n    if (item > 10){\n        return true;\n    } else {\n        return false;\n    }\n});\n\nconsole.log('topScores: ', topScores);\n```\n\n\n### Array.indexOf()\n> indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。\n\n```js\nvar a = [2, 9, 9, 18];\nvar i = a.indexOf(9);\nconsole.log('i: ', i);\n/*\nif (a.indexOf(7) === -1) {\n  // 数组中没有这个元素\n}*/\n```\n\n\n### Array.every()\n> .every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。\n如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。\n\n```js\nvar ages = [23, 19, 32, 44];\n\nvar olderThan18 = ages.every(function(element) {\n    return element > 18;\n});\n\nconsole.log('olderThan18: ', olderThan18);\n```\n\nTips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。\n","slug":"js/array/array-method-01","published":1,"updated":"2018-09-04T13:49:59.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tru001z6oosgf4x61fy","content":"<h3 id=\"Array-forEach\"><a href=\"#Array-forEach\" class=\"headerlink\" title=\"Array.forEach()\"></a>Array.forEach()</h3><blockquote>\n<p>.forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。<br> .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score = [<span class=\"string\">'9'</span>, <span class=\"string\">'13'</span>, <span class=\"string\">'10'</span>];</span><br><span class=\"line\">score.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item, index)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    <span class=\"comment\">//  9  0</span></span><br><span class=\"line\">    <span class=\"comment\">// 13  1</span></span><br><span class=\"line\">    <span class=\"comment\">// 10  2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-map\"><a href=\"#Array-map\" class=\"headerlink\" title=\"Array.map()\"></a>Array.map()</h3><blockquote>\n<p>  .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。<br>如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doubleNums = numbers.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'doubleNums: '</span>, doubleNums)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-filter\"><a href=\"#Array-filter\" class=\"headerlink\" title=\"Array.filter()\"></a>Array.filter()</h3><blockquote>\n<p>.filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> topScores = scores.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'topScores: '</span>, topScores);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-indexOf\"><a href=\"#Array-indexOf\" class=\"headerlink\" title=\"Array.indexOf()\"></a>Array.indexOf()</h3><blockquote>\n<p>indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = a.indexOf(<span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'i: '</span>, i);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">if (a.indexOf(7) === -1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 数组中没有这个元素</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-every\"><a href=\"#Array-every\" class=\"headerlink\" title=\"Array.every()\"></a>Array.every()</h3><blockquote>\n<p>.every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。<br>如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> olderThan18 = ages.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'olderThan18: '</span>, olderThan18);</span><br></pre></td></tr></table></figure>\n<p>Tips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Array-forEach\"><a href=\"#Array-forEach\" class=\"headerlink\" title=\"Array.forEach()\"></a>Array.forEach()</h3><blockquote>\n<p>.forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。<br> .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score = [<span class=\"string\">'9'</span>, <span class=\"string\">'13'</span>, <span class=\"string\">'10'</span>];</span><br><span class=\"line\">score.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item, index)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    <span class=\"comment\">//  9  0</span></span><br><span class=\"line\">    <span class=\"comment\">// 13  1</span></span><br><span class=\"line\">    <span class=\"comment\">// 10  2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-map\"><a href=\"#Array-map\" class=\"headerlink\" title=\"Array.map()\"></a>Array.map()</h3><blockquote>\n<p>  .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。<br>如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doubleNums = numbers.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'doubleNums: '</span>, doubleNums)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-filter\"><a href=\"#Array-filter\" class=\"headerlink\" title=\"Array.filter()\"></a>Array.filter()</h3><blockquote>\n<p>.filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> topScores = scores.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'topScores: '</span>, topScores);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-indexOf\"><a href=\"#Array-indexOf\" class=\"headerlink\" title=\"Array.indexOf()\"></a>Array.indexOf()</h3><blockquote>\n<p>indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = a.indexOf(<span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'i: '</span>, i);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">if (a.indexOf(7) === -1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  // 数组中没有这个元素</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-every\"><a href=\"#Array-every\" class=\"headerlink\" title=\"Array.every()\"></a>Array.every()</h3><blockquote>\n<p>.every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。<br>如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> olderThan18 = ages.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'olderThan18: '</span>, olderThan18);</span><br></pre></td></tr></table></figure>\n<p>Tips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。</p>\n"},{"title":"获取浏览器url 参数","date":"2018-02-06T07:16:00.000Z","description":"获取url中参数","_content":"\n#### 1、获取当前url的方法： \n```js\n当前url = 'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&page=1&type=note'\nvar href = window.location.href    // 获取完整 url路径\nvar search = window.location.search  // 获取从？开始的参数部分\n\n```\n#### 2、将url中的参数转换成中文\n 知识点 来自W3C\n\n#####  编码`encodeURI() ` 解码`decodeURI()`\n1. 把字符串作为 URI 进行编码。\n2. 对 / ? : @ & = + $ #  不会转义。\n\n##### 编码 `encodeURIComponent() `  解码 `decodeURIComponent()`\n```js\nvar src = '%2F2018%2F02%2F06%2Fjs%2Fcommon%2FparseUrlParams%2F'\ndecodeURIComponent(src) // \"/2018/02/06/js/common/parseUrlParams/\"\n```\n1. 把字符串作为 URI 组件进行编码。\n2. 不会对 ASCII 字母和数字进行编码，\n3. 也不会对这些 ASCII 标点符号 - _ . ! ~ * ' ( ) 进行编码：\n4. 其他字符（比如 ：;/?:@&=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。\n\n#### 3、获取URL参数\n```js\nurl = decodeURI(search) // 编码字符 解码\nvar splitIndex = url.indexOf('?')  // 返回第一个？号的位置\nvar str = url.substring(splitIndex + 1) // 获取到查询参数\n\n```\n##### 3.1 获取url中某一个参数的值的方法\n```js\n\nvar getStrParam = function (str, name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = str.match(reg);\n    if (r != null) return r[2];\n    return '';\n}\n```\n##### 3.2 获取url中所有的参数，序列在在一个对象中；\n```js\n\nvar getAllUrlParam = function(str) {\n    var urlArr = str.split('&')\n    var obj = {}\n    for(var i = 0; i < urlArr.length; i++) {\n        var arg = urlArr[i].split('=')\n        obj[arg[0]] = arg[1]\n    }\n    return obj\n}\n```\n***\n**一道练手题送给大家：**   \n将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？\n```js\nvar url = 'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&page=1&type=&key=aa&key=bb&'\n```\n\n预期结果：\n```js\nobj = {\n    q: '参数',  // 中文\n    page: \"1\",\n    type: true, // 空值为ture\n    key: [\"aa\", \"bb\"] // 相同的key放在数组中\n}\n```","source":"_posts/js/common/parseUrlParams.md","raw":"---\ntitle: 获取浏览器url 参数\ndate: 2018-02-06 15:16:00\ndescription: \"获取url中参数\"\ntags: [算法]\ncategories: [JavaScript]\n---\n\n#### 1、获取当前url的方法： \n```js\n当前url = 'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&page=1&type=note'\nvar href = window.location.href    // 获取完整 url路径\nvar search = window.location.search  // 获取从？开始的参数部分\n\n```\n#### 2、将url中的参数转换成中文\n 知识点 来自W3C\n\n#####  编码`encodeURI() ` 解码`decodeURI()`\n1. 把字符串作为 URI 进行编码。\n2. 对 / ? : @ & = + $ #  不会转义。\n\n##### 编码 `encodeURIComponent() `  解码 `decodeURIComponent()`\n```js\nvar src = '%2F2018%2F02%2F06%2Fjs%2Fcommon%2FparseUrlParams%2F'\ndecodeURIComponent(src) // \"/2018/02/06/js/common/parseUrlParams/\"\n```\n1. 把字符串作为 URI 组件进行编码。\n2. 不会对 ASCII 字母和数字进行编码，\n3. 也不会对这些 ASCII 标点符号 - _ . ! ~ * ' ( ) 进行编码：\n4. 其他字符（比如 ：;/?:@&=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。\n\n#### 3、获取URL参数\n```js\nurl = decodeURI(search) // 编码字符 解码\nvar splitIndex = url.indexOf('?')  // 返回第一个？号的位置\nvar str = url.substring(splitIndex + 1) // 获取到查询参数\n\n```\n##### 3.1 获取url中某一个参数的值的方法\n```js\n\nvar getStrParam = function (str, name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = str.match(reg);\n    if (r != null) return r[2];\n    return '';\n}\n```\n##### 3.2 获取url中所有的参数，序列在在一个对象中；\n```js\n\nvar getAllUrlParam = function(str) {\n    var urlArr = str.split('&')\n    var obj = {}\n    for(var i = 0; i < urlArr.length; i++) {\n        var arg = urlArr[i].split('=')\n        obj[arg[0]] = arg[1]\n    }\n    return obj\n}\n```\n***\n**一道练手题送给大家：**   \n将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？\n```js\nvar url = 'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&page=1&type=&key=aa&key=bb&'\n```\n\n预期结果：\n```js\nobj = {\n    q: '参数',  // 中文\n    page: \"1\",\n    type: true, // 空值为ture\n    key: [\"aa\", \"bb\"] // 相同的key放在数组中\n}\n```","slug":"js/common/parseUrlParams","published":1,"updated":"2018-11-29T08:39:36.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trv00206oosh8ihmtu4","content":"<h4 id=\"1、获取当前url的方法：\"><a href=\"#1、获取当前url的方法：\" class=\"headerlink\" title=\"1、获取当前url的方法：\"></a>1、获取当前url的方法：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前url = <span class=\"string\">'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;page=1&amp;type=note'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.href    <span class=\"comment\">// 获取完整 url路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"built_in\">window</span>.location.search  <span class=\"comment\">// 获取从？开始的参数部分</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、将url中的参数转换成中文\"><a href=\"#2、将url中的参数转换成中文\" class=\"headerlink\" title=\"2、将url中的参数转换成中文\"></a>2、将url中的参数转换成中文</h4><p> 知识点 来自W3C</p>\n<h5 id=\"编码encodeURI-解码decodeURI\"><a href=\"#编码encodeURI-解码decodeURI\" class=\"headerlink\" title=\"编码encodeURI() 解码decodeURI()\"></a>编码<code>encodeURI()</code> 解码<code>decodeURI()</code></h5><ol>\n<li>把字符串作为 URI 进行编码。</li>\n<li>对 / ? : @ &amp; = + $ #  不会转义。</li>\n</ol>\n<h5 id=\"编码-encodeURIComponent-解码-decodeURIComponent\"><a href=\"#编码-encodeURIComponent-解码-decodeURIComponent\" class=\"headerlink\" title=\"编码 encodeURIComponent()  解码 decodeURIComponent()\"></a>编码 <code>encodeURIComponent()</code>  解码 <code>decodeURIComponent()</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> src = <span class=\"string\">'%2F2018%2F02%2F06%2Fjs%2Fcommon%2FparseUrlParams%2F'</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>(src) <span class=\"comment\">// \"/2018/02/06/js/common/parseUrlParams/\"</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>把字符串作为 URI 组件进行编码。</li>\n<li>不会对 ASCII 字母和数字进行编码，</li>\n<li>也不会对这些 ASCII 标点符号 - _ . ! ~ * ‘ ( ) 进行编码：</li>\n<li>其他字符（比如 ：;/?:@&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</li>\n</ol>\n<h4 id=\"3、获取URL参数\"><a href=\"#3、获取URL参数\" class=\"headerlink\" title=\"3、获取URL参数\"></a>3、获取URL参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"built_in\">decodeURI</span>(search) <span class=\"comment\">// 编码字符 解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> splitIndex = url.indexOf(<span class=\"string\">'?'</span>)  <span class=\"comment\">// 返回第一个？号的位置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = url.substring(splitIndex + <span class=\"number\">1</span>) <span class=\"comment\">// 获取到查询参数</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-1-获取url中某一个参数的值的方法\"><a href=\"#3-1-获取url中某一个参数的值的方法\" class=\"headerlink\" title=\"3.1 获取url中某一个参数的值的方法\"></a>3.1 获取url中某一个参数的值的方法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getStrParam = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> r[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-2-获取url中所有的参数，序列在在一个对象中；\"><a href=\"#3-2-获取url中所有的参数，序列在在一个对象中；\" class=\"headerlink\" title=\"3.2 获取url中所有的参数，序列在在一个对象中；\"></a>3.2 获取url中所有的参数，序列在在一个对象中；</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getAllUrlParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlArr = str.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arg = urlArr[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        obj[arg[<span class=\"number\">0</span>]] = arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>一道练手题送给大家：</strong><br>将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&amp;page=1&amp;type=&amp;key=aa&amp;key=bb&amp;'</span></span><br></pre></td></tr></table></figure></p>\n<p>预期结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = &#123;</span><br><span class=\"line\">    q: <span class=\"string\">'参数'</span>,  <span class=\"comment\">// 中文</span></span><br><span class=\"line\">    page: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    type: <span class=\"literal\">true</span>, <span class=\"comment\">// 空值为ture</span></span><br><span class=\"line\">    key: [<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"bb\"</span>] <span class=\"comment\">// 相同的key放在数组中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、获取当前url的方法：\"><a href=\"#1、获取当前url的方法：\" class=\"headerlink\" title=\"1、获取当前url的方法：\"></a>1、获取当前url的方法：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前url = <span class=\"string\">'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;page=1&amp;type=note'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.href    <span class=\"comment\">// 获取完整 url路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> search = <span class=\"built_in\">window</span>.location.search  <span class=\"comment\">// 获取从？开始的参数部分</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、将url中的参数转换成中文\"><a href=\"#2、将url中的参数转换成中文\" class=\"headerlink\" title=\"2、将url中的参数转换成中文\"></a>2、将url中的参数转换成中文</h4><p> 知识点 来自W3C</p>\n<h5 id=\"编码encodeURI-解码decodeURI\"><a href=\"#编码encodeURI-解码decodeURI\" class=\"headerlink\" title=\"编码encodeURI() 解码decodeURI()\"></a>编码<code>encodeURI()</code> 解码<code>decodeURI()</code></h5><ol>\n<li>把字符串作为 URI 进行编码。</li>\n<li>对 / ? : @ &amp; = + $ #  不会转义。</li>\n</ol>\n<h5 id=\"编码-encodeURIComponent-解码-decodeURIComponent\"><a href=\"#编码-encodeURIComponent-解码-decodeURIComponent\" class=\"headerlink\" title=\"编码 encodeURIComponent()  解码 decodeURIComponent()\"></a>编码 <code>encodeURIComponent()</code>  解码 <code>decodeURIComponent()</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> src = <span class=\"string\">'%2F2018%2F02%2F06%2Fjs%2Fcommon%2FparseUrlParams%2F'</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURIComponent</span>(src) <span class=\"comment\">// \"/2018/02/06/js/common/parseUrlParams/\"</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>把字符串作为 URI 组件进行编码。</li>\n<li>不会对 ASCII 字母和数字进行编码，</li>\n<li>也不会对这些 ASCII 标点符号 - _ . ! ~ * ‘ ( ) 进行编码：</li>\n<li>其他字符（比如 ：;/?:@&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</li>\n</ol>\n<h4 id=\"3、获取URL参数\"><a href=\"#3、获取URL参数\" class=\"headerlink\" title=\"3、获取URL参数\"></a>3、获取URL参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"built_in\">decodeURI</span>(search) <span class=\"comment\">// 编码字符 解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> splitIndex = url.indexOf(<span class=\"string\">'?'</span>)  <span class=\"comment\">// 返回第一个？号的位置</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = url.substring(splitIndex + <span class=\"number\">1</span>) <span class=\"comment\">// 获取到查询参数</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-1-获取url中某一个参数的值的方法\"><a href=\"#3-1-获取url中某一个参数的值的方法\" class=\"headerlink\" title=\"3.1 获取url中某一个参数的值的方法\"></a>3.1 获取url中某一个参数的值的方法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getStrParam = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> r[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-2-获取url中所有的参数，序列在在一个对象中；\"><a href=\"#3-2-获取url中所有的参数，序列在在一个对象中；\" class=\"headerlink\" title=\"3.2 获取url中所有的参数，序列在在一个对象中；\"></a>3.2 获取url中所有的参数，序列在在一个对象中；</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getAllUrlParam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlArr = str.split(<span class=\"string\">'&amp;'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arg = urlArr[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        obj[arg[<span class=\"number\">0</span>]] = arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>一道练手题送给大家：</strong><br>将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&amp;page=1&amp;type=&amp;key=aa&amp;key=bb&amp;'</span></span><br></pre></td></tr></table></figure></p>\n<p>预期结果：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = &#123;</span><br><span class=\"line\">    q: <span class=\"string\">'参数'</span>,  <span class=\"comment\">// 中文</span></span><br><span class=\"line\">    page: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    type: <span class=\"literal\">true</span>, <span class=\"comment\">// 空值为ture</span></span><br><span class=\"line\">    key: [<span class=\"string\">\"aa\"</span>, <span class=\"string\">\"bb\"</span>] <span class=\"comment\">// 相同的key放在数组中</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"正则基础属性手册","date":"2018-09-01T05:11:31.000Z","_content":"摘要: 一堆的符号加字符数字都是代表什么意思呢~~\n<!-- more -->\n\n> 前端开发中，经常用到正则表达式来对表单或者一些数据进行校验，在此总结正则使用的基础知识，以及一些工作中常用的正则表达式·\n\n### 正则基础知识\n\n#### 字面量\n\n**`var reg = /\\bis\\b/g` -->正则表达式对象**\n> /g表示全局匹配，否则只匹配第一个\n> /b单词边界，后面详细说明\n\n```js\nvar str = 'this is a dog is!'\nstr.replace(reg,'IS') // 输出：\"this IS a dog Is!\"\n```\n#### 构造函数\n\n**`var reg = new RegExp(/\\bis\\b/g) `**\n```js\nvar str = 'this is a regexp'\nreg.test(str) // 返回true，字符串中包含 is\n```\n\n#### 修饰符\n| @ | @ | @ |\n| ------ | ------ | ------ |\n| g | global | 全文进行搜索匹配； 默认false，匹配到第一个时停止 |\n| i | ignoreCass | 忽略大小写，默认false，对大小写敏感 |\n| m | multiline | 默认false，多行搜索 |\n| lastIndex |  - | 是当前匹配内容的的最后一个字符的下一个位置 |\n| source |  - | 正则表达式的文本字符串 |\n\n#### 元字符\n| @ | @ |\n| ------ | ------ |\n| **\\t** | 水平制表符table |\n| **\\v** | 垂直制表符 |\n| **\\n** | 换行符 |\n| **\\r** | 回车符 |\n| **\\0** | 空字符 |\n| **\\f** | 换页符 |\n| **\\cX** | ctrl +x |\n\n#### 字符类\n\n| @ | @ |\n| --- | --- |\n| [] | 元字符，来构建一个简单得类 |\n| [abc] | 字符只能包含abc中的一种或者多种 |\n| ^abc | 字符类取反,非a或b或c的内容 |\n\n#### 范围内\n\n| @ | @ |\n| - | - |\n| [0-9] | 匹配1=0到9的数字 |\n| [a-zA-Z] | 匹配大小写字母 |\n| [a-zA-Z-] | 匹配大小写字母与- |\n\n#### 预定义类\n\n| @ | @ | @ |\n| - | - | - |\n| .   | [^\\r\\n] | 除了回车符和换行符之外的所有字符 |\n| \\d  | [[0-9] | 数字字符 |\n|\\D   | [^0-9]  | 非数字字符 |\n|\\s   | [\\t\\n\\x0B\\f\\r]  | 空白符 |\n|\\S   | [^\\t\\n\\x0B\\f\\r] | 非空白符 |\n|\\w | [a-zA-Z_0-9]     | 单词字符(字母、数字下划线) |\n|\\W| [^a-zA-Z_0-9]     | 非单词字符 |\n\n#### 边界字符\n| @ | @ |\n| - | - |\n|   ^  | 以xxx开始 |\n|\t$  | 以xxx结束 |\n|\t\\b | 单词边界 |\n|\t\\B | 非单词边界 |\n\n#### 量词\n| @ | @ |\n| - | - |\n| **?**   |\t\t出现0次或一次 (最多出现一次) |\n| **+**   |\t\t出现一次或者多次(至少一次) |\n| *****   |\t\t出现0次或者多次(任意次) |\n| {n} | \t出现n次 |\n| {n,m}\t| 出现n到m次 |\n| {n,}\t| 至少出现n次 |\n\n#### 贪婪模式\n\n```js\nvar str = '123456789'\nstr.replace(/\\d{2,8}/,'X') // 输出 X9\n// 按照最大的匹配，尽可能多的匹配\n```\n\n#### 非贪婪模式\n\n> 在量词后面加上 ?\n\n```js\nvar str = '12345678'\nstr.replace(/\\d{3,6}?/,'X') // 输出 XX78\n// 尝试最小可能123、456的匹配\n```\n\n#### 分组 或\n\n`()` 分组  `|` 或\n\n反向引用\n```js\nvar str = '2018-09-01'\nstr.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g,'$3-$2-$1')\n//输出： '01-09-2018'\n```\n\n#### 前瞻\n> 前瞻: 就是在正则表达式匹配到规则的时候，向前检查是否符合断言，\n> 后顾、后瞻方向相反---js不支持后顾\n\nreg匹配后，检查assert是否符合\n正向前瞻      `reg(?=assert)`\t  符合断言\n负向前瞻 \t  `reg(?!assert)`   不符合这个断言\n**example1:**\n```js\nvar str = 'a2*3'\nstr.replace(/\\w(?=\\d)/g,'X')\n// 输出：'X2*3'\n// 匹配单词字符并且后面是数字\n```\n**example2:**\n```js\nvar str = 'Hello, Hi, I am Hilary.';\nvar reg = /H(?=i)/g;\nvar newStr = str.replace(reg, \"T\");\n//输出： Hello, Ti, I am Tilary.\n```\n### 一个强大的正则可视化工具\n工具传送门： [RegExper](https://regexper.com/)\n效果如下： \n![regexper](/public_s/images/regexper.png)\n这样的正则表达式是不是清晰多了~~~ \n### 后记\n\n正则表达式基础属性大概就这多了，下一节将继续分析正则表达式的对象属性~~\n\n","source":"_posts/js/common/regexp.md","raw":"---\ntitle: 正则基础属性手册\ntags: ['正则表达式']\ncategories: ['前端开发']\ndate: 2018-09-01 13:11:31\n---\n摘要: 一堆的符号加字符数字都是代表什么意思呢~~\n<!-- more -->\n\n> 前端开发中，经常用到正则表达式来对表单或者一些数据进行校验，在此总结正则使用的基础知识，以及一些工作中常用的正则表达式·\n\n### 正则基础知识\n\n#### 字面量\n\n**`var reg = /\\bis\\b/g` -->正则表达式对象**\n> /g表示全局匹配，否则只匹配第一个\n> /b单词边界，后面详细说明\n\n```js\nvar str = 'this is a dog is!'\nstr.replace(reg,'IS') // 输出：\"this IS a dog Is!\"\n```\n#### 构造函数\n\n**`var reg = new RegExp(/\\bis\\b/g) `**\n```js\nvar str = 'this is a regexp'\nreg.test(str) // 返回true，字符串中包含 is\n```\n\n#### 修饰符\n| @ | @ | @ |\n| ------ | ------ | ------ |\n| g | global | 全文进行搜索匹配； 默认false，匹配到第一个时停止 |\n| i | ignoreCass | 忽略大小写，默认false，对大小写敏感 |\n| m | multiline | 默认false，多行搜索 |\n| lastIndex |  - | 是当前匹配内容的的最后一个字符的下一个位置 |\n| source |  - | 正则表达式的文本字符串 |\n\n#### 元字符\n| @ | @ |\n| ------ | ------ |\n| **\\t** | 水平制表符table |\n| **\\v** | 垂直制表符 |\n| **\\n** | 换行符 |\n| **\\r** | 回车符 |\n| **\\0** | 空字符 |\n| **\\f** | 换页符 |\n| **\\cX** | ctrl +x |\n\n#### 字符类\n\n| @ | @ |\n| --- | --- |\n| [] | 元字符，来构建一个简单得类 |\n| [abc] | 字符只能包含abc中的一种或者多种 |\n| ^abc | 字符类取反,非a或b或c的内容 |\n\n#### 范围内\n\n| @ | @ |\n| - | - |\n| [0-9] | 匹配1=0到9的数字 |\n| [a-zA-Z] | 匹配大小写字母 |\n| [a-zA-Z-] | 匹配大小写字母与- |\n\n#### 预定义类\n\n| @ | @ | @ |\n| - | - | - |\n| .   | [^\\r\\n] | 除了回车符和换行符之外的所有字符 |\n| \\d  | [[0-9] | 数字字符 |\n|\\D   | [^0-9]  | 非数字字符 |\n|\\s   | [\\t\\n\\x0B\\f\\r]  | 空白符 |\n|\\S   | [^\\t\\n\\x0B\\f\\r] | 非空白符 |\n|\\w | [a-zA-Z_0-9]     | 单词字符(字母、数字下划线) |\n|\\W| [^a-zA-Z_0-9]     | 非单词字符 |\n\n#### 边界字符\n| @ | @ |\n| - | - |\n|   ^  | 以xxx开始 |\n|\t$  | 以xxx结束 |\n|\t\\b | 单词边界 |\n|\t\\B | 非单词边界 |\n\n#### 量词\n| @ | @ |\n| - | - |\n| **?**   |\t\t出现0次或一次 (最多出现一次) |\n| **+**   |\t\t出现一次或者多次(至少一次) |\n| *****   |\t\t出现0次或者多次(任意次) |\n| {n} | \t出现n次 |\n| {n,m}\t| 出现n到m次 |\n| {n,}\t| 至少出现n次 |\n\n#### 贪婪模式\n\n```js\nvar str = '123456789'\nstr.replace(/\\d{2,8}/,'X') // 输出 X9\n// 按照最大的匹配，尽可能多的匹配\n```\n\n#### 非贪婪模式\n\n> 在量词后面加上 ?\n\n```js\nvar str = '12345678'\nstr.replace(/\\d{3,6}?/,'X') // 输出 XX78\n// 尝试最小可能123、456的匹配\n```\n\n#### 分组 或\n\n`()` 分组  `|` 或\n\n反向引用\n```js\nvar str = '2018-09-01'\nstr.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g,'$3-$2-$1')\n//输出： '01-09-2018'\n```\n\n#### 前瞻\n> 前瞻: 就是在正则表达式匹配到规则的时候，向前检查是否符合断言，\n> 后顾、后瞻方向相反---js不支持后顾\n\nreg匹配后，检查assert是否符合\n正向前瞻      `reg(?=assert)`\t  符合断言\n负向前瞻 \t  `reg(?!assert)`   不符合这个断言\n**example1:**\n```js\nvar str = 'a2*3'\nstr.replace(/\\w(?=\\d)/g,'X')\n// 输出：'X2*3'\n// 匹配单词字符并且后面是数字\n```\n**example2:**\n```js\nvar str = 'Hello, Hi, I am Hilary.';\nvar reg = /H(?=i)/g;\nvar newStr = str.replace(reg, \"T\");\n//输出： Hello, Ti, I am Tilary.\n```\n### 一个强大的正则可视化工具\n工具传送门： [RegExper](https://regexper.com/)\n效果如下： \n![regexper](/public_s/images/regexper.png)\n这样的正则表达式是不是清晰多了~~~ \n### 后记\n\n正则表达式基础属性大概就这多了，下一节将继续分析正则表达式的对象属性~~\n\n","slug":"js/common/regexp","published":1,"updated":"2018-09-04T13:49:59.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trx00256ooswdmny1nn","content":"<p>摘要: 一堆的符号加字符数字都是代表什么意思呢~~<br><a id=\"more\"></a></p>\n<blockquote>\n<p>前端开发中，经常用到正则表达式来对表单或者一些数据进行校验，在此总结正则使用的基础知识，以及一些工作中常用的正则表达式·</p>\n</blockquote>\n<h3 id=\"正则基础知识\"><a href=\"#正则基础知识\" class=\"headerlink\" title=\"正则基础知识\"></a>正则基础知识</h3><h4 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h4><p><strong><code>var reg = /\\bis\\b/g</code> –&gt;正则表达式对象</strong></p>\n<blockquote>\n<p>/g表示全局匹配，否则只匹配第一个<br>/b单词边界，后面详细说明</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'this is a dog is!'</span></span><br><span class=\"line\">str.replace(reg,<span class=\"string\">'IS'</span>) <span class=\"comment\">// 输出：\"this IS a dog Is!\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><strong><code>var reg = new RegExp(/\\bis\\b/g)</code></strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'this is a regexp'</span></span><br><span class=\"line\">reg.test(str) <span class=\"comment\">// 返回true，字符串中包含 is</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g</td>\n<td>global</td>\n<td>全文进行搜索匹配； 默认false，匹配到第一个时停止</td>\n</tr>\n<tr>\n<td>i</td>\n<td>ignoreCass</td>\n<td>忽略大小写，默认false，对大小写敏感</td>\n</tr>\n<tr>\n<td>m</td>\n<td>multiline</td>\n<td>默认false，多行搜索</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>-</td>\n<td>是当前匹配内容的的最后一个字符的下一个位置</td>\n</tr>\n<tr>\n<td>source</td>\n<td>-</td>\n<td>正则表达式的文本字符串</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>\\t</strong></td>\n<td>水平制表符table</td>\n</tr>\n<tr>\n<td><strong>\\v</strong></td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><strong>\\r</strong></td>\n<td>回车符</td>\n</tr>\n<tr>\n<td><strong>\\0</strong></td>\n<td>空字符</td>\n</tr>\n<tr>\n<td><strong>\\f</strong></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><strong>\\cX</strong></td>\n<td>ctrl +x</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[]</td>\n<td>元字符，来构建一个简单得类</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>字符只能包含abc中的一种或者多种</td>\n</tr>\n<tr>\n<td>^abc</td>\n<td>字符类取反,非a或b或c的内容</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"范围内\"><a href=\"#范围内\" class=\"headerlink\" title=\"范围内\"></a>范围内</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[0-9]</td>\n<td>匹配1=0到9的数字</td>\n</tr>\n<tr>\n<td>[a-zA-Z]</td>\n<td>匹配大小写字母</td>\n</tr>\n<tr>\n<td>[a-zA-Z-]</td>\n<td>匹配大小写字母与-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>[^\\r\\n]</td>\n<td>除了回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\x0B\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\x0B\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符(字母、数字下划线)</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"边界字符\"><a href=\"#边界字符\" class=\"headerlink\" title=\"边界字符\"></a>边界字符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>以xxx开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结束</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>?</strong></td>\n<td>出现0次或一次 (最多出现一次)</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>出现一次或者多次(至少一次)</td>\n</tr>\n<tr>\n<td><strong>*</strong></td>\n<td>出现0次或者多次(任意次)</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少出现n次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'123456789'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\d&#123;2,8&#125;/</span>,<span class=\"string\">'X'</span>) <span class=\"comment\">// 输出 X9</span></span><br><span class=\"line\"><span class=\"comment\">// 按照最大的匹配，尽可能多的匹配</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"非贪婪模式\"></a>非贪婪模式</h4><blockquote>\n<p>在量词后面加上 ?</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345678'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;?/</span>,<span class=\"string\">'X'</span>) <span class=\"comment\">// 输出 XX78</span></span><br><span class=\"line\"><span class=\"comment\">// 尝试最小可能123、456的匹配</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分组-或\"><a href=\"#分组-或\" class=\"headerlink\" title=\"分组 或\"></a>分组 或</h4><p><code>()</code> 分组  <code>|</code> 或</p>\n<p>反向引用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2018-09-01'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g</span>,<span class=\"string\">'$3-$2-$1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出： '01-09-2018'</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h4><blockquote>\n<p>前瞻: 就是在正则表达式匹配到规则的时候，向前检查是否符合断言，<br>后顾、后瞻方向相反—js不支持后顾</p>\n</blockquote>\n<p>reg匹配后，检查assert是否符合<br>正向前瞻      <code>reg(?=assert)</code>      符合断言<br>负向前瞻       <code>reg(?!assert)</code>   不符合这个断言<br><strong>example1:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'a2*3'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\w(?=\\d)/g</span>,<span class=\"string\">'X'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出：'X2*3'</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配单词字符并且后面是数字</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>example2:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'Hello, Hi, I am Hilary.'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/H(?=i)/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.replace(reg, <span class=\"string\">\"T\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出： Hello, Ti, I am Tilary.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一个强大的正则可视化工具\"><a href=\"#一个强大的正则可视化工具\" class=\"headerlink\" title=\"一个强大的正则可视化工具\"></a>一个强大的正则可视化工具</h3><p>工具传送门： <a href=\"https://regexper.com/\" target=\"_blank\" rel=\"noopener\">RegExper</a><br>效果如下：<br><img src=\"/public_s/images/regexper.png\" alt=\"regexper\"><br>这样的正则表达式是不是清晰多了~~~ </p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>正则表达式基础属性大概就这多了，下一节将继续分析正则表达式的对象属性~~</p>\n","site":{"data":{}},"excerpt":"<p>摘要: 一堆的符号加字符数字都是代表什么意思呢~~<br>","more":"</p>\n<blockquote>\n<p>前端开发中，经常用到正则表达式来对表单或者一些数据进行校验，在此总结正则使用的基础知识，以及一些工作中常用的正则表达式·</p>\n</blockquote>\n<h3 id=\"正则基础知识\"><a href=\"#正则基础知识\" class=\"headerlink\" title=\"正则基础知识\"></a>正则基础知识</h3><h4 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h4><p><strong><code>var reg = /\\bis\\b/g</code> –&gt;正则表达式对象</strong></p>\n<blockquote>\n<p>/g表示全局匹配，否则只匹配第一个<br>/b单词边界，后面详细说明</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'this is a dog is!'</span></span><br><span class=\"line\">str.replace(reg,<span class=\"string\">'IS'</span>) <span class=\"comment\">// 输出：\"this IS a dog Is!\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><strong><code>var reg = new RegExp(/\\bis\\b/g)</code></strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'this is a regexp'</span></span><br><span class=\"line\">reg.test(str) <span class=\"comment\">// 返回true，字符串中包含 is</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g</td>\n<td>global</td>\n<td>全文进行搜索匹配； 默认false，匹配到第一个时停止</td>\n</tr>\n<tr>\n<td>i</td>\n<td>ignoreCass</td>\n<td>忽略大小写，默认false，对大小写敏感</td>\n</tr>\n<tr>\n<td>m</td>\n<td>multiline</td>\n<td>默认false，多行搜索</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>-</td>\n<td>是当前匹配内容的的最后一个字符的下一个位置</td>\n</tr>\n<tr>\n<td>source</td>\n<td>-</td>\n<td>正则表达式的文本字符串</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>\\t</strong></td>\n<td>水平制表符table</td>\n</tr>\n<tr>\n<td><strong>\\v</strong></td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><strong>\\r</strong></td>\n<td>回车符</td>\n</tr>\n<tr>\n<td><strong>\\0</strong></td>\n<td>空字符</td>\n</tr>\n<tr>\n<td><strong>\\f</strong></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><strong>\\cX</strong></td>\n<td>ctrl +x</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[]</td>\n<td>元字符，来构建一个简单得类</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>字符只能包含abc中的一种或者多种</td>\n</tr>\n<tr>\n<td>^abc</td>\n<td>字符类取反,非a或b或c的内容</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"范围内\"><a href=\"#范围内\" class=\"headerlink\" title=\"范围内\"></a>范围内</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[0-9]</td>\n<td>匹配1=0到9的数字</td>\n</tr>\n<tr>\n<td>[a-zA-Z]</td>\n<td>匹配大小写字母</td>\n</tr>\n<tr>\n<td>[a-zA-Z-]</td>\n<td>匹配大小写字母与-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>[^\\r\\n]</td>\n<td>除了回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\x0B\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\x0B\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符(字母、数字下划线)</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"边界字符\"><a href=\"#边界字符\" class=\"headerlink\" title=\"边界字符\"></a>边界字符</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>以xxx开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结束</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><table>\n<thead>\n<tr>\n<th>@</th>\n<th>@</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>?</strong></td>\n<td>出现0次或一次 (最多出现一次)</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>出现一次或者多次(至少一次)</td>\n</tr>\n<tr>\n<td><strong>*</strong></td>\n<td>出现0次或者多次(任意次)</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少出现n次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'123456789'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\d&#123;2,8&#125;/</span>,<span class=\"string\">'X'</span>) <span class=\"comment\">// 输出 X9</span></span><br><span class=\"line\"><span class=\"comment\">// 按照最大的匹配，尽可能多的匹配</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"非贪婪模式\"><a href=\"#非贪婪模式\" class=\"headerlink\" title=\"非贪婪模式\"></a>非贪婪模式</h4><blockquote>\n<p>在量词后面加上 ?</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345678'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;?/</span>,<span class=\"string\">'X'</span>) <span class=\"comment\">// 输出 XX78</span></span><br><span class=\"line\"><span class=\"comment\">// 尝试最小可能123、456的匹配</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分组-或\"><a href=\"#分组-或\" class=\"headerlink\" title=\"分组 或\"></a>分组 或</h4><p><code>()</code> 分组  <code>|</code> 或</p>\n<p>反向引用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2018-09-01'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g</span>,<span class=\"string\">'$3-$2-$1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出： '01-09-2018'</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前瞻\"><a href=\"#前瞻\" class=\"headerlink\" title=\"前瞻\"></a>前瞻</h4><blockquote>\n<p>前瞻: 就是在正则表达式匹配到规则的时候，向前检查是否符合断言，<br>后顾、后瞻方向相反—js不支持后顾</p>\n</blockquote>\n<p>reg匹配后，检查assert是否符合<br>正向前瞻      <code>reg(?=assert)</code>      符合断言<br>负向前瞻       <code>reg(?!assert)</code>   不符合这个断言<br><strong>example1:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'a2*3'</span></span><br><span class=\"line\">str.replace(<span class=\"regexp\">/\\w(?=\\d)/g</span>,<span class=\"string\">'X'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出：'X2*3'</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配单词字符并且后面是数字</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>example2:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'Hello, Hi, I am Hilary.'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/H(?=i)/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newStr = str.replace(reg, <span class=\"string\">\"T\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出： Hello, Ti, I am Tilary.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一个强大的正则可视化工具\"><a href=\"#一个强大的正则可视化工具\" class=\"headerlink\" title=\"一个强大的正则可视化工具\"></a>一个强大的正则可视化工具</h3><p>工具传送门： <a href=\"https://regexper.com/\" target=\"_blank\" rel=\"noopener\">RegExper</a><br>效果如下：<br><img src=\"/public_s/images/regexper.png\" alt=\"regexper\"><br>这样的正则表达式是不是清晰多了~~~ </p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>正则表达式基础属性大概就这多了，下一节将继续分析正则表达式的对象属性~~</p>"},{"title":"前后端联调工具之-Fiddler","date":"2018-09-01T04:55:49.000Z","_content":"tips: 开发必备调试工具-fiddler\n<!-- more -->\n\n### 前言\n>  现在的大型项目基本前后端分离；前端不仅仅只是负责界面，交互了；需要做的工作越来越多，但是都离不开和各个部门的沟通协作，这样才能高效率；最为密切的就是后端了，今天就简单的分享下在项目实战过程中用到的利器--`fiddle`工具；\n\n不就是fiddle嘛，抓包工具嘛，NO,NO,NO......\n\nFiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展\n\n你对HTTP 协议越了解， 你就能越掌握Fiddler的使用方法. 你越使用Fiddler,就越能帮助你了解HTTP协议.\n***\n### 轻描淡写-介绍下fiddle\n先贴一个官网地址：[fiddle官网](http://www.telerik.com/fiddler)\n至于怎么形容他： **The free web debugging proxy for any browser, system or platform**\n抓包、调试、代理、各种很强大的功能\n1. 不费话了，开始干活\n下载，一路next就可以安装好；ok，将看到这个界面\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/3124242747bc180d5bd04f6154b4de88)\n左边列表就是捕获到的所有请求，不妨随便百度一下，就能看到你百度的请求；\n> 这个是我点击百度搜索框，触发的请求，右边`webform`中可以看到这个请求的内容，下边的`JSON`是服务器返回的内容；很清晰，一目了然。\n\nfiddler工具的基本使用可以参考官网文档或者慕课网有视频教程；\n### fiddler的厉害之处\n#### To 测试妹子\n对于测试来说，如上所示，分析请求，定位是前端还是后端的问题，检验界面与数据是否一致，有时候出现神奇问题，要么是逻辑问题，要么是界面和数据不一致造成的，精准定位问题，精准发锅；\n#### To 大前端\nfiddler不只是具有简单的抓包功能，在他的社区有很多的插件，使他的能力发挥到极致；\n详细介绍下项目中常常使用的一个神器 **Willow**`--Fiddler的插件，提供重定向和host主机等功能`,三秒钟解决联调、跨域问题，没错就是三秒.\n贴一个下载地址：\n[fiddler2 + willow 下载](链接：http://pan.baidu.com/s/1boJxtqn)  密码：o3lg\n[fiddler4 + willow 下载](链接：http://pan.baidu.com/s/1hsaihog ) 密码：kf8p\n安装`fiddler`后安装插件 `willow`,willow如果安装失败，请尝试右键使用 管理员身份打开；安装好后会在右边看到一个绿色的小图标，ok，点击他；\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/7b53459a216d4ce5a1ef0943d0a31174)\n\n核心内容\n***\n**问题现状：** \n我们的项目通常开发时都跑在本地服务下，一般是`127.0.0.1:8080`,如果我们希望本地代码的服务能够正常访问后端，或者访问到测试机的真实数据，这就跨域了，因为本地和后端或者测试的都不在一个域名下，是无法访问到数据的，通常的做法是启动一个Nginx服务来进行转发，这一个过程很麻烦，配置改来改去，而且如果要做到，代码修改实时看到效果，那就更复杂了。。。\n\n**解决方案： **\n我的做法是： 将本地服务`127.0.0.1`代理到某个域名比如`www.cloud.com`,这时候访问这个域名就能看到自己的项目了，这个域名下也是木有后端或者测试机的接口的，怎么办了，继续代理转发，将域名下所有的接口代理到真实的IP下，比如后端或者测试机接口的服务在 `10.50.12.24:8088`下，那我们就将`www.cloud.com/order`[order是后端接口固定的项目名，每个接口都在这个目录下]指向`10.50.12.24:8088`下，完美解决；\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/c88065ebf2a4b8040301812671025009)\n顺着这个思路3步解决，\n1. 在willow中添加项目`快捷键ctrl+p`；\n2. 添加host代理`ctrl + o`;\n3. 添加指向add exten `ctrl + n`;\n> 不懂的童鞋看图\n\n图一：![](https://user-gold-cdn.xitu.io/2017/9/19/e888cb3b5523fc8e4b2ae5e75965a63b)\n图二：![](https://user-gold-cdn.xitu.io/2017/9/19/c9aa5ff11ffcda12670d8e35ed0d9e4d)\n好了可以开心的联调代码了；\nps： 这个checkbox框框表示是否启用，如果想去掉，点掉就好了；比手动去修改host方便多了；\n#### To 后端\n后端大侠有时候想这么干，用测试机的前端代码，来访问自己本地的服务，这样就不用浪费前端童鞋的资源了，测试机上自己测试；\n这个步奏其实就是上面的逆过程，简单多了，测试机的前端代码自然指向测试机的后端代码，使用上面思路的第三步；添加指向，指向本机，这里要注意两个点：\n1. 直接代理接口`www.cloud.com/order` --> 本地服务+端口\n2. 如果是https的，需要后端给tomcat配置https证书\n\n介绍就先到这里了，更多使用技巧，后续在更新。。。\n\n### 后记\n后端某个功能bug，不断地让前端点击按钮发请求，他来打断点，有时候我比较懒，就让后端自己点，后端如何访问前端开发机电脑上的代码，来访问自己电脑上的后端服务？\n这个问题大家可以思考下，下期分享。。。\n","source":"_posts/js/common/fiddle001.md","raw":"---\ntitle: 前后端联调工具之-Fiddler\ntags: ['联调工具']\ncategories: ['前端开发']\ndate: 2018-09-01 12:55:49\n---\ntips: 开发必备调试工具-fiddler\n<!-- more -->\n\n### 前言\n>  现在的大型项目基本前后端分离；前端不仅仅只是负责界面，交互了；需要做的工作越来越多，但是都离不开和各个部门的沟通协作，这样才能高效率；最为密切的就是后端了，今天就简单的分享下在项目实战过程中用到的利器--`fiddle`工具；\n\n不就是fiddle嘛，抓包工具嘛，NO,NO,NO......\n\nFiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展\n\n你对HTTP 协议越了解， 你就能越掌握Fiddler的使用方法. 你越使用Fiddler,就越能帮助你了解HTTP协议.\n***\n### 轻描淡写-介绍下fiddle\n先贴一个官网地址：[fiddle官网](http://www.telerik.com/fiddler)\n至于怎么形容他： **The free web debugging proxy for any browser, system or platform**\n抓包、调试、代理、各种很强大的功能\n1. 不费话了，开始干活\n下载，一路next就可以安装好；ok，将看到这个界面\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/3124242747bc180d5bd04f6154b4de88)\n左边列表就是捕获到的所有请求，不妨随便百度一下，就能看到你百度的请求；\n> 这个是我点击百度搜索框，触发的请求，右边`webform`中可以看到这个请求的内容，下边的`JSON`是服务器返回的内容；很清晰，一目了然。\n\nfiddler工具的基本使用可以参考官网文档或者慕课网有视频教程；\n### fiddler的厉害之处\n#### To 测试妹子\n对于测试来说，如上所示，分析请求，定位是前端还是后端的问题，检验界面与数据是否一致，有时候出现神奇问题，要么是逻辑问题，要么是界面和数据不一致造成的，精准定位问题，精准发锅；\n#### To 大前端\nfiddler不只是具有简单的抓包功能，在他的社区有很多的插件，使他的能力发挥到极致；\n详细介绍下项目中常常使用的一个神器 **Willow**`--Fiddler的插件，提供重定向和host主机等功能`,三秒钟解决联调、跨域问题，没错就是三秒.\n贴一个下载地址：\n[fiddler2 + willow 下载](链接：http://pan.baidu.com/s/1boJxtqn)  密码：o3lg\n[fiddler4 + willow 下载](链接：http://pan.baidu.com/s/1hsaihog ) 密码：kf8p\n安装`fiddler`后安装插件 `willow`,willow如果安装失败，请尝试右键使用 管理员身份打开；安装好后会在右边看到一个绿色的小图标，ok，点击他；\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/7b53459a216d4ce5a1ef0943d0a31174)\n\n核心内容\n***\n**问题现状：** \n我们的项目通常开发时都跑在本地服务下，一般是`127.0.0.1:8080`,如果我们希望本地代码的服务能够正常访问后端，或者访问到测试机的真实数据，这就跨域了，因为本地和后端或者测试的都不在一个域名下，是无法访问到数据的，通常的做法是启动一个Nginx服务来进行转发，这一个过程很麻烦，配置改来改去，而且如果要做到，代码修改实时看到效果，那就更复杂了。。。\n\n**解决方案： **\n我的做法是： 将本地服务`127.0.0.1`代理到某个域名比如`www.cloud.com`,这时候访问这个域名就能看到自己的项目了，这个域名下也是木有后端或者测试机的接口的，怎么办了，继续代理转发，将域名下所有的接口代理到真实的IP下，比如后端或者测试机接口的服务在 `10.50.12.24:8088`下，那我们就将`www.cloud.com/order`[order是后端接口固定的项目名，每个接口都在这个目录下]指向`10.50.12.24:8088`下，完美解决；\n\n![](https://user-gold-cdn.xitu.io/2017/9/19/c88065ebf2a4b8040301812671025009)\n顺着这个思路3步解决，\n1. 在willow中添加项目`快捷键ctrl+p`；\n2. 添加host代理`ctrl + o`;\n3. 添加指向add exten `ctrl + n`;\n> 不懂的童鞋看图\n\n图一：![](https://user-gold-cdn.xitu.io/2017/9/19/e888cb3b5523fc8e4b2ae5e75965a63b)\n图二：![](https://user-gold-cdn.xitu.io/2017/9/19/c9aa5ff11ffcda12670d8e35ed0d9e4d)\n好了可以开心的联调代码了；\nps： 这个checkbox框框表示是否启用，如果想去掉，点掉就好了；比手动去修改host方便多了；\n#### To 后端\n后端大侠有时候想这么干，用测试机的前端代码，来访问自己本地的服务，这样就不用浪费前端童鞋的资源了，测试机上自己测试；\n这个步奏其实就是上面的逆过程，简单多了，测试机的前端代码自然指向测试机的后端代码，使用上面思路的第三步；添加指向，指向本机，这里要注意两个点：\n1. 直接代理接口`www.cloud.com/order` --> 本地服务+端口\n2. 如果是https的，需要后端给tomcat配置https证书\n\n介绍就先到这里了，更多使用技巧，后续在更新。。。\n\n### 后记\n后端某个功能bug，不断地让前端点击按钮发请求，他来打断点，有时候我比较懒，就让后端自己点，后端如何访问前端开发机电脑上的代码，来访问自己电脑上的后端服务？\n这个问题大家可以思考下，下期分享。。。\n","slug":"js/common/fiddle001","published":1,"updated":"2018-09-04T13:49:59.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3trz00276oosqkn0ow4q","content":"<p>tips: 开发必备调试工具-fiddler<br><a id=\"more\"></a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p> 现在的大型项目基本前后端分离；前端不仅仅只是负责界面，交互了；需要做的工作越来越多，但是都离不开和各个部门的沟通协作，这样才能高效率；最为密切的就是后端了，今天就简单的分享下在项目实战过程中用到的利器–<code>fiddle</code>工具；</p>\n</blockquote>\n<p>不就是fiddle嘛，抓包工具嘛，NO,NO,NO……</p>\n<p>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展</p>\n<p>你对HTTP 协议越了解， 你就能越掌握Fiddler的使用方法. 你越使用Fiddler,就越能帮助你了解HTTP协议.</p>\n<hr>\n<h3 id=\"轻描淡写-介绍下fiddle\"><a href=\"#轻描淡写-介绍下fiddle\" class=\"headerlink\" title=\"轻描淡写-介绍下fiddle\"></a>轻描淡写-介绍下fiddle</h3><p>先贴一个官网地址：<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">fiddle官网</a><br>至于怎么形容他： <strong>The free web debugging proxy for any browser, system or platform</strong><br>抓包、调试、代理、各种很强大的功能</p>\n<ol>\n<li>不费话了，开始干活<br>下载，一路next就可以安装好；ok，将看到这个界面</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/3124242747bc180d5bd04f6154b4de88\" alt=\"\"><br>左边列表就是捕获到的所有请求，不妨随便百度一下，就能看到你百度的请求；</p>\n<blockquote>\n<p>这个是我点击百度搜索框，触发的请求，右边<code>webform</code>中可以看到这个请求的内容，下边的<code>JSON</code>是服务器返回的内容；很清晰，一目了然。</p>\n</blockquote>\n<p>fiddler工具的基本使用可以参考官网文档或者慕课网有视频教程；</p>\n<h3 id=\"fiddler的厉害之处\"><a href=\"#fiddler的厉害之处\" class=\"headerlink\" title=\"fiddler的厉害之处\"></a>fiddler的厉害之处</h3><h4 id=\"To-测试妹子\"><a href=\"#To-测试妹子\" class=\"headerlink\" title=\"To 测试妹子\"></a>To 测试妹子</h4><p>对于测试来说，如上所示，分析请求，定位是前端还是后端的问题，检验界面与数据是否一致，有时候出现神奇问题，要么是逻辑问题，要么是界面和数据不一致造成的，精准定位问题，精准发锅；</p>\n<h4 id=\"To-大前端\"><a href=\"#To-大前端\" class=\"headerlink\" title=\"To 大前端\"></a>To 大前端</h4><p>fiddler不只是具有简单的抓包功能，在他的社区有很多的插件，使他的能力发挥到极致；<br>详细介绍下项目中常常使用的一个神器 <strong>Willow</strong><code>--Fiddler的插件，提供重定向和host主机等功能</code>,三秒钟解决联调、跨域问题，没错就是三秒.<br>贴一个下载地址：<br><a href=\"链接：http://pan.baidu.com/s/1boJxtqn\">fiddler2 + willow 下载</a>  密码：o3lg<br><a href=\"链接：http://pan.baidu.com/s/1hsaihog\">fiddler4 + willow 下载</a> 密码：kf8p<br>安装<code>fiddler</code>后安装插件 <code>willow</code>,willow如果安装失败，请尝试右键使用 管理员身份打开；安装好后会在右边看到一个绿色的小图标，ok，点击他；</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/7b53459a216d4ce5a1ef0943d0a31174\" alt=\"\"></p>\n<p>核心内容</p>\n<hr>\n<p><strong>问题现状：</strong><br>我们的项目通常开发时都跑在本地服务下，一般是<code>127.0.0.1:8080</code>,如果我们希望本地代码的服务能够正常访问后端，或者访问到测试机的真实数据，这就跨域了，因为本地和后端或者测试的都不在一个域名下，是无法访问到数据的，通常的做法是启动一个Nginx服务来进行转发，这一个过程很麻烦，配置改来改去，而且如果要做到，代码修改实时看到效果，那就更复杂了。。。</p>\n<p><strong>解决方案： </strong><br>我的做法是： 将本地服务<code>127.0.0.1</code>代理到某个域名比如<code>www.cloud.com</code>,这时候访问这个域名就能看到自己的项目了，这个域名下也是木有后端或者测试机的接口的，怎么办了，继续代理转发，将域名下所有的接口代理到真实的IP下，比如后端或者测试机接口的服务在 <code>10.50.12.24:8088</code>下，那我们就将<code>www.cloud.com/order</code>[order是后端接口固定的项目名，每个接口都在这个目录下]指向<code>10.50.12.24:8088</code>下，完美解决；</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/c88065ebf2a4b8040301812671025009\" alt=\"\"><br>顺着这个思路3步解决，</p>\n<ol>\n<li>在willow中添加项目<code>快捷键ctrl+p</code>；</li>\n<li>添加host代理<code>ctrl + o</code>;</li>\n<li>添加指向add exten <code>ctrl + n</code>;<blockquote>\n<p>不懂的童鞋看图</p>\n</blockquote>\n</li>\n</ol>\n<p>图一：<img src=\"https://user-gold-cdn.xitu.io/2017/9/19/e888cb3b5523fc8e4b2ae5e75965a63b\" alt=\"\"><br>图二：<img src=\"https://user-gold-cdn.xitu.io/2017/9/19/c9aa5ff11ffcda12670d8e35ed0d9e4d\" alt=\"\"><br>好了可以开心的联调代码了；<br>ps： 这个checkbox框框表示是否启用，如果想去掉，点掉就好了；比手动去修改host方便多了；</p>\n<h4 id=\"To-后端\"><a href=\"#To-后端\" class=\"headerlink\" title=\"To 后端\"></a>To 后端</h4><p>后端大侠有时候想这么干，用测试机的前端代码，来访问自己本地的服务，这样就不用浪费前端童鞋的资源了，测试机上自己测试；<br>这个步奏其实就是上面的逆过程，简单多了，测试机的前端代码自然指向测试机的后端代码，使用上面思路的第三步；添加指向，指向本机，这里要注意两个点：</p>\n<ol>\n<li>直接代理接口<code>www.cloud.com/order</code> –&gt; 本地服务+端口</li>\n<li>如果是https的，需要后端给tomcat配置https证书</li>\n</ol>\n<p>介绍就先到这里了，更多使用技巧，后续在更新。。。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>后端某个功能bug，不断地让前端点击按钮发请求，他来打断点，有时候我比较懒，就让后端自己点，后端如何访问前端开发机电脑上的代码，来访问自己电脑上的后端服务？<br>这个问题大家可以思考下，下期分享。。。</p>\n","site":{"data":{}},"excerpt":"<p>tips: 开发必备调试工具-fiddler<br>","more":"</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p> 现在的大型项目基本前后端分离；前端不仅仅只是负责界面，交互了；需要做的工作越来越多，但是都离不开和各个部门的沟通协作，这样才能高效率；最为密切的就是后端了，今天就简单的分享下在项目实战过程中用到的利器–<code>fiddle</code>工具；</p>\n</blockquote>\n<p>不就是fiddle嘛，抓包工具嘛，NO,NO,NO……</p>\n<p>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展</p>\n<p>你对HTTP 协议越了解， 你就能越掌握Fiddler的使用方法. 你越使用Fiddler,就越能帮助你了解HTTP协议.</p>\n<hr>\n<h3 id=\"轻描淡写-介绍下fiddle\"><a href=\"#轻描淡写-介绍下fiddle\" class=\"headerlink\" title=\"轻描淡写-介绍下fiddle\"></a>轻描淡写-介绍下fiddle</h3><p>先贴一个官网地址：<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">fiddle官网</a><br>至于怎么形容他： <strong>The free web debugging proxy for any browser, system or platform</strong><br>抓包、调试、代理、各种很强大的功能</p>\n<ol>\n<li>不费话了，开始干活<br>下载，一路next就可以安装好；ok，将看到这个界面</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/3124242747bc180d5bd04f6154b4de88\" alt=\"\"><br>左边列表就是捕获到的所有请求，不妨随便百度一下，就能看到你百度的请求；</p>\n<blockquote>\n<p>这个是我点击百度搜索框，触发的请求，右边<code>webform</code>中可以看到这个请求的内容，下边的<code>JSON</code>是服务器返回的内容；很清晰，一目了然。</p>\n</blockquote>\n<p>fiddler工具的基本使用可以参考官网文档或者慕课网有视频教程；</p>\n<h3 id=\"fiddler的厉害之处\"><a href=\"#fiddler的厉害之处\" class=\"headerlink\" title=\"fiddler的厉害之处\"></a>fiddler的厉害之处</h3><h4 id=\"To-测试妹子\"><a href=\"#To-测试妹子\" class=\"headerlink\" title=\"To 测试妹子\"></a>To 测试妹子</h4><p>对于测试来说，如上所示，分析请求，定位是前端还是后端的问题，检验界面与数据是否一致，有时候出现神奇问题，要么是逻辑问题，要么是界面和数据不一致造成的，精准定位问题，精准发锅；</p>\n<h4 id=\"To-大前端\"><a href=\"#To-大前端\" class=\"headerlink\" title=\"To 大前端\"></a>To 大前端</h4><p>fiddler不只是具有简单的抓包功能，在他的社区有很多的插件，使他的能力发挥到极致；<br>详细介绍下项目中常常使用的一个神器 <strong>Willow</strong><code>--Fiddler的插件，提供重定向和host主机等功能</code>,三秒钟解决联调、跨域问题，没错就是三秒.<br>贴一个下载地址：<br><a href=\"链接：http://pan.baidu.com/s/1boJxtqn\">fiddler2 + willow 下载</a>  密码：o3lg<br><a href=\"链接：http://pan.baidu.com/s/1hsaihog\">fiddler4 + willow 下载</a> 密码：kf8p<br>安装<code>fiddler</code>后安装插件 <code>willow</code>,willow如果安装失败，请尝试右键使用 管理员身份打开；安装好后会在右边看到一个绿色的小图标，ok，点击他；</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/7b53459a216d4ce5a1ef0943d0a31174\" alt=\"\"></p>\n<p>核心内容</p>\n<hr>\n<p><strong>问题现状：</strong><br>我们的项目通常开发时都跑在本地服务下，一般是<code>127.0.0.1:8080</code>,如果我们希望本地代码的服务能够正常访问后端，或者访问到测试机的真实数据，这就跨域了，因为本地和后端或者测试的都不在一个域名下，是无法访问到数据的，通常的做法是启动一个Nginx服务来进行转发，这一个过程很麻烦，配置改来改去，而且如果要做到，代码修改实时看到效果，那就更复杂了。。。</p>\n<p><strong>解决方案： </strong><br>我的做法是： 将本地服务<code>127.0.0.1</code>代理到某个域名比如<code>www.cloud.com</code>,这时候访问这个域名就能看到自己的项目了，这个域名下也是木有后端或者测试机的接口的，怎么办了，继续代理转发，将域名下所有的接口代理到真实的IP下，比如后端或者测试机接口的服务在 <code>10.50.12.24:8088</code>下，那我们就将<code>www.cloud.com/order</code>[order是后端接口固定的项目名，每个接口都在这个目录下]指向<code>10.50.12.24:8088</code>下，完美解决；</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/9/19/c88065ebf2a4b8040301812671025009\" alt=\"\"><br>顺着这个思路3步解决，</p>\n<ol>\n<li>在willow中添加项目<code>快捷键ctrl+p</code>；</li>\n<li>添加host代理<code>ctrl + o</code>;</li>\n<li>添加指向add exten <code>ctrl + n</code>;<blockquote>\n<p>不懂的童鞋看图</p>\n</blockquote>\n</li>\n</ol>\n<p>图一：<img src=\"https://user-gold-cdn.xitu.io/2017/9/19/e888cb3b5523fc8e4b2ae5e75965a63b\" alt=\"\"><br>图二：<img src=\"https://user-gold-cdn.xitu.io/2017/9/19/c9aa5ff11ffcda12670d8e35ed0d9e4d\" alt=\"\"><br>好了可以开心的联调代码了；<br>ps： 这个checkbox框框表示是否启用，如果想去掉，点掉就好了；比手动去修改host方便多了；</p>\n<h4 id=\"To-后端\"><a href=\"#To-后端\" class=\"headerlink\" title=\"To 后端\"></a>To 后端</h4><p>后端大侠有时候想这么干，用测试机的前端代码，来访问自己本地的服务，这样就不用浪费前端童鞋的资源了，测试机上自己测试；<br>这个步奏其实就是上面的逆过程，简单多了，测试机的前端代码自然指向测试机的后端代码，使用上面思路的第三步；添加指向，指向本机，这里要注意两个点：</p>\n<ol>\n<li>直接代理接口<code>www.cloud.com/order</code> –&gt; 本地服务+端口</li>\n<li>如果是https的，需要后端给tomcat配置https证书</li>\n</ol>\n<p>介绍就先到这里了，更多使用技巧，后续在更新。。。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>后端某个功能bug，不断地让前端点击按钮发请求，他来打断点，有时候我比较懒，就让后端自己点，后端如何访问前端开发机电脑上的代码，来访问自己电脑上的后端服务？<br>这个问题大家可以思考下，下期分享。。。</p>"},{"title":"url收藏夹","date":"2018-12-19T08:41:57.000Z","_content":"摘要: 记录一些学习、工具网站\n<!-- more -->\n- [在线图片压缩网站](https://tinypng.com/)\n- [KOA小书](http://17koa.com/koa-generator-examples/)","source":"_posts/js/common/remberUrl.md","raw":"---\ntitle: url收藏夹\ntags: [学习计划]\ncategories: [学习,网站]\ndate: 2018-12-19 16:41:57\n---\n摘要: 记录一些学习、工具网站\n<!-- more -->\n- [在线图片压缩网站](https://tinypng.com/)\n- [KOA小书](http://17koa.com/koa-generator-examples/)","slug":"js/common/remberUrl","published":1,"updated":"2018-12-19T08:49:19.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3ts1002b6oosqe12x6nm","content":"<p>摘要: 记录一些学习、工具网站<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">在线图片压缩网站</a></li>\n<li><a href=\"http://17koa.com/koa-generator-examples/\" target=\"_blank\" rel=\"noopener\">KOA小书</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>摘要: 记录一些学习、工具网站<br>","more":"</p>\n<ul>\n<li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">在线图片压缩网站</a></li>\n<li><a href=\"http://17koa.com/koa-generator-examples/\" target=\"_blank\" rel=\"noopener\">KOA小书</a></li>\n</ul>"},{"title":"vue原理学习笔记（一）","date":"2018-07-06T06:31:59.000Z","_content":"Vue响应式原理-将date数据变成可观察的（observable）\n<!-- more -->\n\n> 学习笔记-\n\n第一步、将date数据变成可观察的（observable）;\n\n怎么实现了，主要是利用的对象的 defineProperty属性！\n\n```javascript\n// 遍历对象，将对象的每个属性变成可观察的\nfunction observe(data, callback) {\n    Object.keys(data).forEach(function(key) {\n        defineReactive(data, key, data[key], callback)\n    })\n}\n\nfunction defineReactive(obj, key, data[key], callback) {\n    Object.defineProperty(obj, key, {\n        enumerable: true, //属性的可枚举性，for in是否能够遍历到\n        configurable: true, // 表示能否通过delete删除属性从而重新定义属性\n        get: function() {\n            // 第一次执行`render`的时候进行收集，详见下一章\n        },\n        set: function(newVal) {\n            callback() //回调执行render刷新视图\n        }\n    })\n}\n\n\ncalss Vue {\n    // 创建vue实例时将options中data指向了vue的实例， 即在VM实例上挂在了一个 `_data`属性;\n    // 初始化调用了observe\n    constructor(options) {\n        this._data = options.data; // this指向实例\n        observe(this._data, options.render)\n    }\n}\n\nlet app = new Vue({\n    el: '#app',\n    data: {\n        text1: '1',\n        text2: '2',\n    },\n    render() {\n        console.log('render')\n    }\n})\n\n```\n\n\n上面的方法就简单的实现了将vue里面的data数据变成可观察的模式；如果改变了data里面属性的值就会触发对象的set， 从而触发订阅者的回调函数（如刷新视图）\n\n","source":"_posts/js/common/vuestudy01.md","raw":"---\ntitle: vue原理学习笔记（一）\ntags: ['vue原理']\ncategories: ['vue框架']\ndate: 2018-07-06 14:31:59\n---\nVue响应式原理-将date数据变成可观察的（observable）\n<!-- more -->\n\n> 学习笔记-\n\n第一步、将date数据变成可观察的（observable）;\n\n怎么实现了，主要是利用的对象的 defineProperty属性！\n\n```javascript\n// 遍历对象，将对象的每个属性变成可观察的\nfunction observe(data, callback) {\n    Object.keys(data).forEach(function(key) {\n        defineReactive(data, key, data[key], callback)\n    })\n}\n\nfunction defineReactive(obj, key, data[key], callback) {\n    Object.defineProperty(obj, key, {\n        enumerable: true, //属性的可枚举性，for in是否能够遍历到\n        configurable: true, // 表示能否通过delete删除属性从而重新定义属性\n        get: function() {\n            // 第一次执行`render`的时候进行收集，详见下一章\n        },\n        set: function(newVal) {\n            callback() //回调执行render刷新视图\n        }\n    })\n}\n\n\ncalss Vue {\n    // 创建vue实例时将options中data指向了vue的实例， 即在VM实例上挂在了一个 `_data`属性;\n    // 初始化调用了observe\n    constructor(options) {\n        this._data = options.data; // this指向实例\n        observe(this._data, options.render)\n    }\n}\n\nlet app = new Vue({\n    el: '#app',\n    data: {\n        text1: '1',\n        text2: '2',\n    },\n    render() {\n        console.log('render')\n    }\n})\n\n```\n\n\n上面的方法就简单的实现了将vue里面的data数据变成可观察的模式；如果改变了data里面属性的值就会触发对象的set， 从而触发订阅者的回调函数（如刷新视图）\n\n","slug":"js/common/vuestudy01","published":1,"updated":"2018-09-04T13:49:59.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3ts2002d6oos4vk4689w","content":"<p>Vue响应式原理-将date数据变成可观察的（observable）<br><a id=\"more\"></a></p>\n<blockquote>\n<p>学习笔记-</p>\n</blockquote>\n<p>第一步、将date数据变成可观察的（observable）;</p>\n<p>怎么实现了，主要是利用的对象的 defineProperty属性！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历对象，将对象的每个属性变成可观察的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        defineReactive(data, key, data[key], callback)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, data[key], callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">//属性的可枚举性，for in是否能够遍历到</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>, <span class=\"comment\">// 表示能否通过delete删除属性从而重新定义属性</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次执行`render`的时候进行收集，详见下一章</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            callback() <span class=\"comment\">//回调执行render刷新视图</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">calss Vue &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建vue实例时将options中data指向了vue的实例， 即在VM实例上挂在了一个 `_data`属性;</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化调用了observe</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._data = options.data; <span class=\"comment\">// this指向实例</span></span><br><span class=\"line\">        observe(<span class=\"keyword\">this</span>._data, options.render)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        text1: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        text2: <span class=\"string\">'2'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的方法就简单的实现了将vue里面的data数据变成可观察的模式；如果改变了data里面属性的值就会触发对象的set， 从而触发订阅者的回调函数（如刷新视图）</p>\n","site":{"data":{}},"excerpt":"<p>Vue响应式原理-将date数据变成可观察的（observable）<br>","more":"</p>\n<blockquote>\n<p>学习笔记-</p>\n</blockquote>\n<p>第一步、将date数据变成可观察的（observable）;</p>\n<p>怎么实现了，主要是利用的对象的 defineProperty属性！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历对象，将对象的每个属性变成可观察的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        defineReactive(data, key, data[key], callback)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, data[key], callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>, <span class=\"comment\">//属性的可枚举性，for in是否能够遍历到</span></span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>, <span class=\"comment\">// 表示能否通过delete删除属性从而重新定义属性</span></span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次执行`render`的时候进行收集，详见下一章</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            callback() <span class=\"comment\">//回调执行render刷新视图</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">calss Vue &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建vue实例时将options中data指向了vue的实例， 即在VM实例上挂在了一个 `_data`属性;</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化调用了observe</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(options) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._data = options.data; <span class=\"comment\">// this指向实例</span></span><br><span class=\"line\">        observe(<span class=\"keyword\">this</span>._data, options.render)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        text1: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        text2: <span class=\"string\">'2'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'render'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的方法就简单的实现了将vue里面的data数据变成可观察的模式；如果改变了data里面属性的值就会触发对象的set， 从而触发订阅者的回调函数（如刷新视图）</p>"},{"title":"前端储存的种类与方法","date":"2018-09-21T06:22:11.000Z","_content":"摘要： localStorage、sessionStorage、cookie的用法以及区别\n<!-- more -->\n### localStorage的优势与用法\n- localStorage拓展了cookie的4K限制\n- localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的;\n\n#### localStorage的局限\n\n1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性\n2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换\n3、localStorage在浏览器的隐私模式下面是不可读取的\n4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡\n5、localStorage不能被爬虫抓取到\n\n    localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空\n\n#### localStorage的写入方法\n\nvar storage = window.localStorage\n1. 方法一： \n        storage['name'] = 'dale' //写入name字段\n2. 方法二： \n        storage.info = 'this is a info' // 写入info字段\n3. 方法三： \n        storage.setItem(\"age\", 18) // 写入info字段\n\n> localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage\n\n#### localStorage的读取方法\n1. 方法一:  \n        var name = storage.name \n        console.log(name); // 'dale' \n2. 方法二： \n        var info = storage['info']\n        console.log(info) // 'this is a info'\n3. 方法三： \n        var age = storage.getItem('age')\n        console.log(age) // '18' 注意这里输出的18是String类型的\n\n> localStorage只支持string类型的存储。\n\n#### localStorage的删除方法\n\n> storage.removeItem('name') // 删除key为name的键值\n\n\n#### localStorage的清空方法\n\n> storage.clear() //清除所有的storage\n\n### sessionStorage的用法\n\n**sessionStorage的使用方法与localStorage完全相同，唯一的区别是：`sessionStorage当会话结束的时候，sessionStorage中的键值对会被清空 `**;\n详解： \n1. 当 当前tab关闭，或者浏览器关闭；sessionStorage会被清空； \n2. 复制tab标签时，sessionStorage会被复制，\n3. 重新打开相同域名时tab时，sessionStorage是不会被共享的\n\n\n### cookie概念和使用方法\n\n#### cookie的基本概念\n- cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下\n- cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭\n- 有效期设置：Max-Age\n- 安全secure=true是只在ssl或者https安全协议下传输\n- HttpOnly=true时，禁止通过js脚本获取cookie；防止xss攻击\n- 每个域名下的cookie 的大小最大为4KB，最多20个\n\n#### cookie的使用\n##### cookie的设置\n\n```js\n    function setCookie(cname,cvalue,exdays)\n        {\n        var SetTime = new Date();                                         //设置过期时间\n        SetTime.setTime(SetTime.getTime()+(exdays*24*60*60*1000));        //设置过期时间\n        var expires = \"expires=\"+SetTime.toGMTString();                   //设置过期时间\n        document.cookie = cname + \"=\" + cvalue + \"; \" + expires;          //创建一个cookie\n        }\n```\n##### cookie的读取\n```js\n    function getCookie(c_name)\n    {\n    if (document.cookie.length>0) \n    {\n    c_start=document.cookie.indexOf(c_name + \"=\")\n    if (c_start!=-1)\n        { \n        c_start=c_start + c_name.length+1 \n        c_end=document.cookie.indexOf(\";\",c_start)\n        if (c_end==-1) c_end=document.cookie.length\n        return unescape(document.cookie.substring(c_start,c_end))\n        } \n    }\n    return \"\"\n    }\n\n```\n##### cookie的删除\n    将cookie的有效时间改成昨天。\n\n### 总结\n\n#### 共同点：\n> 共同点：都是保存在浏览器端、且同源的\n#### 区别\n1. sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；\n2. localstorage在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在\n3. cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在\n\n\n本文参考链接： [关于Cookie、session和Web Storage](https://juejin.im/post/5ad5b9116fb9a028e014fb19)","source":"_posts/js/common/webstorage.md","raw":"---\ntitle: 前端储存的种类与方法\ntags: ['浏览器储存', localStorage]\ncategories: [前端开发]\ndate: 2018-09-21 14:22:11\n---\n摘要： localStorage、sessionStorage、cookie的用法以及区别\n<!-- more -->\n### localStorage的优势与用法\n- localStorage拓展了cookie的4K限制\n- localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的;\n\n#### localStorage的局限\n\n1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性\n2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换\n3、localStorage在浏览器的隐私模式下面是不可读取的\n4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡\n5、localStorage不能被爬虫抓取到\n\n    localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空\n\n#### localStorage的写入方法\n\nvar storage = window.localStorage\n1. 方法一： \n        storage['name'] = 'dale' //写入name字段\n2. 方法二： \n        storage.info = 'this is a info' // 写入info字段\n3. 方法三： \n        storage.setItem(\"age\", 18) // 写入info字段\n\n> localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage\n\n#### localStorage的读取方法\n1. 方法一:  \n        var name = storage.name \n        console.log(name); // 'dale' \n2. 方法二： \n        var info = storage['info']\n        console.log(info) // 'this is a info'\n3. 方法三： \n        var age = storage.getItem('age')\n        console.log(age) // '18' 注意这里输出的18是String类型的\n\n> localStorage只支持string类型的存储。\n\n#### localStorage的删除方法\n\n> storage.removeItem('name') // 删除key为name的键值\n\n\n#### localStorage的清空方法\n\n> storage.clear() //清除所有的storage\n\n### sessionStorage的用法\n\n**sessionStorage的使用方法与localStorage完全相同，唯一的区别是：`sessionStorage当会话结束的时候，sessionStorage中的键值对会被清空 `**;\n详解： \n1. 当 当前tab关闭，或者浏览器关闭；sessionStorage会被清空； \n2. 复制tab标签时，sessionStorage会被复制，\n3. 重新打开相同域名时tab时，sessionStorage是不会被共享的\n\n\n### cookie概念和使用方法\n\n#### cookie的基本概念\n- cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下\n- cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭\n- 有效期设置：Max-Age\n- 安全secure=true是只在ssl或者https安全协议下传输\n- HttpOnly=true时，禁止通过js脚本获取cookie；防止xss攻击\n- 每个域名下的cookie 的大小最大为4KB，最多20个\n\n#### cookie的使用\n##### cookie的设置\n\n```js\n    function setCookie(cname,cvalue,exdays)\n        {\n        var SetTime = new Date();                                         //设置过期时间\n        SetTime.setTime(SetTime.getTime()+(exdays*24*60*60*1000));        //设置过期时间\n        var expires = \"expires=\"+SetTime.toGMTString();                   //设置过期时间\n        document.cookie = cname + \"=\" + cvalue + \"; \" + expires;          //创建一个cookie\n        }\n```\n##### cookie的读取\n```js\n    function getCookie(c_name)\n    {\n    if (document.cookie.length>0) \n    {\n    c_start=document.cookie.indexOf(c_name + \"=\")\n    if (c_start!=-1)\n        { \n        c_start=c_start + c_name.length+1 \n        c_end=document.cookie.indexOf(\";\",c_start)\n        if (c_end==-1) c_end=document.cookie.length\n        return unescape(document.cookie.substring(c_start,c_end))\n        } \n    }\n    return \"\"\n    }\n\n```\n##### cookie的删除\n    将cookie的有效时间改成昨天。\n\n### 总结\n\n#### 共同点：\n> 共同点：都是保存在浏览器端、且同源的\n#### 区别\n1. sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；\n2. localstorage在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在\n3. cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在\n\n\n本文参考链接： [关于Cookie、session和Web Storage](https://juejin.im/post/5ad5b9116fb9a028e014fb19)","slug":"js/common/webstorage","published":1,"updated":"2018-09-25T09:48:31.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3ts5002i6oos4b4f66xq","content":"<p>摘要： localStorage、sessionStorage、cookie的用法以及区别<br><a id=\"more\"></a></p>\n<h3 id=\"localStorage的优势与用法\"><a href=\"#localStorage的优势与用法\" class=\"headerlink\" title=\"localStorage的优势与用法\"></a>localStorage的优势与用法</h3><ul>\n<li>localStorage拓展了cookie的4K限制</li>\n<li>localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的;</li>\n</ul>\n<h4 id=\"localStorage的局限\"><a href=\"#localStorage的局限\" class=\"headerlink\" title=\"localStorage的局限\"></a>localStorage的局限</h4><p>1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性<br>2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换<br>3、localStorage在浏览器的隐私模式下面是不可读取的<br>4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡<br>5、localStorage不能被爬虫抓取到</p>\n<pre><code>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空\n</code></pre><h4 id=\"localStorage的写入方法\"><a href=\"#localStorage的写入方法\" class=\"headerlink\" title=\"localStorage的写入方法\"></a>localStorage的写入方法</h4><p>var storage = window.localStorage</p>\n<ol>\n<li>方法一： <pre><code>storage[&apos;name&apos;] = &apos;dale&apos; //写入name字段\n</code></pre></li>\n<li>方法二： <pre><code>storage.info = &apos;this is a info&apos; // 写入info字段\n</code></pre></li>\n<li>方法三： <pre><code>storage.setItem(&quot;age&quot;, 18) // 写入info字段\n</code></pre></li>\n</ol>\n<blockquote>\n<p>localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage</p>\n</blockquote>\n<h4 id=\"localStorage的读取方法\"><a href=\"#localStorage的读取方法\" class=\"headerlink\" title=\"localStorage的读取方法\"></a>localStorage的读取方法</h4><ol>\n<li>方法一:  <pre><code>var name = storage.name \nconsole.log(name); // &apos;dale&apos; \n</code></pre></li>\n<li>方法二： <pre><code>var info = storage[&apos;info&apos;]\nconsole.log(info) // &apos;this is a info&apos;\n</code></pre></li>\n<li>方法三： <pre><code>var age = storage.getItem(&apos;age&apos;)\nconsole.log(age) // &apos;18&apos; 注意这里输出的18是String类型的\n</code></pre></li>\n</ol>\n<blockquote>\n<p>localStorage只支持string类型的存储。</p>\n</blockquote>\n<h4 id=\"localStorage的删除方法\"><a href=\"#localStorage的删除方法\" class=\"headerlink\" title=\"localStorage的删除方法\"></a>localStorage的删除方法</h4><blockquote>\n<p>storage.removeItem(‘name’) // 删除key为name的键值</p>\n</blockquote>\n<h4 id=\"localStorage的清空方法\"><a href=\"#localStorage的清空方法\" class=\"headerlink\" title=\"localStorage的清空方法\"></a>localStorage的清空方法</h4><blockquote>\n<p>storage.clear() //清除所有的storage</p>\n</blockquote>\n<h3 id=\"sessionStorage的用法\"><a href=\"#sessionStorage的用法\" class=\"headerlink\" title=\"sessionStorage的用法\"></a>sessionStorage的用法</h3><p><strong>sessionStorage的使用方法与localStorage完全相同，唯一的区别是：<code>sessionStorage当会话结束的时候，sessionStorage中的键值对会被清空</code></strong>;<br>详解： </p>\n<ol>\n<li>当 当前tab关闭，或者浏览器关闭；sessionStorage会被清空； </li>\n<li>复制tab标签时，sessionStorage会被复制，</li>\n<li>重新打开相同域名时tab时，sessionStorage是不会被共享的</li>\n</ol>\n<h3 id=\"cookie概念和使用方法\"><a href=\"#cookie概念和使用方法\" class=\"headerlink\" title=\"cookie概念和使用方法\"></a>cookie概念和使用方法</h3><h4 id=\"cookie的基本概念\"><a href=\"#cookie的基本概念\" class=\"headerlink\" title=\"cookie的基本概念\"></a>cookie的基本概念</h4><ul>\n<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</li>\n<li>cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</li>\n<li>有效期设置：Max-Age</li>\n<li>安全secure=true是只在ssl或者https安全协议下传输</li>\n<li>HttpOnly=true时，禁止通过js脚本获取cookie；防止xss攻击</li>\n<li>每个域名下的cookie 的大小最大为4KB，最多20个</li>\n</ul>\n<h4 id=\"cookie的使用\"><a href=\"#cookie的使用\" class=\"headerlink\" title=\"cookie的使用\"></a>cookie的使用</h4><h5 id=\"cookie的设置\"><a href=\"#cookie的设置\" class=\"headerlink\" title=\"cookie的设置\"></a>cookie的设置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\">cname,cvalue,exdays</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> SetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();                                         <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    SetTime.setTime(SetTime.getTime()+(exdays*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>));        <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> expires = <span class=\"string\">\"expires=\"</span>+SetTime.toGMTString();                   <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cname + <span class=\"string\">\"=\"</span> + cvalue + <span class=\"string\">\"; \"</span> + expires;          <span class=\"comment\">//创建一个cookie</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"cookie的读取\"><a href=\"#cookie的读取\" class=\"headerlink\" title=\"cookie的读取\"></a>cookie的读取</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">c_name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.cookie.length&gt;<span class=\"number\">0</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">c_start=<span class=\"built_in\">document</span>.cookie.indexOf(c_name + <span class=\"string\">\"=\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (c_start!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">    c_start=c_start + c_name.length+<span class=\"number\">1</span> </span><br><span class=\"line\">    c_end=<span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">\";\"</span>,c_start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_end==<span class=\"number\">-1</span>) c_end=<span class=\"built_in\">document</span>.cookie.length</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(<span class=\"built_in\">document</span>.cookie.substring(c_start,c_end))</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"cookie的删除\"><a href=\"#cookie的删除\" class=\"headerlink\" title=\"cookie的删除\"></a>cookie的删除</h5><pre><code>将cookie的有效时间改成昨天。\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"共同点：\"><a href=\"#共同点：\" class=\"headerlink\" title=\"共同点：\"></a>共同点：</h4><blockquote>\n<p>共同点：都是保存在浏览器端、且同源的</p>\n</blockquote>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ol>\n<li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li>\n<li>localstorage在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在</li>\n<li>cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在</li>\n</ol>\n<p>本文参考链接： <a href=\"https://juejin.im/post/5ad5b9116fb9a028e014fb19\" target=\"_blank\" rel=\"noopener\">关于Cookie、session和Web Storage</a></p>\n","site":{"data":{}},"excerpt":"<p>摘要： localStorage、sessionStorage、cookie的用法以及区别<br>","more":"</p>\n<h3 id=\"localStorage的优势与用法\"><a href=\"#localStorage的优势与用法\" class=\"headerlink\" title=\"localStorage的优势与用法\"></a>localStorage的优势与用法</h3><ul>\n<li>localStorage拓展了cookie的4K限制</li>\n<li>localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的;</li>\n</ul>\n<h4 id=\"localStorage的局限\"><a href=\"#localStorage的局限\" class=\"headerlink\" title=\"localStorage的局限\"></a>localStorage的局限</h4><p>1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性<br>2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换<br>3、localStorage在浏览器的隐私模式下面是不可读取的<br>4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡<br>5、localStorage不能被爬虫抓取到</p>\n<pre><code>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空\n</code></pre><h4 id=\"localStorage的写入方法\"><a href=\"#localStorage的写入方法\" class=\"headerlink\" title=\"localStorage的写入方法\"></a>localStorage的写入方法</h4><p>var storage = window.localStorage</p>\n<ol>\n<li>方法一： <pre><code>storage[&apos;name&apos;] = &apos;dale&apos; //写入name字段\n</code></pre></li>\n<li>方法二： <pre><code>storage.info = &apos;this is a info&apos; // 写入info字段\n</code></pre></li>\n<li>方法三： <pre><code>storage.setItem(&quot;age&quot;, 18) // 写入info字段\n</code></pre></li>\n</ol>\n<blockquote>\n<p>localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage</p>\n</blockquote>\n<h4 id=\"localStorage的读取方法\"><a href=\"#localStorage的读取方法\" class=\"headerlink\" title=\"localStorage的读取方法\"></a>localStorage的读取方法</h4><ol>\n<li>方法一:  <pre><code>var name = storage.name \nconsole.log(name); // &apos;dale&apos; \n</code></pre></li>\n<li>方法二： <pre><code>var info = storage[&apos;info&apos;]\nconsole.log(info) // &apos;this is a info&apos;\n</code></pre></li>\n<li>方法三： <pre><code>var age = storage.getItem(&apos;age&apos;)\nconsole.log(age) // &apos;18&apos; 注意这里输出的18是String类型的\n</code></pre></li>\n</ol>\n<blockquote>\n<p>localStorage只支持string类型的存储。</p>\n</blockquote>\n<h4 id=\"localStorage的删除方法\"><a href=\"#localStorage的删除方法\" class=\"headerlink\" title=\"localStorage的删除方法\"></a>localStorage的删除方法</h4><blockquote>\n<p>storage.removeItem(‘name’) // 删除key为name的键值</p>\n</blockquote>\n<h4 id=\"localStorage的清空方法\"><a href=\"#localStorage的清空方法\" class=\"headerlink\" title=\"localStorage的清空方法\"></a>localStorage的清空方法</h4><blockquote>\n<p>storage.clear() //清除所有的storage</p>\n</blockquote>\n<h3 id=\"sessionStorage的用法\"><a href=\"#sessionStorage的用法\" class=\"headerlink\" title=\"sessionStorage的用法\"></a>sessionStorage的用法</h3><p><strong>sessionStorage的使用方法与localStorage完全相同，唯一的区别是：<code>sessionStorage当会话结束的时候，sessionStorage中的键值对会被清空</code></strong>;<br>详解： </p>\n<ol>\n<li>当 当前tab关闭，或者浏览器关闭；sessionStorage会被清空； </li>\n<li>复制tab标签时，sessionStorage会被复制，</li>\n<li>重新打开相同域名时tab时，sessionStorage是不会被共享的</li>\n</ol>\n<h3 id=\"cookie概念和使用方法\"><a href=\"#cookie概念和使用方法\" class=\"headerlink\" title=\"cookie概念和使用方法\"></a>cookie概念和使用方法</h3><h4 id=\"cookie的基本概念\"><a href=\"#cookie的基本概念\" class=\"headerlink\" title=\"cookie的基本概念\"></a>cookie的基本概念</h4><ul>\n<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</li>\n<li>cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</li>\n<li>有效期设置：Max-Age</li>\n<li>安全secure=true是只在ssl或者https安全协议下传输</li>\n<li>HttpOnly=true时，禁止通过js脚本获取cookie；防止xss攻击</li>\n<li>每个域名下的cookie 的大小最大为4KB，最多20个</li>\n</ul>\n<h4 id=\"cookie的使用\"><a href=\"#cookie的使用\" class=\"headerlink\" title=\"cookie的使用\"></a>cookie的使用</h4><h5 id=\"cookie的设置\"><a href=\"#cookie的设置\" class=\"headerlink\" title=\"cookie的设置\"></a>cookie的设置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\">cname,cvalue,exdays</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> SetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();                                         <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    SetTime.setTime(SetTime.getTime()+(exdays*<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>));        <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> expires = <span class=\"string\">\"expires=\"</span>+SetTime.toGMTString();                   <span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cname + <span class=\"string\">\"=\"</span> + cvalue + <span class=\"string\">\"; \"</span> + expires;          <span class=\"comment\">//创建一个cookie</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"cookie的读取\"><a href=\"#cookie的读取\" class=\"headerlink\" title=\"cookie的读取\"></a>cookie的读取</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">c_name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.cookie.length&gt;<span class=\"number\">0</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">c_start=<span class=\"built_in\">document</span>.cookie.indexOf(c_name + <span class=\"string\">\"=\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (c_start!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">    c_start=c_start + c_name.length+<span class=\"number\">1</span> </span><br><span class=\"line\">    c_end=<span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">\";\"</span>,c_start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_end==<span class=\"number\">-1</span>) c_end=<span class=\"built_in\">document</span>.cookie.length</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(<span class=\"built_in\">document</span>.cookie.substring(c_start,c_end))</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"cookie的删除\"><a href=\"#cookie的删除\" class=\"headerlink\" title=\"cookie的删除\"></a>cookie的删除</h5><pre><code>将cookie的有效时间改成昨天。\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"共同点：\"><a href=\"#共同点：\" class=\"headerlink\" title=\"共同点：\"></a>共同点：</h4><blockquote>\n<p>共同点：都是保存在浏览器端、且同源的</p>\n</blockquote>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ol>\n<li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li>\n<li>localstorage在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在</li>\n<li>cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在</li>\n</ol>\n<p>本文参考链接： <a href=\"https://juejin.im/post/5ad5b9116fb9a028e014fb19\" target=\"_blank\" rel=\"noopener\">关于Cookie、session和Web Storage</a></p>"},{"title":"node学习（一）","date":"2018-04-12T10:27:46.000Z","_content":"tips: Api写法：Error-first Callback 和 EventEmitter\n<!-- more -->\n\n##### a) 在node的回调中错误优先 \n应该先定义错误的返回接收函数\n- 回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。\n- 回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。\n\n```js\nfunction(err, res) {\n  // process the error and result\n}\n```\n语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。\n\n##### b) EventEmitter\n\n事件模块是 Node.js 内置的对观察者模式“发布/订阅”（publish/subscribe）的实现，通过EventEmitter属性，提供了一个构造函数。该构造函数的实例具有 on 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 EventEmitter 实例的 on 方法监听到。\n\n```js\n\nvar EventEmitter = require('events').EventEmitter\nvar life = new EventEmitter()\n// 设置可以添加的事件数量\nlife.setMaxListeners(2)\n// 添加事件\nvar water = function(who) {\n\tconsole.log('给' + who + '倒杯水！')\n}\nlife.on('求安慰', water)\n\nlife.on('求安慰', function(who) {\n\tconsole.log('给' + who + '做饭！')\n})\n// ... 总共可以添加10个事件 【默认】\n// 超出会有报出异常\n\n// 触发事件\nlife.emit('求安慰', '汉子')\n// 事件移除\n// 将回调函数具名化 移除某一个事件\nlife.removeListener('求安慰', water)\n// 全部移除\nlife.removeAllListeners()\n// 移除某一个事件\nlife.removeListener('求安慰')\n\n// 检测事件是否监听\nvar hasLifeListener = life.emit('求安慰', '')\nconsole.log('求安慰事件是否监听:' + hasLifeListener)\n\n// 检测事件监听的个数\nconsole.log('life 上添加的事件数量是:' + life.listeners('求安慰').length)\nconsole.log(EventEmitter.listenerCount(life, '求安慰'))\n\n```\n##### c) buffer\n\nBuffer： 是一个对象， 是一个构造函数； 实例：V8引擎分配的一段内存；基本是一个数组，整数值；\n```js\nnew Buffer(123)\n//  <Buffer 31 32 33>\n默认编码格式 utf-8\n\n指定编码：\nnew Buffer('123', 'base64')\n// <Buffer d7 6d>\n\n长度：\nvar buf = new Buffer(8)   \nbuf.length   // 8\n\n限制长度，写入会被截取\nvar buf = new Buffer(6)\nbuf.write('12345678')\nbuf // <Buffer 31 32 32 33 34 35>   6位 超出不会被缓冲\n\n实例化数组，可以用下表读取到；\nvar buf = new Buffer([1,2.22,3])\n\nbuf[0]   // 1\nbuf[1]   // 2  [自动取证]\n```\n\nbuffer转化\n\n```js\n> var buf = new Buffer('12345')\n> var str = buf.toString('base64')\n//> str  'MTIzNDU='\n\n> var buf2 = new Buffer(str, 'base64')\n> var str2 = buf2.toString()\n// > str2  12345\n```","source":"_posts/js/node/nodestudy-01.md","raw":"---\ntitle: node学习（一）\ntags: ['node']\ncategories: ['JavaScript']\ndate: 2018-04-12 18:27:46\n---\ntips: Api写法：Error-first Callback 和 EventEmitter\n<!-- more -->\n\n##### a) 在node的回调中错误优先 \n应该先定义错误的返回接收函数\n- 回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。\n- 回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。\n\n```js\nfunction(err, res) {\n  // process the error and result\n}\n```\n语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。\n\n##### b) EventEmitter\n\n事件模块是 Node.js 内置的对观察者模式“发布/订阅”（publish/subscribe）的实现，通过EventEmitter属性，提供了一个构造函数。该构造函数的实例具有 on 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 EventEmitter 实例的 on 方法监听到。\n\n```js\n\nvar EventEmitter = require('events').EventEmitter\nvar life = new EventEmitter()\n// 设置可以添加的事件数量\nlife.setMaxListeners(2)\n// 添加事件\nvar water = function(who) {\n\tconsole.log('给' + who + '倒杯水！')\n}\nlife.on('求安慰', water)\n\nlife.on('求安慰', function(who) {\n\tconsole.log('给' + who + '做饭！')\n})\n// ... 总共可以添加10个事件 【默认】\n// 超出会有报出异常\n\n// 触发事件\nlife.emit('求安慰', '汉子')\n// 事件移除\n// 将回调函数具名化 移除某一个事件\nlife.removeListener('求安慰', water)\n// 全部移除\nlife.removeAllListeners()\n// 移除某一个事件\nlife.removeListener('求安慰')\n\n// 检测事件是否监听\nvar hasLifeListener = life.emit('求安慰', '')\nconsole.log('求安慰事件是否监听:' + hasLifeListener)\n\n// 检测事件监听的个数\nconsole.log('life 上添加的事件数量是:' + life.listeners('求安慰').length)\nconsole.log(EventEmitter.listenerCount(life, '求安慰'))\n\n```\n##### c) buffer\n\nBuffer： 是一个对象， 是一个构造函数； 实例：V8引擎分配的一段内存；基本是一个数组，整数值；\n```js\nnew Buffer(123)\n//  <Buffer 31 32 33>\n默认编码格式 utf-8\n\n指定编码：\nnew Buffer('123', 'base64')\n// <Buffer d7 6d>\n\n长度：\nvar buf = new Buffer(8)   \nbuf.length   // 8\n\n限制长度，写入会被截取\nvar buf = new Buffer(6)\nbuf.write('12345678')\nbuf // <Buffer 31 32 32 33 34 35>   6位 超出不会被缓冲\n\n实例化数组，可以用下表读取到；\nvar buf = new Buffer([1,2.22,3])\n\nbuf[0]   // 1\nbuf[1]   // 2  [自动取证]\n```\n\nbuffer转化\n\n```js\n> var buf = new Buffer('12345')\n> var str = buf.toString('base64')\n//> str  'MTIzNDU='\n\n> var buf2 = new Buffer(str, 'base64')\n> var str2 = buf2.toString()\n// > str2  12345\n```","slug":"js/node/nodestudy-01","published":1,"updated":"2018-09-04T13:49:59.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3ts6002l6oosvji2spn0","content":"<p>tips: Api写法：Error-first Callback 和 EventEmitter<br><a id=\"more\"></a></p>\n<h5 id=\"a-在node的回调中错误优先\"><a href=\"#a-在node的回调中错误优先\" class=\"headerlink\" title=\"a) 在node的回调中错误优先\"></a>a) 在node的回调中错误优先</h5><p>应该先定义错误的返回接收函数</p>\n<ul>\n<li>回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。</li>\n<li>回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// process the error and result</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。</p>\n<h5 id=\"b-EventEmitter\"><a href=\"#b-EventEmitter\" class=\"headerlink\" title=\"b) EventEmitter\"></a>b) EventEmitter</h5><p>事件模块是 Node.js 内置的对观察者模式“发布/订阅”（publish/subscribe）的实现，通过EventEmitter属性，提供了一个构造函数。该构造函数的实例具有 on 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 EventEmitter 实例的 on 方法监听到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter</span><br><span class=\"line\"><span class=\"keyword\">var</span> life = <span class=\"keyword\">new</span> EventEmitter()</span><br><span class=\"line\"><span class=\"comment\">// 设置可以添加的事件数量</span></span><br><span class=\"line\">life.setMaxListeners(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> water = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'给'</span> + who + <span class=\"string\">'倒杯水！'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">life.on(<span class=\"string\">'求安慰'</span>, water)</span><br><span class=\"line\"></span><br><span class=\"line\">life.on(<span class=\"string\">'求安慰'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'给'</span> + who + <span class=\"string\">'做饭！'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ... 总共可以添加10个事件 【默认】</span></span><br><span class=\"line\"><span class=\"comment\">// 超出会有报出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">life.emit(<span class=\"string\">'求安慰'</span>, <span class=\"string\">'汉子'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 事件移除</span></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数具名化 移除某一个事件</span></span><br><span class=\"line\">life.removeListener(<span class=\"string\">'求安慰'</span>, water)</span><br><span class=\"line\"><span class=\"comment\">// 全部移除</span></span><br><span class=\"line\">life.removeAllListeners()</span><br><span class=\"line\"><span class=\"comment\">// 移除某一个事件</span></span><br><span class=\"line\">life.removeListener(<span class=\"string\">'求安慰'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测事件是否监听</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLifeListener = life.emit(<span class=\"string\">'求安慰'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'求安慰事件是否监听:'</span> + hasLifeListener)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测事件监听的个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'life 上添加的事件数量是:'</span> + life.listeners(<span class=\"string\">'求安慰'</span>).length)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(life, <span class=\"string\">'求安慰'</span>))</span><br></pre></td></tr></table></figure>\n<h5 id=\"c-buffer\"><a href=\"#c-buffer\" class=\"headerlink\" title=\"c) buffer\"></a>c) buffer</h5><p>Buffer： 是一个对象， 是一个构造函数； 实例：V8引擎分配的一段内存；基本是一个数组，整数值；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Buffer(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\">//  &lt;Buffer 31 32 33&gt;</span></span><br><span class=\"line\">默认编码格式 utf<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\">指定编码：</span><br><span class=\"line\"><span class=\"keyword\">new</span> Buffer(<span class=\"string\">'123'</span>, <span class=\"string\">'base64'</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;Buffer d7 6d&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">长度：</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>)   </span><br><span class=\"line\">buf.length   <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">限制长度，写入会被截取</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">6</span>)</span><br><span class=\"line\">buf.write(<span class=\"string\">'12345678'</span>)</span><br><span class=\"line\">buf <span class=\"comment\">// &lt;Buffer 31 32 32 33 34 35&gt;   6位 超出不会被缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">实例化数组，可以用下表读取到；</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">1</span>,<span class=\"number\">2.22</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">buf[<span class=\"number\">0</span>]   <span class=\"comment\">// 1</span></span><br><span class=\"line\">buf[<span class=\"number\">1</span>]   <span class=\"comment\">// 2  [自动取证]</span></span><br></pre></td></tr></table></figure></p>\n<p>buffer转化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'12345'</span>)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> str = buf.toString(<span class=\"string\">'base64'</span>)</span><br><span class=\"line\"><span class=\"comment\">//&gt; str  'MTIzNDU='</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> buf2 = <span class=\"keyword\">new</span> Buffer(str, <span class=\"string\">'base64'</span>)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> str2 = buf2.toString()</span><br><span class=\"line\"><span class=\"comment\">// &gt; str2  12345</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>tips: Api写法：Error-first Callback 和 EventEmitter<br>","more":"</p>\n<h5 id=\"a-在node的回调中错误优先\"><a href=\"#a-在node的回调中错误优先\" class=\"headerlink\" title=\"a) 在node的回调中错误优先\"></a>a) 在node的回调中错误优先</h5><p>应该先定义错误的返回接收函数</p>\n<ul>\n<li>回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。</li>\n<li>回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// process the error and result</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。</p>\n<h5 id=\"b-EventEmitter\"><a href=\"#b-EventEmitter\" class=\"headerlink\" title=\"b) EventEmitter\"></a>b) EventEmitter</h5><p>事件模块是 Node.js 内置的对观察者模式“发布/订阅”（publish/subscribe）的实现，通过EventEmitter属性，提供了一个构造函数。该构造函数的实例具有 on 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 EventEmitter 实例的 on 方法监听到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter</span><br><span class=\"line\"><span class=\"keyword\">var</span> life = <span class=\"keyword\">new</span> EventEmitter()</span><br><span class=\"line\"><span class=\"comment\">// 设置可以添加的事件数量</span></span><br><span class=\"line\">life.setMaxListeners(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加事件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> water = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'给'</span> + who + <span class=\"string\">'倒杯水！'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">life.on(<span class=\"string\">'求安慰'</span>, water)</span><br><span class=\"line\"></span><br><span class=\"line\">life.on(<span class=\"string\">'求安慰'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'给'</span> + who + <span class=\"string\">'做饭！'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ... 总共可以添加10个事件 【默认】</span></span><br><span class=\"line\"><span class=\"comment\">// 超出会有报出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">life.emit(<span class=\"string\">'求安慰'</span>, <span class=\"string\">'汉子'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 事件移除</span></span><br><span class=\"line\"><span class=\"comment\">// 将回调函数具名化 移除某一个事件</span></span><br><span class=\"line\">life.removeListener(<span class=\"string\">'求安慰'</span>, water)</span><br><span class=\"line\"><span class=\"comment\">// 全部移除</span></span><br><span class=\"line\">life.removeAllListeners()</span><br><span class=\"line\"><span class=\"comment\">// 移除某一个事件</span></span><br><span class=\"line\">life.removeListener(<span class=\"string\">'求安慰'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测事件是否监听</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLifeListener = life.emit(<span class=\"string\">'求安慰'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'求安慰事件是否监听:'</span> + hasLifeListener)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测事件监听的个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'life 上添加的事件数量是:'</span> + life.listeners(<span class=\"string\">'求安慰'</span>).length)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(life, <span class=\"string\">'求安慰'</span>))</span><br></pre></td></tr></table></figure>\n<h5 id=\"c-buffer\"><a href=\"#c-buffer\" class=\"headerlink\" title=\"c) buffer\"></a>c) buffer</h5><p>Buffer： 是一个对象， 是一个构造函数； 实例：V8引擎分配的一段内存；基本是一个数组，整数值；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Buffer(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"comment\">//  &lt;Buffer 31 32 33&gt;</span></span><br><span class=\"line\">默认编码格式 utf<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\">指定编码：</span><br><span class=\"line\"><span class=\"keyword\">new</span> Buffer(<span class=\"string\">'123'</span>, <span class=\"string\">'base64'</span>)</span><br><span class=\"line\"><span class=\"comment\">// &lt;Buffer d7 6d&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">长度：</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>)   </span><br><span class=\"line\">buf.length   <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">限制长度，写入会被截取</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">6</span>)</span><br><span class=\"line\">buf.write(<span class=\"string\">'12345678'</span>)</span><br><span class=\"line\">buf <span class=\"comment\">// &lt;Buffer 31 32 32 33 34 35&gt;   6位 超出不会被缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">实例化数组，可以用下表读取到；</span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">1</span>,<span class=\"number\">2.22</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">buf[<span class=\"number\">0</span>]   <span class=\"comment\">// 1</span></span><br><span class=\"line\">buf[<span class=\"number\">1</span>]   <span class=\"comment\">// 2  [自动取证]</span></span><br></pre></td></tr></table></figure></p>\n<p>buffer转化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'12345'</span>)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> str = buf.toString(<span class=\"string\">'base64'</span>)</span><br><span class=\"line\"><span class=\"comment\">//&gt; str  'MTIzNDU='</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> buf2 = <span class=\"keyword\">new</span> Buffer(str, <span class=\"string\">'base64'</span>)</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> str2 = buf2.toString()</span><br><span class=\"line\"><span class=\"comment\">// &gt; str2  12345</span></span><br></pre></td></tr></table></figure>"},{"title":"理解react中的constructor与super","date":"2018-04-11T09:45:27.000Z","_content":"\n> react中的constructor与super\n\n<!-- more -->\n\n#### constructor( )-----super( )的基本含义\n\nconstructor( )——构造方法\n\n　　这是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。\n\nsuper( ) ——继承\n\n　　在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。\n\n　　报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。\n\n#### Es5-----Es6关于继承的实现不同之处\n\n出现上面情况的原因是，ES5的继承机制与ES6完全不同。\n\n复习一个重要知识点——ES5中new到底做了些啥？\n\n\n　`当一个构造函数前加上new的时候，背地里来做了四件事：`\n\n　　　　`1.生成一个空的对象并将其作为 this；`\n\n　　　　`2.将空对象的 __proto__ 指向构造函数的 prototype；`\n\n　　　　`3.运行该构造函数；`\n\n　　　　`4.如果构造函数没有 return 或者 return 一个返回 this 值是基本类型，则返回this；如果 return 一个引用类型，则返回这个引用类型。`\n\n简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用 super( )方法），完后再用子类的构造函数修改this。\n\n\n\n#### super(props)------super()-----以及不写super的区别\n\n　　如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;\n\n　　如果你在constructor中要使用this.props,就必须给super加参数：super(props)；\n\n　　（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）\n\n　　如果没用到constructor,是可以不写的；React会默认添加一个空的constructor。\n\n","source":"_posts/js/react/react-constructor-super.md","raw":"---\ntitle: 理解react中的constructor与super\ntags: ['react']\ncategories: ['JavaScript']\ndate: 2018-04-11 17:45:27\n---\n\n> react中的constructor与super\n\n<!-- more -->\n\n#### constructor( )-----super( )的基本含义\n\nconstructor( )——构造方法\n\n　　这是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。\n\nsuper( ) ——继承\n\n　　在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。\n\n　　报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。\n\n#### Es5-----Es6关于继承的实现不同之处\n\n出现上面情况的原因是，ES5的继承机制与ES6完全不同。\n\n复习一个重要知识点——ES5中new到底做了些啥？\n\n\n　`当一个构造函数前加上new的时候，背地里来做了四件事：`\n\n　　　　`1.生成一个空的对象并将其作为 this；`\n\n　　　　`2.将空对象的 __proto__ 指向构造函数的 prototype；`\n\n　　　　`3.运行该构造函数；`\n\n　　　　`4.如果构造函数没有 return 或者 return 一个返回 this 值是基本类型，则返回this；如果 return 一个引用类型，则返回这个引用类型。`\n\n简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用 super( )方法），完后再用子类的构造函数修改this。\n\n\n\n#### super(props)------super()-----以及不写super的区别\n\n　　如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;\n\n　　如果你在constructor中要使用this.props,就必须给super加参数：super(props)；\n\n　　（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）\n\n　　如果没用到constructor,是可以不写的；React会默认添加一个空的constructor。\n\n","slug":"js/react/react-constructor-super","published":1,"updated":"2018-09-04T13:49:59.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3ts8002p6oospe5ksp4j","content":"<blockquote>\n<p>react中的constructor与super</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"constructor-—–super-的基本含义\"><a href=\"#constructor-—–super-的基本含义\" class=\"headerlink\" title=\"constructor( )—–super( )的基本含义\"></a>constructor( )—–super( )的基本含义</h4><p>constructor( )——构造方法</p>\n<p>　　这是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。</p>\n<p>super( ) ——继承</p>\n<p>　　在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。</p>\n<p>　　报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。</p>\n<h4 id=\"Es5—–Es6关于继承的实现不同之处\"><a href=\"#Es5—–Es6关于继承的实现不同之处\" class=\"headerlink\" title=\"Es5—–Es6关于继承的实现不同之处\"></a>Es5—–Es6关于继承的实现不同之处</h4><p>出现上面情况的原因是，ES5的继承机制与ES6完全不同。</p>\n<p>复习一个重要知识点——ES5中new到底做了些啥？</p>\n<p>　<code>当一个构造函数前加上new的时候，背地里来做了四件事：</code></p>\n<p>　　　　<code>1.生成一个空的对象并将其作为 this；</code></p>\n<p>　　　　<code>2.将空对象的 __proto__ 指向构造函数的 prototype；</code></p>\n<p>　　　　<code>3.运行该构造函数；</code></p>\n<p>　　　　<code>4.如果构造函数没有 return 或者 return 一个返回 this 值是基本类型，则返回this；如果 return 一个引用类型，则返回这个引用类型。</code></p>\n<p>简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用 super( )方法），完后再用子类的构造函数修改this。</p>\n<h4 id=\"super-props-——super-—–以及不写super的区别\"><a href=\"#super-props-——super-—–以及不写super的区别\" class=\"headerlink\" title=\"super(props)——super()—–以及不写super的区别\"></a>super(props)——super()—–以及不写super的区别</h4><p>　　如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;</p>\n<p>　　如果你在constructor中要使用this.props,就必须给super加参数：super(props)；</p>\n<p>　　（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）</p>\n<p>　　如果没用到constructor,是可以不写的；React会默认添加一个空的constructor。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>react中的constructor与super</p>\n</blockquote>","more":"<h4 id=\"constructor-—–super-的基本含义\"><a href=\"#constructor-—–super-的基本含义\" class=\"headerlink\" title=\"constructor( )—–super( )的基本含义\"></a>constructor( )—–super( )的基本含义</h4><p>constructor( )——构造方法</p>\n<p>　　这是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。</p>\n<p>super( ) ——继承</p>\n<p>　　在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。</p>\n<p>　　报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。</p>\n<h4 id=\"Es5—–Es6关于继承的实现不同之处\"><a href=\"#Es5—–Es6关于继承的实现不同之处\" class=\"headerlink\" title=\"Es5—–Es6关于继承的实现不同之处\"></a>Es5—–Es6关于继承的实现不同之处</h4><p>出现上面情况的原因是，ES5的继承机制与ES6完全不同。</p>\n<p>复习一个重要知识点——ES5中new到底做了些啥？</p>\n<p>　<code>当一个构造函数前加上new的时候，背地里来做了四件事：</code></p>\n<p>　　　　<code>1.生成一个空的对象并将其作为 this；</code></p>\n<p>　　　　<code>2.将空对象的 __proto__ 指向构造函数的 prototype；</code></p>\n<p>　　　　<code>3.运行该构造函数；</code></p>\n<p>　　　　<code>4.如果构造函数没有 return 或者 return 一个返回 this 值是基本类型，则返回this；如果 return 一个引用类型，则返回这个引用类型。</code></p>\n<p>简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用 super( )方法），完后再用子类的构造函数修改this。</p>\n<h4 id=\"super-props-——super-—–以及不写super的区别\"><a href=\"#super-props-——super-—–以及不写super的区别\" class=\"headerlink\" title=\"super(props)——super()—–以及不写super的区别\"></a>super(props)——super()—–以及不写super的区别</h4><p>　　如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;</p>\n<p>　　如果你在constructor中要使用this.props,就必须给super加参数：super(props)；</p>\n<p>　　（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）</p>\n<p>　　如果没用到constructor,是可以不写的；React会默认添加一个空的constructor。</p>"},{"title":"微信小程序跳转总结","date":"2018-12-11T08:19:36.000Z","_content":"简介: 总结微信小程序开发过程中如何正确使用跳转\n<!-- more -->\n#### 小程序跳转问题\n[官方地址传送门](https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateBack.html)\n##### `wx.navigateBack` \n\n> 小程序返回上一页或者多级页面。可以使用 `getCurrentPages()` 获取当前的页面栈，决定需要返回几层。\n\n```js\nwx.navigateBack({\n  delta: 2 // 返回上一页 层级\n})\n```\n\n##### `wx.navigateTo()` 可以传参\n***\n> wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面\n**跳转的页面会自带返回按钮**\n\n```js\nwx.navigateTo({\n  url: 'test?id=1'\n})\n\n// test.js\nPage({\n  onLoad(option) {\n    console.log(option.query)\n  }\n})\n```\n\n##### `wx.reLaunch()`可以传递参数\n\n> 关闭所有页面，打开到应用内的某个页面\n**跳转的页面不会有返回按钮**\n\n##### `wx.switchTab()`不能带参数\n\n> 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n**跳转的页面不会有返回按钮**\n\n##### `wx.redirectTo()` 可以传递参数\n\n> 关闭当前页面，跳转到应用内的某个页面。\n\n```js\n    wx.redirectTo({\n        url: 'test?id=1'\n    })\n```\n***\n**案例问题？**\n> 页面A-【navigateTo】 -> login页面-【navigateTo】 -> 页面C（该页面需要登录，所以在A跳转的时候判断是否登录，如未登录跳转到登录页面）\n> 开始时跳转都用的是 navigateTo, 在页面C中点击返回时，返回到了登录页，这显然是错误的，一直在想如何从C页面直接跳回A页面....\n\n解决方法： 在login页面使用 `wx.redirectTo`\n\n预期效果：A -> login -> C    然后  C直接返回A\n\nA -> login  通过 `wx.navigateTo` 跳转\n\nlogin -> C 通过 `wx.redirectTo` 跳转.跳转触发后 login 页面就会被销毁， C 页面再返回 `wx.navigateBack` 就会直接到 A 了","source":"_posts/js/we_chat/wechat-002.md","raw":"---\ntitle: 微信小程序跳转总结\ntags: [小程序]\ncategories: [前端开发]\ndate: 2018-12-11 16:19:36\n---\n简介: 总结微信小程序开发过程中如何正确使用跳转\n<!-- more -->\n#### 小程序跳转问题\n[官方地址传送门](https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateBack.html)\n##### `wx.navigateBack` \n\n> 小程序返回上一页或者多级页面。可以使用 `getCurrentPages()` 获取当前的页面栈，决定需要返回几层。\n\n```js\nwx.navigateBack({\n  delta: 2 // 返回上一页 层级\n})\n```\n\n##### `wx.navigateTo()` 可以传参\n***\n> wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面\n**跳转的页面会自带返回按钮**\n\n```js\nwx.navigateTo({\n  url: 'test?id=1'\n})\n\n// test.js\nPage({\n  onLoad(option) {\n    console.log(option.query)\n  }\n})\n```\n\n##### `wx.reLaunch()`可以传递参数\n\n> 关闭所有页面，打开到应用内的某个页面\n**跳转的页面不会有返回按钮**\n\n##### `wx.switchTab()`不能带参数\n\n> 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面\n**跳转的页面不会有返回按钮**\n\n##### `wx.redirectTo()` 可以传递参数\n\n> 关闭当前页面，跳转到应用内的某个页面。\n\n```js\n    wx.redirectTo({\n        url: 'test?id=1'\n    })\n```\n***\n**案例问题？**\n> 页面A-【navigateTo】 -> login页面-【navigateTo】 -> 页面C（该页面需要登录，所以在A跳转的时候判断是否登录，如未登录跳转到登录页面）\n> 开始时跳转都用的是 navigateTo, 在页面C中点击返回时，返回到了登录页，这显然是错误的，一直在想如何从C页面直接跳回A页面....\n\n解决方法： 在login页面使用 `wx.redirectTo`\n\n预期效果：A -> login -> C    然后  C直接返回A\n\nA -> login  通过 `wx.navigateTo` 跳转\n\nlogin -> C 通过 `wx.redirectTo` 跳转.跳转触发后 login 页面就会被销毁， C 页面再返回 `wx.navigateBack` 就会直接到 A 了","slug":"js/we_chat/wechat-002","published":1,"updated":"2018-12-19T08:49:43.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tsa002s6oostw3ov54c","content":"<p>简介: 总结微信小程序开发过程中如何正确使用跳转<br><a id=\"more\"></a></p>\n<h4 id=\"小程序跳转问题\"><a href=\"#小程序跳转问题\" class=\"headerlink\" title=\"小程序跳转问题\"></a>小程序跳转问题</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateBack.html\" target=\"_blank\" rel=\"noopener\">官方地址传送门</a></p>\n<h5 id=\"wx-navigateBack\"><a href=\"#wx-navigateBack\" class=\"headerlink\" title=\"wx.navigateBack\"></a><code>wx.navigateBack</code></h5><blockquote>\n<p>小程序返回上一页或者多级页面。可以使用 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateBack(&#123;</span><br><span class=\"line\">  delta: <span class=\"number\">2</span> <span class=\"comment\">// 返回上一页 层级</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"wx-navigateTo-可以传参\"><a href=\"#wx-navigateTo-可以传参\" class=\"headerlink\" title=\"wx.navigateTo() 可以传参\"></a><code>wx.navigateTo()</code> 可以传参</h5><hr>\n<blockquote>\n<p>wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面<br><strong>跳转的页面会自带返回按钮</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateTo(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'test?id=1'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onLoad(option) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(option.query)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"wx-reLaunch-可以传递参数\"><a href=\"#wx-reLaunch-可以传递参数\" class=\"headerlink\" title=\"wx.reLaunch()可以传递参数\"></a><code>wx.reLaunch()</code>可以传递参数</h5><blockquote>\n<p>关闭所有页面，打开到应用内的某个页面<br><strong>跳转的页面不会有返回按钮</strong></p>\n</blockquote>\n<h5 id=\"wx-switchTab-不能带参数\"><a href=\"#wx-switchTab-不能带参数\" class=\"headerlink\" title=\"wx.switchTab()不能带参数\"></a><code>wx.switchTab()</code>不能带参数</h5><blockquote>\n<p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br><strong>跳转的页面不会有返回按钮</strong></p>\n</blockquote>\n<h5 id=\"wx-redirectTo-可以传递参数\"><a href=\"#wx-redirectTo-可以传递参数\" class=\"headerlink\" title=\"wx.redirectTo() 可以传递参数\"></a><code>wx.redirectTo()</code> 可以传递参数</h5><blockquote>\n<p>关闭当前页面，跳转到应用内的某个页面。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.redirectTo(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'test?id=1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>案例问题？</strong></p>\n<blockquote>\n<p>页面A-【navigateTo】 -&gt; login页面-【navigateTo】 -&gt; 页面C（该页面需要登录，所以在A跳转的时候判断是否登录，如未登录跳转到登录页面）<br>开始时跳转都用的是 navigateTo, 在页面C中点击返回时，返回到了登录页，这显然是错误的，一直在想如何从C页面直接跳回A页面….</p>\n</blockquote>\n<p>解决方法： 在login页面使用 <code>wx.redirectTo</code></p>\n<p>预期效果：A -&gt; login -&gt; C    然后  C直接返回A</p>\n<p>A -&gt; login  通过 <code>wx.navigateTo</code> 跳转</p>\n<p>login -&gt; C 通过 <code>wx.redirectTo</code> 跳转.跳转触发后 login 页面就会被销毁， C 页面再返回 <code>wx.navigateBack</code> 就会直接到 A 了</p>\n","site":{"data":{}},"excerpt":"<p>简介: 总结微信小程序开发过程中如何正确使用跳转<br>","more":"</p>\n<h4 id=\"小程序跳转问题\"><a href=\"#小程序跳转问题\" class=\"headerlink\" title=\"小程序跳转问题\"></a>小程序跳转问题</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateBack.html\" target=\"_blank\" rel=\"noopener\">官方地址传送门</a></p>\n<h5 id=\"wx-navigateBack\"><a href=\"#wx-navigateBack\" class=\"headerlink\" title=\"wx.navigateBack\"></a><code>wx.navigateBack</code></h5><blockquote>\n<p>小程序返回上一页或者多级页面。可以使用 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateBack(&#123;</span><br><span class=\"line\">  delta: <span class=\"number\">2</span> <span class=\"comment\">// 返回上一页 层级</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"wx-navigateTo-可以传参\"><a href=\"#wx-navigateTo-可以传参\" class=\"headerlink\" title=\"wx.navigateTo() 可以传参\"></a><code>wx.navigateTo()</code> 可以传参</h5><hr>\n<blockquote>\n<p>wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面<br><strong>跳转的页面会自带返回按钮</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.navigateTo(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'test?id=1'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onLoad(option) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(option.query)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"wx-reLaunch-可以传递参数\"><a href=\"#wx-reLaunch-可以传递参数\" class=\"headerlink\" title=\"wx.reLaunch()可以传递参数\"></a><code>wx.reLaunch()</code>可以传递参数</h5><blockquote>\n<p>关闭所有页面，打开到应用内的某个页面<br><strong>跳转的页面不会有返回按钮</strong></p>\n</blockquote>\n<h5 id=\"wx-switchTab-不能带参数\"><a href=\"#wx-switchTab-不能带参数\" class=\"headerlink\" title=\"wx.switchTab()不能带参数\"></a><code>wx.switchTab()</code>不能带参数</h5><blockquote>\n<p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br><strong>跳转的页面不会有返回按钮</strong></p>\n</blockquote>\n<h5 id=\"wx-redirectTo-可以传递参数\"><a href=\"#wx-redirectTo-可以传递参数\" class=\"headerlink\" title=\"wx.redirectTo() 可以传递参数\"></a><code>wx.redirectTo()</code> 可以传递参数</h5><blockquote>\n<p>关闭当前页面，跳转到应用内的某个页面。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.redirectTo(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'test?id=1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>案例问题？</strong></p>\n<blockquote>\n<p>页面A-【navigateTo】 -&gt; login页面-【navigateTo】 -&gt; 页面C（该页面需要登录，所以在A跳转的时候判断是否登录，如未登录跳转到登录页面）<br>开始时跳转都用的是 navigateTo, 在页面C中点击返回时，返回到了登录页，这显然是错误的，一直在想如何从C页面直接跳回A页面….</p>\n</blockquote>\n<p>解决方法： 在login页面使用 <code>wx.redirectTo</code></p>\n<p>预期效果：A -&gt; login -&gt; C    然后  C直接返回A</p>\n<p>A -&gt; login  通过 <code>wx.navigateTo</code> 跳转</p>\n<p>login -&gt; C 通过 <code>wx.redirectTo</code> 跳转.跳转触发后 login 页面就会被销毁， C 页面再返回 <code>wx.navigateBack</code> 就会直接到 A 了</p>"},{"title":"微信小程序开发采坑指南(二)","date":"2018-12-19T07:10:35.000Z","_content":"内容：小程序转发\n<!-- more -->\n### 小程序转发\n\n微信小程序当页面js中有onShareAppMessage函数，右上角就会有转发按钮， 默认转发的当前页面；转发时的图片就是当前页面80%的高度；\n[官方API](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html)\n[onShareAppMessage](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)\n```js\n/**\n* 用户点击右上角分享\n*/\n onShareAppMessage: function (ops) {\n   if (ops.from === 'button') {\n        // button：页面内转发按钮；\n        // menu：右上角转发菜单\n     console.log(ops.target)\n   }\n   return {\n     title: '我的小程序',\n     path: 'pages/index/index', //转发链接打开的页面\n     imageUrl: 'img/自定义图片路径', //没有时使用当前页面内容\n       // 转发成功\n     success: function (res) {\n       console.log(\"转发成功:\" , res);\n     },\n       // 转发失败\n     fail: function (res) {\n       console.log(\"转发失败:\" ,res);\n     }\n   }\n\n }\n```\n> 转发成功后，小程序会自动显示一个 tips  转发成功 ；","source":"_posts/js/we_chat/wechat-003.md","raw":"---\ntitle: 微信小程序开发采坑指南(二)\ntags: [小程序]\ncategories: [前端开发]\ndate: 2018-12-19 15:10:35\n---\n内容：小程序转发\n<!-- more -->\n### 小程序转发\n\n微信小程序当页面js中有onShareAppMessage函数，右上角就会有转发按钮， 默认转发的当前页面；转发时的图片就是当前页面80%的高度；\n[官方API](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html)\n[onShareAppMessage](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)\n```js\n/**\n* 用户点击右上角分享\n*/\n onShareAppMessage: function (ops) {\n   if (ops.from === 'button') {\n        // button：页面内转发按钮；\n        // menu：右上角转发菜单\n     console.log(ops.target)\n   }\n   return {\n     title: '我的小程序',\n     path: 'pages/index/index', //转发链接打开的页面\n     imageUrl: 'img/自定义图片路径', //没有时使用当前页面内容\n       // 转发成功\n     success: function (res) {\n       console.log(\"转发成功:\" , res);\n     },\n       // 转发失败\n     fail: function (res) {\n       console.log(\"转发失败:\" ,res);\n     }\n   }\n\n }\n```\n> 转发成功后，小程序会自动显示一个 tips  转发成功 ；","slug":"js/we_chat/wechat-003","published":1,"updated":"2018-12-19T08:49:37.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tsc002u6oosgn3vhrao","content":"<p>内容：小程序转发<br><a id=\"more\"></a></p>\n<h3 id=\"小程序转发\"><a href=\"#小程序转发\" class=\"headerlink\" title=\"小程序转发\"></a>小程序转发</h3><p>微信小程序当页面js中有onShareAppMessage函数，右上角就会有转发按钮， 默认转发的当前页面；转发时的图片就是当前页面80%的高度；<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html\" target=\"_blank\" rel=\"noopener\">官方API</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">onShareAppMessage</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 用户点击右上角分享</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> onShareAppMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ops</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (ops.from === <span class=\"string\">'button'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// button：页面内转发按钮；</span></span><br><span class=\"line\">        <span class=\"comment\">// menu：右上角转发菜单</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(ops.target)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     title: <span class=\"string\">'我的小程序'</span>,</span><br><span class=\"line\">     path: <span class=\"string\">'pages/index/index'</span>, <span class=\"comment\">//转发链接打开的页面</span></span><br><span class=\"line\">     imageUrl: <span class=\"string\">'img/自定义图片路径'</span>, <span class=\"comment\">//没有时使用当前页面内容</span></span><br><span class=\"line\">       <span class=\"comment\">// 转发成功</span></span><br><span class=\"line\">     success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"转发成功:\"</span> , res);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">       <span class=\"comment\">// 转发失败</span></span><br><span class=\"line\">     fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"转发失败:\"</span> ,res);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>转发成功后，小程序会自动显示一个 tips  转发成功 ；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>内容：小程序转发<br>","more":"</p>\n<h3 id=\"小程序转发\"><a href=\"#小程序转发\" class=\"headerlink\" title=\"小程序转发\"></a>小程序转发</h3><p>微信小程序当页面js中有onShareAppMessage函数，右上角就会有转发按钮， 默认转发的当前页面；转发时的图片就是当前页面80%的高度；<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html\" target=\"_blank\" rel=\"noopener\">官方API</a><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">onShareAppMessage</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 用户点击右上角分享</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> onShareAppMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ops</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (ops.from === <span class=\"string\">'button'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// button：页面内转发按钮；</span></span><br><span class=\"line\">        <span class=\"comment\">// menu：右上角转发菜单</span></span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(ops.target)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     title: <span class=\"string\">'我的小程序'</span>,</span><br><span class=\"line\">     path: <span class=\"string\">'pages/index/index'</span>, <span class=\"comment\">//转发链接打开的页面</span></span><br><span class=\"line\">     imageUrl: <span class=\"string\">'img/自定义图片路径'</span>, <span class=\"comment\">//没有时使用当前页面内容</span></span><br><span class=\"line\">       <span class=\"comment\">// 转发成功</span></span><br><span class=\"line\">     success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"转发成功:\"</span> , res);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">       <span class=\"comment\">// 转发失败</span></span><br><span class=\"line\">     fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"转发失败:\"</span> ,res);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>转发成功后，小程序会自动显示一个 tips  转发成功 ；</p>\n</blockquote>"},{"title":"微信小程序开发采坑指南（一）","date":"2018-09-20T09:33:18.000Z","_content":"tips: 小程序背景图使用、动态图片、触发事件， iconfont使用\n<!-- more -->\n####  block标签\n`<block/>` 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。\n> 例如 wx:if  wx:for\n\n```html\n<block wx:if=\"{{true}}\">\n  <view> view1 </view>\n  <view> view2 </view>\n</block>\n```\n#### 小程序中的背景图片\n##### 实现背景图的方法\n> tips： `background-image` 只能用网络url或者base64 . 本地图片要用`image`标签才行。\n\n可以通过image标签和其他元素层叠来实现背景图，使用 `position：absolute`定位层叠；\n\n****\n\n##### 小技巧：\n\n实现如图效果：\n![图片](/public_s/images/menu.saveimg.savepath20180920175019.jpg)\n采用元素溢出，和`position:relative`定位来实现\n\n** html**\n\n```html\n<view class='wrap-center-line'>\n    <view class='line-bac'>\n        <text class='line-bac-text'>车次详情</text>\n    </view>\n    </view>\n```\n** css**\n\n```css\n.wrap-center-line {\n  height: 40rpx;\n  padding: 12rpx 32rpx;\n  display: flex;\n  align-items: center;\n}\n.wrap-center-line .line-bac {\n  width: 100%;\n  height: 2rpx;\n  border-top: 2rpx dashed #d9d9d9;\n  text-align: center;\n}\n.wrap-center-line .line-bac-text {\n  display: inline-block;\n  position: relative;\n  top: -24rpx;\n  background: #fff;\n  color:#A6A6A6;\n  padding: 0 24rpx;\n}\n```\n##### 动态图片显示\n动态改变图片，可以在url中使用双括号的方式来绑定数据\n\n    <image class=\"swiper-img\" mode='aspectFill' src='../../assets/swiper/{{item}}'></image>\n\n#### 触发事件传值\n\n在view层绑定事件，将当前视图对应的数据传递到事件中去，方法如下\n\n\n```html\n    <view bindtab=\"{{ clickHandle }}\" data-batchNumber='{{batchNumber}}'> 点击按钮 </view>\n```\n在js事件中接收时` data-batchNumber` N会默认转换成小写字母\n\n```js\nclickHandle: function(event) {\n    //假定batchNumber的值是 P132456789\n    console.log(event.currentTarget.dataset)\n    // 输出的是 { batchnumber: 'P123456789' } 注意到： 其中的 n 是小写的\n    // 应该如下方法获取\n    let { batchnumber } = event.currentTarget.dataset\n}\n```\n\n#### 小程序使用iconfont\n\n小程序中使用iconfont其实和PC上一样，只需要将从iconfont上下载下来的 iconfont.css 文件的后缀修改成 iconfont.wxss\n-  将iconfont.wxss文件放在小程序根目录下，在 app.wxss 中引入\n    `@import \"icon-font.wxss\";`\n-  页面使用：\n    `<text class='iconfont icon-ic_dianhua'></text>`\n\n","source":"_posts/js/we_chat/wechat-001.md","raw":"---\ntitle: 微信小程序开发采坑指南（一）\ntags: [小程序]\ncategories: [前端开发]\ndate: 2018-09-20 17:33:18\n---\ntips: 小程序背景图使用、动态图片、触发事件， iconfont使用\n<!-- more -->\n####  block标签\n`<block/>` 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。\n> 例如 wx:if  wx:for\n\n```html\n<block wx:if=\"{{true}}\">\n  <view> view1 </view>\n  <view> view2 </view>\n</block>\n```\n#### 小程序中的背景图片\n##### 实现背景图的方法\n> tips： `background-image` 只能用网络url或者base64 . 本地图片要用`image`标签才行。\n\n可以通过image标签和其他元素层叠来实现背景图，使用 `position：absolute`定位层叠；\n\n****\n\n##### 小技巧：\n\n实现如图效果：\n![图片](/public_s/images/menu.saveimg.savepath20180920175019.jpg)\n采用元素溢出，和`position:relative`定位来实现\n\n** html**\n\n```html\n<view class='wrap-center-line'>\n    <view class='line-bac'>\n        <text class='line-bac-text'>车次详情</text>\n    </view>\n    </view>\n```\n** css**\n\n```css\n.wrap-center-line {\n  height: 40rpx;\n  padding: 12rpx 32rpx;\n  display: flex;\n  align-items: center;\n}\n.wrap-center-line .line-bac {\n  width: 100%;\n  height: 2rpx;\n  border-top: 2rpx dashed #d9d9d9;\n  text-align: center;\n}\n.wrap-center-line .line-bac-text {\n  display: inline-block;\n  position: relative;\n  top: -24rpx;\n  background: #fff;\n  color:#A6A6A6;\n  padding: 0 24rpx;\n}\n```\n##### 动态图片显示\n动态改变图片，可以在url中使用双括号的方式来绑定数据\n\n    <image class=\"swiper-img\" mode='aspectFill' src='../../assets/swiper/{{item}}'></image>\n\n#### 触发事件传值\n\n在view层绑定事件，将当前视图对应的数据传递到事件中去，方法如下\n\n\n```html\n    <view bindtab=\"{{ clickHandle }}\" data-batchNumber='{{batchNumber}}'> 点击按钮 </view>\n```\n在js事件中接收时` data-batchNumber` N会默认转换成小写字母\n\n```js\nclickHandle: function(event) {\n    //假定batchNumber的值是 P132456789\n    console.log(event.currentTarget.dataset)\n    // 输出的是 { batchnumber: 'P123456789' } 注意到： 其中的 n 是小写的\n    // 应该如下方法获取\n    let { batchnumber } = event.currentTarget.dataset\n}\n```\n\n#### 小程序使用iconfont\n\n小程序中使用iconfont其实和PC上一样，只需要将从iconfont上下载下来的 iconfont.css 文件的后缀修改成 iconfont.wxss\n-  将iconfont.wxss文件放在小程序根目录下，在 app.wxss 中引入\n    `@import \"icon-font.wxss\";`\n-  页面使用：\n    `<text class='iconfont icon-ic_dianhua'></text>`\n\n","slug":"js/we_chat/wechat-001","published":1,"updated":"2018-12-13T13:08:19.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpuy3tse002y6oostk0qthg5","content":"<p>tips: 小程序背景图使用、动态图片、触发事件， iconfont使用<br><a id=\"more\"></a></p>\n<h4 id=\"block标签\"><a href=\"#block标签\" class=\"headerlink\" title=\"block标签\"></a>block标签</h4><p><code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p>\n<blockquote>\n<p>例如 wx:if  wx:for</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> view1 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> view2 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序中的背景图片\"><a href=\"#小程序中的背景图片\" class=\"headerlink\" title=\"小程序中的背景图片\"></a>小程序中的背景图片</h4><h5 id=\"实现背景图的方法\"><a href=\"#实现背景图的方法\" class=\"headerlink\" title=\"实现背景图的方法\"></a>实现背景图的方法</h5><blockquote>\n<p>tips： <code>background-image</code> 只能用网络url或者base64 . 本地图片要用<code>image</code>标签才行。</p>\n</blockquote>\n<p>可以通过image标签和其他元素层叠来实现背景图，使用 <code>position：absolute</code>定位层叠；</p>\n<hr>\n<h5 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h5><p>实现如图效果：<br><img src=\"/public_s/images/menu.saveimg.savepath20180920175019.jpg\" alt=\"图片\"><br>采用元素溢出，和<code>position:relative</code>定位来实现</p>\n<p><strong> html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'wrap-center-line'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'line-bac'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'line-bac-text'</span>&gt;</span>车次详情<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong> css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12</span>rpx <span class=\"number\">32</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> <span class=\"selector-class\">.line-bac</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">2</span>rpx dashed <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> <span class=\"selector-class\">.line-bac-text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">24</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#A6A6A6</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">24</span>rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"动态图片显示\"><a href=\"#动态图片显示\" class=\"headerlink\" title=\"动态图片显示\"></a>动态图片显示</h5><p>动态改变图片，可以在url中使用双括号的方式来绑定数据</p>\n<pre><code>&lt;image class=&quot;swiper-img&quot; mode=&apos;aspectFill&apos; src=&apos;../../assets/swiper/{{item}}&apos;&gt;&lt;/image&gt;\n</code></pre><h4 id=\"触发事件传值\"><a href=\"#触发事件传值\" class=\"headerlink\" title=\"触发事件传值\"></a>触发事件传值</h4><p>在view层绑定事件，将当前视图对应的数据传递到事件中去，方法如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtab</span>=<span class=\"string\">\"&#123;&#123; clickHandle &#125;&#125;\"</span> <span class=\"attr\">data-batchNumber</span>=<span class=\"string\">'&#123;&#123;batchNumber&#125;&#125;'</span>&gt;</span> 点击按钮 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在js事件中接收时<code>data-batchNumber</code> N会默认转换成小写字母</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickHandle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//假定batchNumber的值是 P132456789</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.currentTarget.dataset)</span><br><span class=\"line\">    <span class=\"comment\">// 输出的是 &#123; batchnumber: 'P123456789' &#125; 注意到： 其中的 n 是小写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 应该如下方法获取</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; batchnumber &#125; = event.currentTarget.dataset</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序使用iconfont\"><a href=\"#小程序使用iconfont\" class=\"headerlink\" title=\"小程序使用iconfont\"></a>小程序使用iconfont</h4><p>小程序中使用iconfont其实和PC上一样，只需要将从iconfont上下载下来的 iconfont.css 文件的后缀修改成 iconfont.wxss</p>\n<ul>\n<li>将iconfont.wxss文件放在小程序根目录下，在 app.wxss 中引入<br> <code>@import &quot;icon-font.wxss&quot;;</code></li>\n<li>页面使用：<br> <code>&lt;text class=&#39;iconfont icon-ic_dianhua&#39;&gt;&lt;/text&gt;</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>tips: 小程序背景图使用、动态图片、触发事件， iconfont使用<br>","more":"</p>\n<h4 id=\"block标签\"><a href=\"#block标签\" class=\"headerlink\" title=\"block标签\"></a>block标签</h4><p><code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p>\n<blockquote>\n<p>例如 wx:if  wx:for</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> view1 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> view2 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序中的背景图片\"><a href=\"#小程序中的背景图片\" class=\"headerlink\" title=\"小程序中的背景图片\"></a>小程序中的背景图片</h4><h5 id=\"实现背景图的方法\"><a href=\"#实现背景图的方法\" class=\"headerlink\" title=\"实现背景图的方法\"></a>实现背景图的方法</h5><blockquote>\n<p>tips： <code>background-image</code> 只能用网络url或者base64 . 本地图片要用<code>image</code>标签才行。</p>\n</blockquote>\n<p>可以通过image标签和其他元素层叠来实现背景图，使用 <code>position：absolute</code>定位层叠；</p>\n<hr>\n<h5 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h5><p>实现如图效果：<br><img src=\"/public_s/images/menu.saveimg.savepath20180920175019.jpg\" alt=\"图片\"><br>采用元素溢出，和<code>position:relative</code>定位来实现</p>\n<p><strong> html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'wrap-center-line'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'line-bac'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'line-bac-text'</span>&gt;</span>车次详情<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong> css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">12</span>rpx <span class=\"number\">32</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> <span class=\"selector-class\">.line-bac</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">2</span>rpx dashed <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap-center-line</span> <span class=\"selector-class\">.line-bac-text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">24</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#A6A6A6</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">24</span>rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"动态图片显示\"><a href=\"#动态图片显示\" class=\"headerlink\" title=\"动态图片显示\"></a>动态图片显示</h5><p>动态改变图片，可以在url中使用双括号的方式来绑定数据</p>\n<pre><code>&lt;image class=&quot;swiper-img&quot; mode=&apos;aspectFill&apos; src=&apos;../../assets/swiper/{{item}}&apos;&gt;&lt;/image&gt;\n</code></pre><h4 id=\"触发事件传值\"><a href=\"#触发事件传值\" class=\"headerlink\" title=\"触发事件传值\"></a>触发事件传值</h4><p>在view层绑定事件，将当前视图对应的数据传递到事件中去，方法如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtab</span>=<span class=\"string\">\"&#123;&#123; clickHandle &#125;&#125;\"</span> <span class=\"attr\">data-batchNumber</span>=<span class=\"string\">'&#123;&#123;batchNumber&#125;&#125;'</span>&gt;</span> 点击按钮 <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在js事件中接收时<code>data-batchNumber</code> N会默认转换成小写字母</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickHandle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//假定batchNumber的值是 P132456789</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.currentTarget.dataset)</span><br><span class=\"line\">    <span class=\"comment\">// 输出的是 &#123; batchnumber: 'P123456789' &#125; 注意到： 其中的 n 是小写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 应该如下方法获取</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; batchnumber &#125; = event.currentTarget.dataset</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"小程序使用iconfont\"><a href=\"#小程序使用iconfont\" class=\"headerlink\" title=\"小程序使用iconfont\"></a>小程序使用iconfont</h4><p>小程序中使用iconfont其实和PC上一样，只需要将从iconfont上下载下来的 iconfont.css 文件的后缀修改成 iconfont.wxss</p>\n<ul>\n<li>将iconfont.wxss文件放在小程序根目录下，在 app.wxss 中引入<br> <code>@import &quot;icon-font.wxss&quot;;</code></li>\n<li>页面使用：<br> <code>&lt;text class=&#39;iconfont icon-ic_dianhua&#39;&gt;&lt;/text&gt;</code></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpuy3tq600036oosibn1ijgf","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3tql000f6oosrjdj9fgd"},{"post_id":"cjpuy3tqd00076oos1h8r1cac","category_id":"cjpuy3tqg000a6oosk837uoqr","_id":"cjpuy3tqo000l6oos25kwhe3j"},{"post_id":"cjpuy3tqk000e6ooszpgsgvdn","category_id":"cjpuy3tqg000a6oosk837uoqr","_id":"cjpuy3tqq000p6ooseumuwnb1"},{"post_id":"cjpuy3tqf00096oosnalgvjab","category_id":"cjpuy3tqm000g6oostjog05pv","_id":"cjpuy3tqr000r6oospuijvo8h"},{"post_id":"cjpuy3tqp000o6oos0rod7l9h","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tqu000x6oos4322k3w3"},{"post_id":"cjpuy3tqi000d6oosru3243k5","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tqw00106oos787gw47n"},{"post_id":"cjpuy3tqr000q6oos2njkt8g6","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tqz00146oos1oppbsf0"},{"post_id":"cjpuy3tqs000u6oos0ab4cu1x","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tqz00156oosvbhrrh7d"},{"post_id":"cjpuy3tqu000w6oosyjgqignv","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tr100176oos9hozy5yi"},{"post_id":"cjpuy3tqm000i6oospmo4ycju","category_id":"cjpuy3tqs000s6oos6u72pd6e","_id":"cjpuy3tr100196oos851hp1eq"},{"post_id":"cjpuy3tqv000z6oosm2tb6hvu","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tr2001b6oos6dh1pbmj"},{"post_id":"cjpuy3tqo000k6oos056fkzvd","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tr4001d6oosc3log1b9"},{"post_id":"cjpuy3trq001u6oossmwqx971","category_id":"cjpuy3tro001r6oos9ra7fgrx","_id":"cjpuy3trw00216oosyibv2mvr"},{"post_id":"cjpuy3trm001p6oos2gq04pe1","category_id":"cjpuy3tro001r6oos9ra7fgrx","_id":"cjpuy3try00266oosagjfxm9b"},{"post_id":"cjpuy3trp001t6oosa5691gue","category_id":"cjpuy3tro001r6oos9ra7fgrx","_id":"cjpuy3ts000286oos0hz8xwub"},{"post_id":"cjpuy3trx00256ooswdmny1nn","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3ts3002e6oosr2z5w8n4"},{"post_id":"cjpuy3trr001v6oosbfcj6fa5","category_id":"cjpuy3trw00226oos4ivwucm1","_id":"cjpuy3ts5002j6oosezrlicdb"},{"post_id":"cjpuy3trz00276oosqkn0ow4q","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3ts7002m6oosaugbxspi"},{"post_id":"cjpuy3tru001z6oosgf4x61fy","category_id":"cjpuy3trw00226oos4ivwucm1","_id":"cjpuy3ts9002q6oosv3u5jgyk"},{"post_id":"cjpuy3ts2002d6oos4vk4689w","category_id":"cjpuy3tro001r6oos9ra7fgrx","_id":"cjpuy3tsb002t6ooswh3t3ot7"},{"post_id":"cjpuy3ts5002i6oos4b4f66xq","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3tsd002v6oospphhfcuy"},{"post_id":"cjpuy3trv00206oosh8ihmtu4","category_id":"cjpuy3trw00226oos4ivwucm1","_id":"cjpuy3tsf002z6oospau1cjkq"},{"post_id":"cjpuy3ts6002l6oosvji2spn0","category_id":"cjpuy3trw00226oos4ivwucm1","_id":"cjpuy3tsg00306oosw7gwwils"},{"post_id":"cjpuy3ts8002p6oospe5ksp4j","category_id":"cjpuy3trw00226oos4ivwucm1","_id":"cjpuy3tsh00326oos1ca7lye1"},{"post_id":"cjpuy3ts1002b6oosqe12x6nm","category_id":"cjpuy3tqp000m6oosnwqplrs5","_id":"cjpuy3tsh00346oosjiwce2ba"},{"post_id":"cjpuy3ts1002b6oosqe12x6nm","category_id":"cjpuy3ts7002n6oosdylnp9ap","_id":"cjpuy3tsi00366oosujdcqw1i"},{"post_id":"cjpuy3tsa002s6oostw3ov54c","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3tsi00386oos67j004ql"},{"post_id":"cjpuy3tsc002u6oosgn3vhrao","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3tsj003a6oosrzgakk0o"},{"post_id":"cjpuy3tse002y6oostk0qthg5","category_id":"cjpuy3tqb00056oos0269s7o0","_id":"cjpuy3tsk003c6oosam8cki2z"}],"PostTag":[{"post_id":"cjpuy3tq600036oosibn1ijgf","tag_id":"cjpuy3tqc00066oosv29ohd0g","_id":"cjpuy3tqi000c6oosritpkqlh"},{"post_id":"cjpuy3tqd00076oos1h8r1cac","tag_id":"cjpuy3tqh000b6oosle60wo00","_id":"cjpuy3tqn000j6oosicwtwmxy"},{"post_id":"cjpuy3tqf00096oosnalgvjab","tag_id":"cjpuy3tqm000h6oosroopam0e","_id":"cjpuy3tqt000v6oos59jdaud8"},{"post_id":"cjpuy3tqf00096oosnalgvjab","tag_id":"cjpuy3tqp000n6oosywq2nklo","_id":"cjpuy3tqv000y6ooss7zvb9pb"},{"post_id":"cjpuy3tqi000d6oosru3243k5","tag_id":"cjpuy3tqs000t6ooslh2kt5op","_id":"cjpuy3tqy00136ooszluq47yb"},{"post_id":"cjpuy3tqk000e6ooszpgsgvdn","tag_id":"cjpuy3tqw00126ooslml5g04t","_id":"cjpuy3tr100186oosfohr2su0"},{"post_id":"cjpuy3tqm000i6oospmo4ycju","tag_id":"cjpuy3tr000166oosmfjp8hke","_id":"cjpuy3tr3001c6oos7j91jtqq"},{"post_id":"cjpuy3tqo000k6oos056fkzvd","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr5001f6oosl36hyqv6"},{"post_id":"cjpuy3tqp000o6oos0rod7l9h","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr6001h6oosvsfzuxez"},{"post_id":"cjpuy3tqr000q6oos2njkt8g6","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr7001j6ooszeaog9zd"},{"post_id":"cjpuy3tqs000u6oos0ab4cu1x","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr8001l6oosnoa2jzog"},{"post_id":"cjpuy3tqu000w6oosyjgqignv","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr9001n6oosdxwjgpae"},{"post_id":"cjpuy3tqv000z6oosm2tb6hvu","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3tr9001o6ooskyjpv1is"},{"post_id":"cjpuy3trm001p6oos2gq04pe1","tag_id":"cjpuy3trp001s6ooszmc4hny1","_id":"cjpuy3trt001y6ooslqdfi6n1"},{"post_id":"cjpuy3trp001t6oosa5691gue","tag_id":"cjpuy3trp001s6ooszmc4hny1","_id":"cjpuy3trx00246oos6ob265w0"},{"post_id":"cjpuy3trq001u6oossmwqx971","tag_id":"cjpuy3trw00236oosqojpnhv3","_id":"cjpuy3ts2002c6oosiufzpiuv"},{"post_id":"cjpuy3ts1002b6oosqe12x6nm","tag_id":"cjpuy3tr2001a6oosq8vk8s7i","_id":"cjpuy3ts4002h6oos69fwfjva"},{"post_id":"cjpuy3trr001v6oosbfcj6fa5","tag_id":"cjpuy3ts0002a6oosvv6ssmbo","_id":"cjpuy3ts6002k6oos8anih6qh"},{"post_id":"cjpuy3tru001z6oosgf4x61fy","tag_id":"cjpuy3ts4002g6oosv4gdyh44","_id":"cjpuy3ts9002r6oos3ozcs1up"},{"post_id":"cjpuy3trv00206oosh8ihmtu4","tag_id":"cjpuy3ts8002o6oosqlzxr7ll","_id":"cjpuy3tse002x6oos5crgrype"},{"post_id":"cjpuy3trx00256ooswdmny1nn","tag_id":"cjpuy3tsd002w6ooste6kxn22","_id":"cjpuy3tsh00336oos97jeg2yt"},{"post_id":"cjpuy3trz00276oosqkn0ow4q","tag_id":"cjpuy3tsg00316oosylg6ghxr","_id":"cjpuy3tsi00376oospirepo0g"},{"post_id":"cjpuy3ts2002d6oos4vk4689w","tag_id":"cjpuy3tsh00356ooszumn0qy1","_id":"cjpuy3tsj003b6oos8md80xrn"},{"post_id":"cjpuy3ts5002i6oos4b4f66xq","tag_id":"cjpuy3tsj00396oos5wqjebs3","_id":"cjpuy3tsl003f6oosf2v3notc"},{"post_id":"cjpuy3ts5002i6oos4b4f66xq","tag_id":"cjpuy3tsk003d6oos3r80l3rn","_id":"cjpuy3tsm003g6ooshgda0om8"},{"post_id":"cjpuy3ts6002l6oosvji2spn0","tag_id":"cjpuy3tsl003e6oos46qggn6q","_id":"cjpuy3tsm003i6ooshvua4njt"},{"post_id":"cjpuy3ts8002p6oospe5ksp4j","tag_id":"cjpuy3tsm003h6oospcxhg9am","_id":"cjpuy3tsn003k6oosq3eite8o"},{"post_id":"cjpuy3tsa002s6oostw3ov54c","tag_id":"cjpuy3tsn003j6oosx3kr2e0c","_id":"cjpuy3tso003m6oosgx1h5av6"},{"post_id":"cjpuy3tsc002u6oosgn3vhrao","tag_id":"cjpuy3tsn003j6oosx3kr2e0c","_id":"cjpuy3tsp003o6ooskdi7c67q"},{"post_id":"cjpuy3tse002y6oostk0qthg5","tag_id":"cjpuy3tsn003j6oosx3kr2e0c","_id":"cjpuy3tsq003p6oosu5fjm3eh"}],"Tag":[{"name":"批处理命令","_id":"cjpuy3tqc00066oosv29ohd0g"},{"name":"情感","_id":"cjpuy3tqh000b6oosle60wo00"},{"name":"电视剧","_id":"cjpuy3tqm000h6oosroopam0e"},{"name":"经典台词","_id":"cjpuy3tqp000n6oosywq2nklo"},{"name":"SEO","_id":"cjpuy3tqs000t6ooslh2kt5op"},{"name":"励志","_id":"cjpuy3tqw00126ooslml5g04t"},{"name":"前端分类","_id":"cjpuy3tr000166oosmfjp8hke"},{"name":"学习计划","_id":"cjpuy3tr2001a6oosq8vk8s7i"},{"name":"iview组件","_id":"cjpuy3trp001s6ooszmc4hny1"},{"name":"vue知识点","_id":"cjpuy3trw00236oosqojpnhv3"},{"name":"js知识点总结","_id":"cjpuy3ts0002a6oosvv6ssmbo"},{"name":"数组","_id":"cjpuy3ts4002g6oosv4gdyh44"},{"name":"算法","_id":"cjpuy3ts8002o6oosqlzxr7ll"},{"name":"正则表达式","_id":"cjpuy3tsd002w6ooste6kxn22"},{"name":"联调工具","_id":"cjpuy3tsg00316oosylg6ghxr"},{"name":"vue原理","_id":"cjpuy3tsh00356ooszumn0qy1"},{"name":"浏览器储存","_id":"cjpuy3tsj00396oos5wqjebs3"},{"name":"localStorage","_id":"cjpuy3tsk003d6oos3r80l3rn"},{"name":"node","_id":"cjpuy3tsl003e6oos46qggn6q"},{"name":"react","_id":"cjpuy3tsm003h6oospcxhg9am"},{"name":"小程序","_id":"cjpuy3tsn003j6oosx3kr2e0c"}]}}